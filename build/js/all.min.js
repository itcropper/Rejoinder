"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {

	"use strict";

	if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {

		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var _slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call(Object);

	var support = {};

	function DOMEval(code, doc) {
		doc = doc || document;

		var script = doc.createElement("script");

		script.text = code;
		doc.head.appendChild(script).parentNode.removeChild(script);
	}


	var version = "3.2.1",


	jQuery = function jQuery(selector, context) {

		return new jQuery.fn.init(selector, context);
	},


	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


	rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([a-z])/g,


	fcamelCase = function fcamelCase(all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {

		jquery: version,

		constructor: jQuery,

		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		get: function get(num) {

			if (num == null) {
				return _slice.call(this);
			}

			return num < 0 ? this[num + this.length] : this[num];
		},

		pushStack: function pushStack(elems) {

			var ret = jQuery.merge(this.constructor(), elems);

			ret.prevObject = this;

			return ret;
		},

		each: function each(callback) {
			return jQuery.each(this, callback);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor();
		},

		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		if (typeof target === "boolean") {
			deep = target;

			target = arguments[i] || {};
			i++;
		}

		if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {

			if ((options = arguments[i]) != null) {

				for (name in options) {
					src = target[name];
					copy = options[name];

					if (target === copy) {
						continue;
					}

					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {

						if (copyIsArray) {
							copyIsArray = false;
							clone = src && Array.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						target[name] = jQuery.extend(deep, clone, copy);

					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		return target;
	};

	jQuery.extend({

		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		isFunction: function isFunction(obj) {
			return jQuery.type(obj) === "function";
		},

		isWindow: function isWindow(obj) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function isNumeric(obj) {

			var type = jQuery.type(obj);
			return (type === "number" || type === "string") &&

			!isNaN(obj - parseFloat(obj));
		},

		isPlainObject: function isPlainObject(obj) {
			var proto, Ctor;

			if (!obj || toString.call(obj) !== "[object Object]") {
				return false;
			}

			proto = getProto(obj);

			if (!proto) {
				return true;
			}

			Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
			return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
		},

		isEmptyObject: function isEmptyObject(obj) {

			var name;

			for (name in obj) {
				return false;
			}
			return true;
		},

		type: function type(obj) {
			if (obj == null) {
				return obj + "";
			}

			return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		},

		globalEval: function globalEval(code) {
			DOMEval(code);
		},

		camelCase: function camelCase(string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		each: function each(obj, callback) {
			var length,
			    i = 0;

			if (isArrayLike(obj)) {
				length = obj.length;
				for (; i < length; i++) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			}

			return obj;
		},

		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArrayLike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		map: function map(elems, callback, arg) {
			var length,
			    value,
			    i = 0,
			    ret = [];

			if (isArrayLike(elems)) {
				length = elems.length;
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			return concat.apply([], ret);
		},

		guid: 1,

		proxy: function proxy(fn, context) {
			var tmp, args, proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			args = _slice.call(arguments, 2);
			proxy = function proxy() {
				return fn.apply(context || this, args.concat(_slice.call(arguments)));
			};

			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		support: support
	});

	if (typeof Symbol === "function") {
		jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	}

	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {

		var length = !!obj && "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",



		whitespace = "[\\x20\\t\\r\\n\\f]",


		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",


		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		"*([*^$|!~]?=)" + whitespace +
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + identifier + ")(?:\\((" +
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		".*" + ")\\)|)",


		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + identifier + ")"),
			"CLASS": new RegExp("^\\.(" + identifier + ")"),
			"TAG": new RegExp("^(" + identifier + "|[*])"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,


		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			String.fromCharCode(high + 0x10000) :
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		    fcssescape = function fcssescape(ch, asCodePoint) {
			if (asCodePoint) {

				if (ch === "\0") {
					return "\uFFFD";
				}

				return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
			}

			return "\\" + ch;
		},


		unloadHandler = function unloadHandler() {
			setDocument();
		},
		    disabledAncestor = addCombinator(function (elem) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		}, { dir: "parentNode", next: "legend" });

		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				function (target, els) {
					var j = target.length,
					    i = 0;
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var m,
			    i,
			    elem,
			    nid,
			    match,
			    groups,
			    newSelector,
			    newContext = context && context.ownerDocument,


			nodeType = context ? context.nodeType : 9;

			results = results || [];

			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			if (!seed) {

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}
				context = context || document;

				if (documentIsHTML) {

					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

						if (m = match[1]) {

							if (nodeType === 9) {
								if (elem = context.getElementById(m)) {

									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}

							} else {

								if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

									results.push(elem);
									return results;
								}
							}

						} else if (match[2]) {
							push.apply(results, context.getElementsByTagName(selector));
							return results;

						} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

							push.apply(results, context.getElementsByClassName(m));
							return results;
						}
					}

					if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

						if (nodeType !== 1) {
							newContext = context;
							newSelector = selector;

						} else if (context.nodeName.toLowerCase() !== "object") {

							if (nid = context.getAttribute("id")) {
								nid = nid.replace(rcssescape, fcssescape);
							} else {
								context.setAttribute("id", nid = expando);
							}

							groups = tokenize(selector);
							i = groups.length;
							while (i--) {
								groups[i] = "#" + nid + " " + toSelector(groups[i]);
							}
							newSelector = groups.join(",");

							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						}

						if (newSelector) {
							try {
								push.apply(results, newContext.querySelectorAll(newSelector));
								return results;
							} catch (qsaError) {} finally {
								if (nid === expando) {
									context.removeAttribute("id");
								}
							}
						}
					}
				}
			}

			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		function createCache() {
			var keys = [];

			function cache(key, value) {
				if (keys.push(key + " ") > Expr.cacheLength) {
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		function assert(fn) {
			var el = document.createElement("fieldset");

			try {
				return !!fn(el);
			} catch (e) {
				return false;
			} finally {
				if (el.parentNode) {
					el.parentNode.removeChild(el);
				}
				el = null;
			}
		}

		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = arr.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

			if (diff) {
				return diff;
			}

			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		function createDisabledPseudo(disabled) {

			return function (elem) {

				if ("form" in elem) {

					if (elem.parentNode && elem.disabled === false) {

						if ("label" in elem) {
							if ("label" in elem.parentNode) {
								return elem.parentNode.disabled === disabled;
							} else {
								return elem.disabled === disabled;
							}
						}

						return elem.isDisabled === disabled ||

						elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
					}

					return elem.disabled === disabled;

				} else if ("label" in elem) {
					return elem.disabled === disabled;
				}

				return false;
			};
		}

		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		support = Sizzle.support = {};

		isXML = Sizzle.isXML = function (elem) {
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    subWindow,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			document = doc;
			docElem = document.documentElement;
			documentIsHTML = !isXML(document);

			if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {

				if (subWindow.addEventListener) {
					subWindow.addEventListener("unload", unloadHandler, false);

				} else if (subWindow.attachEvent) {
					subWindow.attachEvent("onunload", unloadHandler);
				}
			}


			support.attributes = assert(function (el) {
				el.className = "i";
				return !el.getAttribute("className");
			});


			support.getElementsByTagName = assert(function (el) {
				el.appendChild(document.createComment(""));
				return !el.getElementsByTagName("*").length;
			});

			support.getElementsByClassName = rnative.test(document.getElementsByClassName);

			support.getById = assert(function (el) {
				docElem.appendChild(el).id = expando;
				return !document.getElementsByName || !document.getElementsByName(expando).length;
			});

			if (support.getById) {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var elem = context.getElementById(id);
						return elem ? [elem] : [];
					}
				};
			} else {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};

				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var node,
						    i,
						    elems,
						    elem = context.getElementById(id);

						if (elem) {

							node = elem.getAttributeNode("id");
							if (node && node.value === id) {
								return [elem];
							}

							elems = context.getElementsByName(id);
							i = 0;
							while (elem = elems[i++]) {
								node = elem.getAttributeNode("id");
								if (node && node.value === id) {
									return [elem];
								}
							}
						}

						return [];
					}
				};
			}

			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				results = context.getElementsByTagName(tag);

				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};



			rbuggyMatches = [];

			rbuggyQSA = [];

			if (support.qsa = rnative.test(document.querySelectorAll)) {
				assert(function (el) {
					docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

					if (el.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					if (!el.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					if (!el.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					if (!el.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (el) {
					el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

					var input = document.createElement("input");
					input.setAttribute("type", "hidden");
					el.appendChild(input).setAttribute("name", "D");

					if (el.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					if (el.querySelectorAll(":enabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					docElem.appendChild(el).disabled = true;
					if (el.querySelectorAll(":disabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					el.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (el) {
					support.disconnectedMatch = matches.call(el, "*");

					matches.call(el, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			hasCompare = rnative.test(docElem.compareDocumentPosition);

			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};


			sortOrder = hasCompare ? function (a, b) {

				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				1;

				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				if (!aup || !bup) {
					return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				siblingCheck(ap[i], bp[i]) :

				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return document;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					if (ret || support.disconnectedMatch ||
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.escape = function (sel) {
			return (sel + "").replace(rcssescape, fcssescape);
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			sortInput = null;

			return results;
		};

		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				while (node = elem[i++]) {
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}

			return ret;
		};

		Expr = Sizzle.selectors = {

			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					if (match[3]) {
						match[2] = match[4] || match[5] || "";

					} else if (unquoted && rpseudo.test(unquoted) && (
					excess = tokenize(unquoted, true)) && (
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    uniqueCache,
						    outerCache,
						    node,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType,
						    diff = false;

						if (parent) {

							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

											return false;
										}
									}
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							if (forward && useCache) {


								node = parent;
								outerCache = node[expando] || (node[expando] = {});

								uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

								cache = uniqueCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = nodeIndex && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								diff = nodeIndex = 0) || start.pop()) {

									if (node.nodeType === 1 && ++diff && node === elem) {
										uniqueCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}
							} else {
								if (useCache) {
									node = elem;
									outerCache = node[expando] || (node[expando] = {});

									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex;
								}

								if (diff === false) {
									while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

										if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

											if (useCache) {
												outerCache = node[expando] || (node[expando] = {});

												uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

												uniqueCache[type] = [dirruns, diff];
											}

											if (node === elem) {
												break;
											}
										}
									}
								}
							}

							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					if (fn[expando]) {
						return fn(argument);
					}

					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				"not": markFunction(function (selector) {
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				"lang": markFunction(function (lang) {
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				"enabled": createDisabledPseudo(false),
				"disabled": createDisabledPseudo(true),

				"checked": function checked(elem) {
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				"empty": function empty(elem) {
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    skip = combinator.next,
			    key = skip || dir,
			    checkNonElements = base && key === "parentNode",
			    doneName = done++;

			return combinator.first ?
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
				return false;
			} :

			function (elem, context, xml) {
				var oldCache,
				    uniqueCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});

							uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

							if (skip && skip === elem.nodeName.toLowerCase()) {
								elem = elem[dir] || elem;
							} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								return newCache[2] = oldCache[2];
							} else {
								uniqueCache[key] = newCache;

								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				[] :

				results : matcherIn;

				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					if (matcher[expando]) {
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context === document || context || outermost;
				}

				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						if (!context && elem.ownerDocument !== document) {
							setDocument(elem);
							xml = !documentIsHTML;
						}
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context || document, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					if (bySet) {
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				matchedCount += i;

				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						setMatched = condense(setMatched);
					}

					push.apply(results, setMatched);

					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match ) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				cached.selector = selector;
			}
			return cached;
		};

		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			if (match.length === 1) {

				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};


		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		support.detectDuplicates = !!hasDuplicate;

		setDocument();

		support.sortDetached = assert(function (el) {
			return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
		});

		if (!assert(function (el) {
			el.innerHTML = "<a href='#'></a>";
			return el.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		if (!support.attributes || !assert(function (el) {
			el.innerHTML = "<input/>";
			el.firstChild.setAttribute("value", "");
			return el.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		if (!assert(function (el) {
			return el.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;

	var dir = function dir(elem, _dir, until) {
		var matched = [],
		    truncate = until !== undefined;

		while ((elem = elem[_dir]) && elem.nodeType !== 9) {
			if (elem.nodeType === 1) {
				if (truncate && jQuery(elem).is(until)) {
					break;
				}
				matched.push(elem);
			}
		}
		return matched;
	};

	var _siblings = function _siblings(n, elem) {
		var matched = [];

		for (; n; n = n.nextSibling) {
			if (n.nodeType === 1 && n !== elem) {
				matched.push(n);
			}
		}

		return matched;
	};

	var rneedsContext = jQuery.expr.match.needsContext;

	function nodeName(elem, name) {

		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	};
	var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

	var risSimple = /^.[^:#\[\.,]*$/;

	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		if (typeof qualifier !== "string") {
			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not;
			});
		}

		if (risSimple.test(qualifier)) {
			return jQuery.filter(qualifier, elements, not);
		}

		qualifier = jQuery.filter(qualifier, elements);
		return jQuery.grep(elements, function (elem) {
			return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		if (elems.length === 1 && elem.nodeType === 1) {
			return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
		}

		return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    ret,
			    len = this.length,
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			ret = this.pushStack([]);

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			return len > 1 ? jQuery.uniqueSort(ret) : ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this,

			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});



	var rootjQuery,


	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	    init = jQuery.fn.init = function (selector, context, root) {
		var match, elem;

		if (!selector) {
			return this;
		}

		root = root || rootjQuery;

		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			if (match && (match[1] || !context)) {

				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {

							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);

							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

				} else {
					elem = document.getElementById(match[2]);

					if (elem) {

						this[0] = elem;
						this.length = 1;
					}
					return this;
				}

			} else if (!context || context.jquery) {
				return (context || root).find(selector);

			} else {
				return this.constructor(context).find(selector);
			}

		} else if (selector.nodeType) {
			this[0] = selector;
			this.length = 1;
			return this;

		} else if (jQuery.isFunction(selector)) {
			return root.ready !== undefined ? root.ready(selector) :

			selector(jQuery);
		}

		return jQuery.makeArray(selector, this);
	};

	init.prototype = jQuery.fn;

	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,


	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.fn.extend({
		has: function has(target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    targets = typeof selectors !== "string" && jQuery(selectors);

			if (!rneedsContext.test(selectors)) {
				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

						if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :

						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
		},

		index: function index(elem) {

			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			return indexOf.call(this,

			elem.jquery ? elem[0] : elem);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return _siblings((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return _siblings(elem.firstChild);
		},
		contents: function contents(elem) {
			if (nodeName(elem, "iframe")) {
				return elem.contentDocument;
			}

			if (nodeName(elem, "template")) {
				elem = elem.content || elem;
			}

			return jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {

				if (!guaranteedUnique[name]) {
					jQuery.uniqueSort(matched);
				}

				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

	function createOptions(options) {
		var object = {};
		jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	jQuery.Callbacks = function (options) {

		options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

		var 
		firing,


		memory,


		_fired,


		_locked,


		list = [],


		queue = [],


		firingIndex = -1,


		fire = function fire() {

			_locked = _locked || options.once;

			_fired = firing = true;
			for (; queue.length; firingIndex = -1) {
				memory = queue.shift();
				while (++firingIndex < list.length) {

					if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

						firingIndex = list.length;
						memory = false;
					}
				}
			}

			if (!options.memory) {
				memory = false;
			}

			firing = false;

			if (_locked) {

				if (memory) {
					list = [];

				} else {
					list = "";
				}
			}
		},


		self = {

			add: function add() {
				if (list) {

					if (memory && !firing) {
						firingIndex = list.length - 1;
						queue.push(memory);
					}

					(function add(args) {
						jQuery.each(args, function (_, arg) {
							if (jQuery.isFunction(arg)) {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && jQuery.type(arg) !== "string") {

								add(arg);
							}
						});
					})(arguments);

					if (memory && !firing) {
						fire();
					}
				}
				return this;
			},

			remove: function remove() {
				jQuery.each(arguments, function (_, arg) {
					var index;
					while ((index = jQuery.inArray(arg, list, index)) > -1) {
						list.splice(index, 1);

						if (index <= firingIndex) {
							firingIndex--;
						}
					}
				});
				return this;
			},

			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
			},

			empty: function empty() {
				if (list) {
					list = [];
				}
				return this;
			},

			disable: function disable() {
				_locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function disabled() {
				return !list;
			},

			lock: function lock() {
				_locked = queue = [];
				if (!memory && !firing) {
					list = memory = "";
				}
				return this;
			},
			locked: function locked() {
				return !!_locked;
			},

			fireWith: function fireWith(context, args) {
				if (!_locked) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					queue.push(args);
					if (!firing) {
						fire();
					}
				}
				return this;
			},

			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},

			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	function Identity(v) {
		return v;
	}
	function Thrower(ex) {
		throw ex;
	}

	function adoptValue(value, resolve, reject, noValue) {
		var method;

		try {

			if (value && jQuery.isFunction(method = value.promise)) {
				method.call(value).done(resolve).fail(reject);

			} else if (value && jQuery.isFunction(method = value.then)) {
				method.call(value, resolve, reject);

			} else {

				resolve.apply(undefined, [value].slice(noValue));
			}

		} catch (value) {

			reject.apply(undefined, [value]);
		}
	}

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [

			["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				"catch": function _catch(fn) {
					return _promise.then(null, fn);
				},

				pipe: function pipe() {
					var fns = arguments;

					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {

							var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];

							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
								} else {
									newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				then: function then(onFulfilled, onRejected, onProgress) {
					var maxDepth = 0;
					function resolve(depth, deferred, handler, special) {
						return function () {
							var that = this,
							    args = arguments,
							    mightThrow = function mightThrow() {
								var returned, then;

								if (depth < maxDepth) {
									return;
								}

								returned = handler.apply(that, args);

								if (returned === deferred.promise()) {
									throw new TypeError("Thenable self-resolution");
								}

								then = returned && (

								(typeof returned === "undefined" ? "undefined" : _typeof(returned)) === "object" || typeof returned === "function") && returned.then;

								if (jQuery.isFunction(then)) {

									if (special) {
										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

									} else {

										maxDepth++;

										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
									}

								} else {

									if (handler !== Identity) {
										that = undefined;
										args = [returned];
									}

									(special || deferred.resolveWith)(that, args);
								}
							},


							process = special ? mightThrow : function () {
								try {
									mightThrow();
								} catch (e) {

									if (jQuery.Deferred.exceptionHook) {
										jQuery.Deferred.exceptionHook(e, process.stackTrace);
									}

									if (depth + 1 >= maxDepth) {

										if (handler !== Thrower) {
											that = undefined;
											args = [e];
										}

										deferred.rejectWith(that, args);
									}
								}
							};

							if (depth) {
								process();
							} else {

								if (jQuery.Deferred.getStackHook) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout(process);
							}
						};
					}

					return jQuery.Deferred(function (newDefer) {

						tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

						tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));

						tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));
					}).promise();
				},

				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[5];

				_promise[tuple[1]] = list.add;

				if (stateString) {
					list.add(function () {

						_state = stateString;
					},

					tuples[3 - i][2].disable,

					tuples[0][2].lock);
				}

				list.add(tuple[3].fire);

				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
					return this;
				};

				deferred[tuple[0] + "With"] = list.fireWith;
			});

			_promise.promise(deferred);

			if (func) {
				func.call(deferred, deferred);
			}

			return deferred;
		},

		when: function when(singleValue) {
			var

			remaining = arguments.length,


			i = remaining,


			resolveContexts = Array(i),
			    resolveValues = _slice.call(arguments),


			master = jQuery.Deferred(),


			updateFunc = function updateFunc(i) {
				return function (value) {
					resolveContexts[i] = this;
					resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (! --remaining) {
						master.resolveWith(resolveContexts, resolveValues);
					}
				};
			};

			if (remaining <= 1) {
				adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

				if (master.state() === "pending" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {

					return master.then();
				}
			}

			while (i--) {
				adoptValue(resolveValues[i], updateFunc(i), master.reject);
			}

			return master.promise();
		}
	});

	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function (error, stack) {

		if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
			window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
		}
	};

	jQuery.readyException = function (error) {
		window.setTimeout(function () {
			throw error;
		});
	};

	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function (fn) {

		readyList.then(fn)

		.catch(function (error) {
			jQuery.readyException(error);
		});

		return this;
	};

	jQuery.extend({

		isReady: false,

		readyWait: 1,

		ready: function ready(wait) {

			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			jQuery.isReady = true;

			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			readyList.resolveWith(document, [jQuery]);
		}
	});

	jQuery.ready.then = readyList.then;

	function completed() {
		document.removeEventListener("DOMContentLoaded", completed);
		window.removeEventListener("load", completed);
		jQuery.ready();
	}

	if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

		window.setTimeout(jQuery.ready);
	} else {

		document.addEventListener("DOMContentLoaded", completed);

		window.addEventListener("load", completed);
	}

	var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				if (raw) {
					fn.call(elems, value);
					fn = null;

				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		if (chainable) {
			return elems;
		}

		if (bulk) {
			return fn.call(elems);
		}

		return len ? fn(elems[0], key) : emptyGet;
	};
	var acceptData = function acceptData(owner) {

		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function cache(owner) {

			var value = owner[this.expando];

			if (!value) {
				value = {};

				if (acceptData(owner)) {

					if (owner.nodeType) {
						owner[this.expando] = value;

					} else {
						Object.defineProperty(owner, this.expando, {
							value: value,
							configurable: true
						});
					}
				}
			}

			return value;
		},
		set: function set(owner, data, value) {
			var prop,
			    cache = this.cache(owner);

			if (typeof data === "string") {
				cache[jQuery.camelCase(data)] = value;

			} else {

				for (prop in data) {
					cache[jQuery.camelCase(prop)] = data[prop];
				}
			}
			return cache;
		},
		get: function get(owner, key) {
			return key === undefined ? this.cache(owner) :

			owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];
		},
		access: function access(owner, key, value) {

			if (key === undefined || key && typeof key === "string" && value === undefined) {

				return this.get(owner, key);
			}

			this.set(owner, key, value);

			return value !== undefined ? value : key;
		},
		remove: function remove(owner, key) {
			var i,
			    cache = owner[this.expando];

			if (cache === undefined) {
				return;
			}

			if (key !== undefined) {

				if (Array.isArray(key)) {

					key = key.map(jQuery.camelCase);
				} else {
					key = jQuery.camelCase(key);

					key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
				}

				i = key.length;

				while (i--) {
					delete cache[key[i]];
				}
			}

			if (key === undefined || jQuery.isEmptyObject(cache)) {

				if (owner.nodeType) {
					owner[this.expando] = undefined;
				} else {
					delete owner[this.expando];
				}
			}
		},
		hasData: function hasData(owner) {
			var cache = owner[this.expando];
			return cache !== undefined && !jQuery.isEmptyObject(cache);
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();


	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /[A-Z]/g;

	function getData(data) {
		if (data === "true") {
			return true;
		}

		if (data === "false") {
			return false;
		}

		if (data === "null") {
			return null;
		}

		if (data === +data + "") {
			return +data;
		}

		if (rbrace.test(data)) {
			return JSON.parse(data);
		}

		return data;
	}

	function dataAttr(elem, key, data) {
		var name;

		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = getData(data);
				} catch (e) {}

				dataUser.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function hasData(elem) {
			return dataUser.hasData(elem) || dataPriv.hasData(elem);
		},

		data: function data(elem, name, _data) {
			return dataUser.access(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			dataUser.remove(elem, name);
		},

		_data: function _data(elem, name, data) {
			return dataPriv.access(elem, name, data);
		},

		_removeData: function _removeData(elem, name) {
			dataPriv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			if (key === undefined) {
				if (this.length) {
					data = dataUser.get(elem);

					if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						dataPriv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
				return this.each(function () {
					dataUser.set(this, key);
				});
			}

			return access(this, function (value) {
				var data;

				if (elem && value === undefined) {

					data = dataUser.get(elem, key);
					if (data !== undefined) {
						return data;
					}

					data = dataAttr(elem, key);
					if (data !== undefined) {
						return data;
					}

					return;
				}

				this.each(function () {

					dataUser.set(this, key, value);
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function removeData(key) {
			return this.each(function () {
				dataUser.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = dataPriv.get(elem, type);

				if (data) {
					if (!queue || Array.isArray(data)) {
						queue = dataPriv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				if (type === "fx") {
					queue.unshift("inprogress");
				}

				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					dataPriv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},

		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = dataPriv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {

		elem = el || elem;

		return elem.style.display === "none" || elem.style.display === "" &&

		jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
	};

	var swap = function swap(elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	function adjustCSS(elem, prop, valueParts, tween) {
		var adjusted,
		    scale = 1,
		    maxIterations = 20,
		    currentValue = tween ? function () {
			return tween.cur();
		} : function () {
			return jQuery.css(elem, prop, "");
		},
		    initial = currentValue(),
		    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


		initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

		if (initialInUnit && initialInUnit[3] !== unit) {

			unit = unit || initialInUnit[3];

			valueParts = valueParts || [];

			initialInUnit = +initial || 1;

			do {

				scale = scale || ".5";

				initialInUnit = initialInUnit / scale;
				jQuery.style(elem, prop, initialInUnit + unit);

			} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
		}

		if (valueParts) {
			initialInUnit = +initialInUnit || +initial || 0;

			adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
			if (tween) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}

	var defaultDisplayMap = {};

	function getDefaultDisplay(elem) {
		var temp,
		    doc = elem.ownerDocument,
		    nodeName = elem.nodeName,
		    display = defaultDisplayMap[nodeName];

		if (display) {
			return display;
		}

		temp = doc.body.appendChild(doc.createElement(nodeName));
		display = jQuery.css(temp, "display");

		temp.parentNode.removeChild(temp);

		if (display === "none") {
			display = "block";
		}
		defaultDisplayMap[nodeName] = display;

		return display;
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    values = [],
		    index = 0,
		    length = elements.length;

		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			display = elem.style.display;
			if (show) {

				if (display === "none") {
					values[index] = dataPriv.get(elem, "display") || null;
					if (!values[index]) {
						elem.style.display = "";
					}
				}
				if (elem.style.display === "" && isHiddenWithinTree(elem)) {
					values[index] = getDefaultDisplay(elem);
				}
			} else {
				if (display !== "none") {
					values[index] = "none";

					dataPriv.set(elem, "display", display);
				}
			}
		}

		for (index = 0; index < length; index++) {
			if (values[index] != null) {
				elements[index].style.display = values[index];
			}
		}

		return elements;
	}

	jQuery.fn.extend({
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHiddenWithinTree(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});
	var rcheckableType = /^(?:checkbox|radio)$/i;

	var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;

	var rscriptType = /^$|\/(?:java|ecma)script/i;

	var wrapMap = {

		option: [1, "<select multiple='multiple'>", "</select>"],

		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {

		var ret;

		if (typeof context.getElementsByTagName !== "undefined") {
			ret = context.getElementsByTagName(tag || "*");
		} else if (typeof context.querySelectorAll !== "undefined") {
			ret = context.querySelectorAll(tag || "*");
		} else {
			ret = [];
		}

		if (tag === undefined || tag && nodeName(context, tag)) {
			return jQuery.merge([context], ret);
		}

		return ret;
	}

	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
		}
	}

	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
		var elem,
		    tmp,
		    tag,
		    wrap,
		    contains,
		    j,
		    fragment = context.createDocumentFragment(),
		    nodes = [],
		    i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			elem = elems[i];

			if (elem || elem === 0) {

				if (jQuery.type(elem) === "object") {

					jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

				} else if (!rhtml.test(elem)) {
					nodes.push(context.createTextNode(elem));

				} else {
					tmp = tmp || fragment.appendChild(context.createElement("div"));

					tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
					wrap = wrapMap[tag] || wrapMap._default;
					tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

					j = wrap[0];
					while (j--) {
						tmp = tmp.lastChild;
					}

					jQuery.merge(nodes, tmp.childNodes);

					tmp = fragment.firstChild;

					tmp.textContent = "";
				}
			}
		}

		fragment.textContent = "";

		i = 0;
		while (elem = nodes[i++]) {

			if (selection && jQuery.inArray(elem, selection) > -1) {
				if (ignored) {
					ignored.push(elem);
				}
				continue;
			}

			contains = jQuery.contains(elem.ownerDocument, elem);

			tmp = getAll(fragment.appendChild(elem), "script");

			if (contains) {
				setGlobalEval(tmp);
			}

			if (scripts) {
				j = 0;
				while (elem = tmp[j++]) {
					if (rscriptType.test(elem.type || "")) {
						scripts.push(elem);
					}
				}
			}
		}

		return fragment;
	}

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();
	var documentElement = document.documentElement;

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	function _on(elem, types, selector, data, fn, one) {
		var origFn, type;

		if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

			if (typeof selector !== "string") {

				data = data || selector;
				selector = undefined;
			}
			for (type in types) {
				_on(elem, type, selector, data, types[type], one);
			}
			return elem;
		}

		if (data == null && fn == null) {

			fn = selector;
			data = selector = undefined;
		} else if (fn == null) {
			if (typeof selector === "string") {

				fn = data;
				data = undefined;
			} else {

				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if (fn === false) {
			fn = returnFalse;
		} else if (!fn) {
			return elem;
		}

		if (one === 1) {
			origFn = fn;
			fn = function fn(event) {

				jQuery().off(event);
				return origFn.apply(this, arguments);
			};

			fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
		}
		return elem.each(function () {
			jQuery.event.add(this, types, fn, data, selector);
		});
	}

	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.get(elem);

			if (!elemData) {
				return;
			}

			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			if (selector) {
				jQuery.find.matchesSelector(documentElement, selector);
			}

			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {

					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				if (!type) {
					continue;
				}

				special = jQuery.event.special[type] || {};

				type = (selector ? special.delegateType : special.bindType) || type;

				special = jQuery.event.special[type] || {};

				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				jQuery.event.global[type] = true;
			}
		},

		remove: function remove(elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			if (jQuery.isEmptyObject(events)) {
				dataPriv.remove(elem, "handle events");
			}
		},

		dispatch: function dispatch(nativeEvent) {

			var event = jQuery.event.fix(nativeEvent);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue,
			    args = new Array(arguments.length),
			    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			args[0] = event;

			for (i = 1; i < arguments.length; i++) {
				args[i] = arguments[i];
			}

			event.delegateTarget = this;

			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var i,
			    handleObj,
			    sel,
			    matchedHandlers,
			    matchedSelectors,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			if (delegateCount &&

			cur.nodeType &&

			!(event.type === "click" && event.button >= 1)) {

				for (; cur !== this; cur = cur.parentNode || this) {

					if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
						matchedHandlers = [];
						matchedSelectors = {};
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							sel = handleObj.selector + " ";

							if (matchedSelectors[sel] === undefined) {
								matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matchedSelectors[sel]) {
								matchedHandlers.push(handleObj);
							}
						}
						if (matchedHandlers.length) {
							handlerQueue.push({ elem: cur, handlers: matchedHandlers });
						}
					}
				}
			}

			cur = this;
			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: cur, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		addProp: function addProp(name, hook) {
			Object.defineProperty(jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction(hook) ? function () {
					if (this.originalEvent) {
						return hook(this.originalEvent);
					}
				} : function () {
					if (this.originalEvent) {
						return this.originalEvent[name];
					}
				},

				set: function set(value) {
					Object.defineProperty(this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					});
				}
			});
		},

		fix: function fix(originalEvent) {
			return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
		},

		special: {
			load: {

				noBubble: true
			},
			focus: {

				trigger: function trigger() {
					if (this !== safeActiveElement() && this.focus) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function trigger() {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				trigger: function trigger() {
					if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
						this.click();
						return false;
					}
				},

				_default: function _default(event) {
					return nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {

					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function (elem, type, handle) {

		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle);
		}
	};

	jQuery.Event = function (src, props) {

		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

			src.returnValue === false ? returnTrue : returnFalse;

			this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		} else {
			this.type = src;
		}

		if (props) {
			jQuery.extend(this, props);
		}

		this.timeStamp = src && src.timeStamp || jQuery.now();

		this[jQuery.expando] = true;
	};

	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && !this.isSimulated) {
				e.preventDefault();
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	jQuery.each({
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function which(event) {
			var button = event.button;

			if (event.which == null && rkeyEvent.test(event.type)) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
				if (button & 1) {
					return 1;
				}

				if (button & 2) {
					return 3;
				}

				if (button & 4) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp);

	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	jQuery.fn.extend({

		on: function on(types, selector, data, fn) {
			return _on(this, types, selector, data, fn);
		},
		one: function one(types, selector, data, fn) {
			return _on(this, types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {

				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {

				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		}
	});

	var


	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,



	rnoInnerhtml = /<script|<style|<link/i,


	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget(elem, content) {
		if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

			return jQuery(">tbody", elem)[0] || elem;
		}

		return elem;
	}

	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);

		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		if (dataPriv.hasData(src)) {
			pdataOld = dataPriv.access(src);
			pdataCur = dataPriv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		if (dataUser.hasData(src)) {
			udataOld = dataUser.access(src);
			udataCur = jQuery.extend({}, udataOld);

			dataUser.set(dest, udataCur);
		}
	}

	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip(collection, args, callback, ignored) {

		args = concat.apply([], args);

		var fragment,
		    first,
		    scripts,
		    hasScripts,
		    node,
		    doc,
		    i = 0,
		    l = collection.length,
		    iNoClone = l - 1,
		    value = args[0],
		    isFunction = jQuery.isFunction(value);

		if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
			return collection.each(function (index) {
				var self = collection.eq(index);
				if (isFunction) {
					args[0] = value.call(this, index, self.html());
				}
				domManip(self, args, callback, ignored);
			});
		}

		if (l) {
			fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
			first = fragment.firstChild;

			if (fragment.childNodes.length === 1) {
				fragment = first;
			}

			if (first || ignored) {
				scripts = jQuery.map(getAll(fragment, "script"), disableScript);
				hasScripts = scripts.length;

				for (; i < l; i++) {
					node = fragment;

					if (i !== iNoClone) {
						node = jQuery.clone(node, true, true);

						if (hasScripts) {

							jQuery.merge(scripts, getAll(node, "script"));
						}
					}

					callback.call(collection[i], node, i);
				}

				if (hasScripts) {
					doc = scripts[scripts.length - 1].ownerDocument;

					jQuery.map(scripts, restoreScript);

					for (i = 0; i < hasScripts; i++) {
						node = scripts[i];
						if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

							if (node.src) {

								if (jQuery._evalUrl) {
									jQuery._evalUrl(node.src);
								}
							} else {
								DOMEval(node.textContent.replace(rcleanScript, ""), doc);
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function _remove(elem, selector, keepData) {
		var node,
		    nodes = selector ? jQuery.filter(selector, elem) : elem,
		    i = 0;

		for (; (node = nodes[i]) != null; i++) {
			if (!keepData && node.nodeType === 1) {
				jQuery.cleanData(getAll(node));
			}

			if (node.parentNode) {
				if (keepData && jQuery.contains(node.ownerDocument, node)) {
					setGlobalEval(getAll(node, "script"));
				}
				node.parentNode.removeChild(node);
			}
		}

		return elem;
	}

	jQuery.extend({
		htmlPrefilter: function htmlPrefilter(html) {
			return html.replace(rxhtmlTag, "<$1></$2>");
		},

		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			return clone;
		},

		cleanData: function cleanData(elems) {
			var data,
			    elem,
			    type,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (acceptData(elem)) {
					if (data = elem[dataPriv.expando]) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						elem[dataPriv.expando] = undefined;
					}
					if (elem[dataUser.expando]) {

						elem[dataUser.expando] = undefined;
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		detach: function detach(selector) {
			return _remove(this, selector, true);
		},

		remove: function remove(selector) {
			return _remove(this, selector);
		},

		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function append() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					jQuery.cleanData(getAll(elem, false));

					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = jQuery.htmlPrefilter(value);

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var ignored = [];

			return domManip(this, arguments, function (elem) {
				var parent = this.parentNode;

				if (jQuery.inArray(this, ignored) < 0) {
					jQuery.cleanData(getAll(this));
					if (parent) {
						parent.replaceChild(elem, this);
					}
				}

			}, ignored);
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function getStyles(elem) {

		var view = elem.ownerDocument.defaultView;

		if (!view || !view.opener) {
			view = window;
		}

		return view.getComputedStyle(elem);
	};

	(function () {

		function computeStyleTests() {

			if (!div) {
				return;
			}

			div.style.cssText = "box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild(container);

			var divStyle = window.getComputedStyle(div);
			pixelPositionVal = divStyle.top !== "1%";

			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild(container);

			div = null;
		}

		var pixelPositionVal,
		    boxSizingReliableVal,
		    pixelMarginRightVal,
		    reliableMarginLeftVal,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		if (!div.style) {
			return;
		}

		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
		container.appendChild(div);

		jQuery.extend(support, {
			pixelPosition: function pixelPosition() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function boxSizingReliable() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function pixelMarginRight() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function reliableMarginLeft() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		});
	})();

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,


		style = elem.style;

		computed = computed || getStyles(elem);

		if (computed) {
			ret = computed.getPropertyValue(name) || computed[name];

			if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
				ret = jQuery.style(elem, name);
			}

			if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {

		return {
			get: function get() {
				if (conditionFn()) {

					delete this.get;
					return;
				}

				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	var

	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rcustomProp = /^--/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "Moz", "ms"],
	    emptyStyle = document.createElement("div").style;

	function vendorPropName(name) {

		if (name in emptyStyle) {
			return name;
		}

		var capName = name[0].toUpperCase() + name.slice(1),
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in emptyStyle) {
				return name;
			}
		}
	}

	function finalPropName(name) {
		var ret = jQuery.cssProps[name];
		if (!ret) {
			ret = jQuery.cssProps[name] = vendorPropName(name) || name;
		}
		return ret;
	}

	function setPositiveNumber(elem, value, subtract) {

		var matches = rcssNum.exec(value);
		return matches ?

		Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i,
		    val = 0;

		if (extra === (isBorderBox ? "border" : "content")) {
			i = 4;

		} else {
			i = name === "width" ? 1 : 0;
		}

		for (; i < 4; i += 2) {

			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {

				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {

				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		var valueIsBorderBox,
		    styles = getStyles(elem),
		    val = curCSS(elem, name, styles),
		    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		if (rnumnonpx.test(val)) {
			return val;
		}

		valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

		if (val === "auto") {
			val = elem["offset" + name[0].toUpperCase() + name.slice(1)];
		}

		val = parseFloat(val) || 0;

		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	jQuery.extend({

		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {

						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		cssProps: {
			"float": "cssFloat"
		},

		style: function style(elem, name, value, extra) {

			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name),
			    style = elem.style;

			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			if (value !== undefined) {
				type = typeof value === "undefined" ? "undefined" : _typeof(value);

				if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
					value = adjustCSS(elem, name, ret);

					type = "number";
				}

				if (value == null || value !== value) {
					return;
				}

				if (type === "number") {
					value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
				}

				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

					if (isCustomProp) {
						style.setProperty(name, value);
					} else {
						style[name] = value;
					}
				}
			} else {

				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

					return ret;
				}

				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name);

			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || isFinite(num) ? num || 0 : val;
			}

			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function get(elem, computed, extra) {
				if (computed) {

					return rdisplayswap.test(jQuery.css(elem, "display")) && (

					!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function set(elem, value, extra) {
				var matches,
				    styles = extra && getStyles(elem),
				    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

				if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

					elem.style[name] = value;
					value = jQuery.css(elem, name);
				}

				return setPositiveNumber(elem, value, subtract);
			}
		};
	});

	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
		if (computed) {
			return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
				return elem.getBoundingClientRect().left;
			})) + "px";
		}
	});

	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},


				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (Array.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				result = jQuery.css(tween.elem, tween.prop, "");

				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {

				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	jQuery.fx.step = {};

	var fxNow,
	    inProgress,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rrun = /queueHooks$/;

	function schedule() {
		if (inProgress) {
			if (document.hidden === false && window.requestAnimationFrame) {
				window.requestAnimationFrame(schedule);
			} else {
				window.setTimeout(schedule, jQuery.fx.interval);
			}

			jQuery.fx.tick();
		}
	}

	function createFxNow() {
		window.setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		var prop,
		    value,
		    toggle,
		    hooks,
		    oldfire,
		    propTween,
		    restoreDisplay,
		    display,
		    isBox = "width" in props || "height" in props,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHiddenWithinTree(elem),
		    dataShow = dataPriv.get(elem, "fxshow");

		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {

				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		for (prop in props) {
			value = props[prop];
			if (rfxtypes.test(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;

					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
			}
		}

		propTween = !jQuery.isEmptyObject(props);
		if (!propTween && jQuery.isEmptyObject(orig)) {
			return;
		}

		if (isBox && elem.nodeType === 1) {

			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			restoreDisplay = dataShow && dataShow.display;
			if (restoreDisplay == null) {
				restoreDisplay = dataPriv.get(elem, "display");
			}
			display = jQuery.css(elem, "display");
			if (display === "none") {
				if (restoreDisplay) {
					display = restoreDisplay;
				} else {

					showHide([elem], true);
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css(elem, "display");
					showHide([elem]);
				}
			}

			if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
				if (jQuery.css(elem, "float") === "none") {

					if (!propTween) {
						anim.done(function () {
							style.display = restoreDisplay;
						});
						if (restoreDisplay == null) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		propTween = false;
		for (prop in orig) {

			if (!propTween) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
				}

				if (toggle) {
					dataShow.hidden = !hidden;
				}

				if (hidden) {
					showHide([elem], true);
				}


				anim.done(function () {


					if (!hidden) {
						showHide([elem]);
					}
					dataPriv.remove(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
			}

			propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
			if (!(prop in dataShow)) {
				dataShow[prop] = propTween.start;
				if (hidden) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (Array.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = Animation.prefilters.length,
		    deferred = jQuery.Deferred().always(function () {

			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			if (percent < 1 && length) {
				return remaining;
			}

			if (!length) {
				deferred.notifyWith(elem, [animation, 1, 0]);
			}

			deferred.resolveWith(elem, [animation]);
			return false;
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,


				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				if (gotoEnd) {
					deferred.notifyWith(elem, [animation, 1, 0]);
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				if (jQuery.isFunction(result.stop)) {
					jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
				}
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		return animation;
	}

	jQuery.Animation = jQuery.extend(Animation, {

		tweeners: {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value);
				adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
				return tween;
			}]
		},

		tweener: function tweener(props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.match(rnothtmlwhite);
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				Animation.tweeners[prop] = Animation.tweeners[prop] || [];
				Animation.tweeners[prop].unshift(callback);
			}
		},

		prefilters: [defaultPrefilter],

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				Animation.prefilters.unshift(callback);
			} else {
				Animation.prefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		if (jQuery.fx.off) {
			opt.duration = 0;
		} else {
			if (typeof opt.duration !== "number") {
				if (opt.duration in jQuery.fx.speeds) {
					opt.duration = jQuery.fx.speeds[opt.duration];
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {

			return this.filter(isHiddenWithinTree).css("opacity", 0).show()

			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {

				var anim = Animation(this, jQuery.extend({}, prop), optall);

				if (empty || dataPriv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = dataPriv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = dataPriv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				data.finish = true;

				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function () {
		if (inProgress) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function () {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		_default: 400
	};

	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = window.setTimeout(next, time);
			hooks.stop = function () {
				window.clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		support.checkOn = input.value !== "";

		support.optSelected = opt.selected;

		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
			}

			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				}

				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				elem.setAttribute(name, value + "");
				return value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			ret = jQuery.find.attr(elem, name);

			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    i = 0,


			attrNames = value && value.match(rnothtmlwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					elem.removeAttribute(name);
				}
			}
		}
	});

	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {

				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};

	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret,
			    handle,
			    lowercaseName = name.toLowerCase();

			if (!isXML) {

				handle = attrHandle[lowercaseName];
				attrHandle[lowercaseName] = ret;
				ret = getter(elem, name, isXML) != null ? lowercaseName : null;
				attrHandle[lowercaseName] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				return elem[name] = value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			return elem[name];
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {

					var tabindex = jQuery.find.attr(elem, "tabindex");

					if (tabindex) {
						return parseInt(tabindex, 10);
					}

					if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	});

	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {


				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function set(elem) {


				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	function stripAndCollapse(value) {
		var tokens = value.match(rnothtmlwhite) || [];
		return tokens.join(" ");
	}

	function getClass(elem) {
		return elem.getAttribute && elem.getAttribute("class") || "";
	}

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, getClass(this)));
				});
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, getClass(this)));
				});
			}

			if (!arguments.length) {
				return this.attr("class", "");
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);

					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {

							while (cur.indexOf(" " + clazz + " ") > -1) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value === "undefined" ? "undefined" : _typeof(value);

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
				});
			}

			return this.each(function () {
				var className, i, self, classNames;

				if (type === "string") {

					i = 0;
					self = jQuery(this);
					classNames = value.match(rnothtmlwhite) || [];

					while (className = classNames[i++]) {

						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

				} else if (value === undefined || type === "boolean") {
					className = getClass(this);
					if (className) {

						dataPriv.set(this, "__className__", className);
					}

					if (this.setAttribute) {
						this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
					}
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className,
			    elem,
			    i = 0;

			className = " " + selector + " ";
			while (elem = this[i++]) {
				if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					if (typeof ret === "string") {
						return ret.replace(rreturn, "");
					}

					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (Array.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {

					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :

					stripAndCollapse(jQuery.text(elem));
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    i,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one",
					    values = one ? null : [],
					    max = one ? index + 1 : options.length;

					if (index < 0) {
						i = max;
					} else {
						i = one ? index : 0;
					}

					for (; i < max; i++) {
						option = options[i];

						if ((option.selected || i === index) &&

						!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {

							value = jQuery(option).val();

							if (one) {
								return value;
							}

							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];


						if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
							optionSet = true;
						}

					}

					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (Array.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});



	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend(jQuery.event, {

		trigger: function trigger(event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") > -1) {

				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				handle = ontype && cur[ontype];
				if (handle && handle.apply && acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

					if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		simulate: function simulate(type, elem, event) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true
			});

			jQuery.event.trigger(e, null, elem);
		}

	});

	jQuery.fn.extend({

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {

		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});

	support.focusin = "onfocusin" in window;

	if (!support.focusin) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					dataPriv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						dataPriv.remove(doc, fix);
					} else {
						dataPriv.access(doc, fix, attaches);
					}
				}
			};
		});
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = /\?/;

	jQuery.parseXML = function (data) {
		var xml;
		if (!data || typeof data !== "string") {
			return null;
		}

		try {
			xml = new window.DOMParser().parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (Array.isArray(obj)) {

			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {

					add(prefix, v);
				} else {

					buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {

			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {

			add(prefix, obj);
		}
	}

	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, valueOrFunction) {

			var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
		};

		if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {

			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		return s.join("&");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {

				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				if (val == null) {
					return null;
				}

				if (Array.isArray(val)) {
					return jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					});
				}

				return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	var r20 = /%20/g,
	    rhash = /#.*$/,
	    rantiCache = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,


	prefilters = {},


	transports = {},


	allTypes = "*/".concat("*"),


	originAnchor = document.createElement("a");
	originAnchor.href = location.href;

	function addToPrefiltersOrTransports(structure) {

		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

			if (jQuery.isFunction(func)) {

				while (dataType = dataTypes[i++]) {

					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {

			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			finalDataType = finalDataType || firstDataType;
		}

		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},


		dataTypes = s.dataTypes.slice();

		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				if (current === "*") {

					current = prev;

				} else if (prev !== "*" && prev !== current) {

					conv = converters[prev + " " + current] || converters["* " + current];

					if (!conv) {
						for (conv2 in converters) {

							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {

									if (conv === true) {
										conv = converters[conv2];

									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					if (conv !== true) {

						if (conv && s.throws) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		active: 0,

		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test(location.protocol),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",


			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			converters: {

				"* text": String,

				"text html": true,

				"text json": JSON.parse,

				"text xml": jQuery.parseXML
			},

			flatOptions: {
				url: true,
				context: true
			}
		},

		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ?

			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		ajax: function ajax(url, options) {

			if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
				options = url;
				url = undefined;
			}

			options = options || {};

			var transport,


			cacheURL,


			responseHeadersString,
			    responseHeaders,


			timeoutTimer,


			urlAnchor,


			completed,


			fireGlobals,


			i,


			uncached,


			s = jQuery.ajaxSetup({}, options),


			callbackContext = s.context || s,


			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),


			_statusCode = s.statusCode || {},


			requestHeaders = {},
			    requestHeadersNames = {},


			strAbort = "canceled",


			jqXHR = {
				readyState: 0,

				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (completed) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				getAllResponseHeaders: function getAllResponseHeaders() {
					return completed ? responseHeadersString : null;
				},

				setRequestHeader: function setRequestHeader(name, value) {
					if (completed == null) {
						name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				overrideMimeType: function overrideMimeType(type) {
					if (completed == null) {
						s.mimeType = type;
					}
					return this;
				},

				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (completed) {

							jqXHR.always(map[jqXHR.status]);
						} else {

							for (code in map) {
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						}
					}
					return this;
				},

				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			deferred.promise(jqXHR);

			s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

			s.type = options.method || options.type || s.method || s.type;

			s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

			if (s.crossDomain == null) {
				urlAnchor = document.createElement("a");

				try {
					urlAnchor.href = s.url;

					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
				} catch (e) {

					s.crossDomain = true;
				}
			}

			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			if (completed) {
				return jqXHR;
			}

			fireGlobals = jQuery.event && s.global;

			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			s.type = s.type.toUpperCase();

			s.hasContent = !rnoContent.test(s.type);

			cacheURL = s.url.replace(rhash, "");

			if (!s.hasContent) {

				uncached = s.url.slice(cacheURL.length);

				if (s.data) {
					cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

					delete s.data;
				}

				if (s.cache === false) {
					cacheURL = cacheURL.replace(rantiCache, "$1");
					uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
				}

				s.url = cacheURL + uncached;

			} else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
				s.data = s.data.replace(r20, "+");
			}

			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

				return jqXHR.abort();
			}

			strAbort = "abort";

			completeDeferred.add(s.complete);
			jqXHR.done(s.success);
			jqXHR.fail(s.error);

			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				if (completed) {
					return jqXHR;
				}

				if (s.async && s.timeout > 0) {
					timeoutTimer = window.setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					completed = false;
					transport.send(requestHeaders, done);
				} catch (e) {

					if (completed) {
						throw e;
					}

					done(-1, e);
				}
			}

			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				if (completed) {
					return;
				}

				completed = true;

				if (timeoutTimer) {
					window.clearTimeout(timeoutTimer);
				}

				transport = undefined;

				responseHeadersString = headers || "";

				jqXHR.readyState = status > 0 ? 4 : 0;

				isSuccess = status >= 200 && status < 300 || status === 304;

				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				response = ajaxConvert(s, response, jqXHR, isSuccess);

				if (isSuccess) {

					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

					} else if (status === 304) {
						statusText = "notmodified";

					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {

			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax(jQuery.extend({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject(url) && url));
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,

			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			var wrap;

			if (this[0]) {
				if (jQuery.isFunction(html)) {
					html = html.call(this[0]);
				}

				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap(selector) {
			this.parent(selector).not("body").each(function () {
				jQuery(this).replaceWith(this.childNodes);
			});
			return this;
		}
	});

	jQuery.expr.pseudos.hidden = function (elem) {
		return !jQuery.expr.pseudos.visible(elem);
	};
	jQuery.expr.pseudos.visible = function (elem) {
		return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
	};

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	};

	var xhrSuccessStatus = {

		0: 200,

		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var _callback, errorCallback;

		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function send(headers, complete) {
					var i,
					    xhr = options.xhr();

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					_callback = function callback(type) {
						return function () {
							if (_callback) {
								_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {

									if (typeof xhr.status !== "number") {
										complete(0, "error");
									} else {
										complete(

										xhr.status, xhr.statusText);
									}
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

									(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					xhr.onload = _callback();
					errorCallback = xhr.onerror = _callback("error");

					if (xhr.onabort !== undefined) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function () {

							if (xhr.readyState === 4) {

								window.setTimeout(function () {
									if (_callback) {
										errorCallback();
									}
								});
							}
						};
					}

					_callback = _callback("abort");

					try {

						xhr.send(options.hasContent && options.data || null);
					} catch (e) {

						if (_callback) {
							throw e;
						}
					}
				},

				abort: function abort() {
					if (_callback) {
						_callback();
					}
				}
			};
		}
	});

	jQuery.ajaxPrefilter(function (s) {
		if (s.crossDomain) {
			s.contents.script = false;
		}
	});

	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	jQuery.ajaxTransport("script", function (s) {

		if (s.crossDomain) {
			var script, _callback2;
			return {
				send: function send(_, complete) {
					script = jQuery("<script>").prop({
						charset: s.scriptCharset,
						src: s.url
					}).on("load error", _callback2 = function callback(evt) {
						script.remove();
						_callback2 = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});

					document.head.appendChild(script[0]);
				},
				abort: function abort() {
					if (_callback2) {
						_callback2();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

		if (jsonProp || s.dataTypes[0] === "jsonp") {

			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			s.dataTypes[0] = "json";

			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			jqXHR.always(function () {

				if (overwritten === undefined) {
					jQuery(window).removeProp(callbackName);

				} else {
					window[callbackName] = overwritten;
				}

				if (s[callbackName]) {

					s.jsonpCallback = originalSettings.jsonpCallback;

					oldCallbacks.push(callbackName);
				}

				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			return "script";
		}
	});

	support.createHTMLDocument = function () {
		var body = document.implementation.createHTMLDocument("").body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	}();

	jQuery.parseHTML = function (data, context, keepScripts) {
		if (typeof data !== "string") {
			return [];
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if (!context) {

			if (support.createHTMLDocument) {
				context = document.implementation.createHTMLDocument("");

				base = context.createElement("base");
				base.href = document.location.href;
				context.head.appendChild(base);
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec(data);
		scripts = !keepScripts && [];

		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	jQuery.fn.load = function (url, params, callback) {
		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off > -1) {
			selector = stripAndCollapse(url.slice(off));
			url = url.slice(0, off);
		}

		if (jQuery.isFunction(params)) {

			callback = params;
			params = undefined;

		} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
			type = "POST";
		}

		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				type: type || "GET",
				dataType: "html",
				data: params
			}).done(function (responseText) {

				response = arguments;

				self.html(selector ?

				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				responseText);

			}).always(callback && function (jqXHR, status) {
				self.each(function () {
					callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
				});
			});
		}

		return this;
	};

	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.pseudos.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {

				options = options.call(elem, i, jQuery.extend({}, curOffset));
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function offset(options) {

			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var doc,
			    docElem,
			    rect,
			    win,
			    elem = this[0];

			if (!elem) {
				return;
			}

			if (!elem.getClientRects().length) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			if (jQuery.css(elem, "position") === "fixed") {

				offset = elem.getBoundingClientRect();
			} else {

				offsetParent = this.offsetParent();

				offset = this.offset();
				if (!nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				parentOffset = {
					top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
					left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
				};
			}

			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent;

				while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			});
		}
	});

	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {

				var win;
				if (jQuery.isWindow(elem)) {
					win = elem;
				} else if (elem.nodeType === 9) {
					win = elem.defaultView;
				}

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length);
		};
	});

	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);

				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {

						return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
					}

					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?

					jQuery.css(elem, type, extra) :

					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable);
			};
		});
	});

	jQuery.fn.extend({

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {

			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	jQuery.holdReady = function (hold) {
		if (hold) {
			jQuery.readyWait++;
		} else {
			jQuery.ready(true);
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;



	if (typeof define === "function" && define.amd) {
		define("jquery", [], function () {
			return jQuery;
		});
	}

	var

	_jQuery = window.jQuery,


	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	if (!noGlobal) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});

"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }return target;
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

(function (factory, window, document) {
    if (typeof define === "function" && define.amd) {
        define([], function () {
            return factory(window, document);
        });
    } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {
        module.exports = factory(window, document);
    } else {
        factory(window, document);
    }
})(function (window, document) {
    var Mark = function () {
        function Mark(ctx) {
            _classCallCheck(this, Mark);

            this.ctx = ctx;

            this.ie = false;
            var ua = window.navigator.userAgent;
            if (ua.indexOf("MSIE") > -1 || ua.indexOf("Trident") > -1) {
                this.ie = true;
            }
        }

        _createClass(Mark, [{
            key: "log",
            value: function log(msg) {
                var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "debug";

                var log = this.opt.log;
                if (!this.opt.debug) {
                    return;
                }
                if ((typeof log === "undefined" ? "undefined" : _typeof(log)) === "object" && typeof log[level] === "function") {
                    log[level]("mark.js: " + msg);
                }
            }
        }, {
            key: "escapeStr",
            value: function escapeStr(str) {
                return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            }
        }, {
            key: "createRegExp",
            value: function createRegExp(str) {
                if (this.opt.wildcards !== "disabled") {
                    str = this.setupWildcardsRegExp(str);
                }
                str = this.escapeStr(str);
                if (Object.keys(this.opt.synonyms).length) {
                    str = this.createSynonymsRegExp(str);
                }
                if (this.opt.ignoreJoiners || this.opt.ignorePunctuation.length) {
                    str = this.setupIgnoreJoinersRegExp(str);
                }
                if (this.opt.diacritics) {
                    str = this.createDiacriticsRegExp(str);
                }
                str = this.createMergedBlanksRegExp(str);
                if (this.opt.ignoreJoiners || this.opt.ignorePunctuation.length) {
                    str = this.createJoinersRegExp(str);
                }
                if (this.opt.wildcards !== "disabled") {
                    str = this.createWildcardsRegExp(str);
                }
                str = this.createAccuracyRegExp(str);
                return str;
            }
        }, {
            key: "createSynonymsRegExp",
            value: function createSynonymsRegExp(str) {
                var syn = this.opt.synonyms,
                    sens = this.opt.caseSensitive ? "" : "i",
                    joinerPlaceholder = this.opt.ignoreJoiners || this.opt.ignorePunctuation.length ? "\0" : "";
                for (var index in syn) {
                    if (syn.hasOwnProperty(index)) {
                        var value = syn[index],
                            k1 = this.opt.wildcards !== "disabled" ? this.setupWildcardsRegExp(index) : this.escapeStr(index),
                            k2 = this.opt.wildcards !== "disabled" ? this.setupWildcardsRegExp(value) : this.escapeStr(value);
                        if (k1 !== "" && k2 !== "") {
                            str = str.replace(new RegExp("(" + k1 + "|" + k2 + ")", "gm" + sens), joinerPlaceholder + ("(" + this.processSynomyms(k1) + "|") + (this.processSynomyms(k2) + ")") + joinerPlaceholder);
                        }
                    }
                }
                return str;
            }
        }, {
            key: "processSynomyms",
            value: function processSynomyms(str) {
                if (this.opt.ignoreJoiners || this.opt.ignorePunctuation.length) {
                    str = this.setupIgnoreJoinersRegExp(str);
                }
                return str;
            }
        }, {
            key: "setupWildcardsRegExp",
            value: function setupWildcardsRegExp(str) {
                str = str.replace(/(?:\\)*\?/g, function (val) {
                    return val.charAt(0) === "\\" ? "?" : "\x01";
                });

                return str.replace(/(?:\\)*\*/g, function (val) {
                    return val.charAt(0) === "\\" ? "*" : "\x02";
                });
            }
        }, {
            key: "createWildcardsRegExp",
            value: function createWildcardsRegExp(str) {
                var spaces = this.opt.wildcards === "withSpaces";
                return str.replace(/\u0001/g, spaces ? "[\\S\\s]?" : "\\S?").replace(/\u0002/g, spaces ? "[\\S\\s]*?" : "\\S*");
            }
        }, {
            key: "setupIgnoreJoinersRegExp",
            value: function setupIgnoreJoinersRegExp(str) {
                return str.replace(/[^(|)\\]/g, function (val, indx, original) {
                    var nextChar = original.charAt(indx + 1);
                    if (/[(|)\\]/.test(nextChar) || nextChar === "") {
                        return val;
                    } else {
                        return val + "\0";
                    }
                });
            }
        }, {
            key: "createJoinersRegExp",
            value: function createJoinersRegExp(str) {
                var joiner = [];
                var ignorePunctuation = this.opt.ignorePunctuation;
                if (Array.isArray(ignorePunctuation) && ignorePunctuation.length) {
                    joiner.push(this.escapeStr(ignorePunctuation.join("")));
                }
                if (this.opt.ignoreJoiners) {
                    joiner.push("\\u00ad\\u200b\\u200c\\u200d");
                }
                return joiner.length ? str.split(/\u0000+/).join("[" + joiner.join("") + "]*") : str;
            }
        }, {
            key: "createDiacriticsRegExp",
            value: function createDiacriticsRegExp(str) {
                var sens = this.opt.caseSensitive ? "" : "i",
                    dct = this.opt.caseSensitive ? ["aàáâãäåāąă", "AÀÁÂÃÄÅĀĄĂ", "cçćč", "CÇĆČ", "dđď", "DĐĎ", "eèéêëěēę", "EÈÉÊËĚĒĘ", "iìíîïī", "IÌÍÎÏĪ", "lł", "LŁ", "nñňń", "NÑŇŃ", "oòóôõöøō", "OÒÓÔÕÖØŌ", "rř", "RŘ", "sšśșş", "SŠŚȘŞ", "tťțţ", "TŤȚŢ", "uùúûüůū", "UÙÚÛÜŮŪ", "yÿý", "YŸÝ", "zžżź", "ZŽŻŹ"] : ["aàáâãäåāąăAÀÁÂÃÄÅĀĄĂ", "cçćčCÇĆČ", "dđďDĐĎ", "eèéêëěēęEÈÉÊËĚĒĘ", "iìíîïīIÌÍÎÏĪ", "lłLŁ", "nñňńNÑŇŃ", "oòóôõöøōOÒÓÔÕÖØŌ", "rřRŘ", "sšśșşSŠŚȘŞ", "tťțţTŤȚŢ", "uùúûüůūUÙÚÛÜŮŪ", "yÿýYŸÝ", "zžżźZŽŻŹ"];
                var handled = [];
                str.split("").forEach(function (ch) {
                    dct.every(function (dct) {
                        if (dct.indexOf(ch) !== -1) {
                            if (handled.indexOf(dct) > -1) {
                                return false;
                            }

                            str = str.replace(new RegExp("[" + dct + "]", "gm" + sens), "[" + dct + "]");
                            handled.push(dct);
                        }
                        return true;
                    });
                });
                return str;
            }
        }, {
            key: "createMergedBlanksRegExp",
            value: function createMergedBlanksRegExp(str) {
                return str.replace(/[\s]+/gmi, "[\\s]+");
            }
        }, {
            key: "createAccuracyRegExp",
            value: function createAccuracyRegExp(str) {
                var _this = this;

                var chars = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\xA1\xBF";
                var acc = this.opt.accuracy,
                    val = typeof acc === "string" ? acc : acc.value,
                    ls = typeof acc === "string" ? [] : acc.limiters,
                    lsJoin = "";
                ls.forEach(function (limiter) {
                    lsJoin += "|" + _this.escapeStr(limiter);
                });
                switch (val) {
                    case "partially":
                    default:
                        return "()(" + str + ")";
                    case "complementary":
                        lsJoin = "\\s" + (lsJoin ? lsJoin : this.escapeStr(chars));
                        return "()([^" + lsJoin + "]*" + str + "[^" + lsJoin + "]*)";
                    case "exactly":
                        return "(^|\\s" + lsJoin + ")(" + str + ")(?=$|\\s" + lsJoin + ")";
                }
            }
        }, {
            key: "getSeparatedKeywords",
            value: function getSeparatedKeywords(sv) {
                var _this2 = this;

                var stack = [];
                sv.forEach(function (kw) {
                    if (!_this2.opt.separateWordSearch) {
                        if (kw.trim() && stack.indexOf(kw) === -1) {
                            stack.push(kw);
                        }
                    } else {
                        kw.split(" ").forEach(function (kwSplitted) {
                            if (kwSplitted.trim() && stack.indexOf(kwSplitted) === -1) {
                                stack.push(kwSplitted);
                            }
                        });
                    }
                });
                return {
                    "keywords": stack.sort(function (a, b) {
                        return b.length - a.length;
                    }),
                    "length": stack.length
                };
            }
        }, {
            key: "isNumeric",
            value: function isNumeric(value) {
                return Number(parseFloat(value)) == value;
            }
        }, {
            key: "checkRanges",
            value: function checkRanges(array) {
                var _this3 = this;

                if (!Array.isArray(array) || Object.prototype.toString.call(array[0]) !== "[object Object]") {
                    this.log("markRanges() will only accept an array of objects");
                    this.opt.noMatch(array);
                    return [];
                }
                var stack = [];
                var last = 0;
                array.sort(function (a, b) {
                    return a.start - b.start;
                }).forEach(function (item) {
                    var _callNoMatchOnInvalid = _this3.callNoMatchOnInvalidRanges(item, last),
                        start = _callNoMatchOnInvalid.start,
                        end = _callNoMatchOnInvalid.end,
                        valid = _callNoMatchOnInvalid.valid;

                    if (valid) {
                        item.start = start;
                        item.length = end - start;
                        stack.push(item);
                        last = end;
                    }
                });
                return stack;
            }
        }, {
            key: "callNoMatchOnInvalidRanges",
            value: function callNoMatchOnInvalidRanges(range, last) {
                var start = void 0,
                    end = void 0,
                    valid = false;
                if (range && typeof range.start !== "undefined") {
                    start = parseInt(range.start, 10);
                    end = start + parseInt(range.length, 10);

                    if (this.isNumeric(range.start) && this.isNumeric(range.length) && end - last > 0 && end - start > 0) {
                        valid = true;
                    } else {
                        this.log("Ignoring invalid or overlapping range: " + ("" + JSON.stringify(range)));
                        this.opt.noMatch(range);
                    }
                } else {
                    this.log("Ignoring invalid range: " + JSON.stringify(range));
                    this.opt.noMatch(range);
                }
                return {
                    start: start,
                    end: end,
                    valid: valid
                };
            }
        }, {
            key: "checkWhitespaceRanges",
            value: function checkWhitespaceRanges(range, originalLength, string) {
                var end = void 0,
                    valid = true,
                    max = string.length,
                    offset = originalLength - max,
                    start = parseInt(range.start, 10) - offset;

                start = start > max ? max : start;
                end = start + parseInt(range.length, 10);
                if (end > max) {
                    end = max;
                    this.log("End range automatically set to the max value of " + max);
                }
                if (start < 0 || end - start < 0 || start > max || end > max) {
                    valid = false;
                    this.log("Invalid range: " + JSON.stringify(range));
                    this.opt.noMatch(range);
                } else if (string.substring(start, end).replace(/\s+/g, "") === "") {
                    valid = false;

                    this.log("Skipping whitespace only range: " + JSON.stringify(range));
                    this.opt.noMatch(range);
                }
                return {
                    start: start,
                    end: end,
                    valid: valid
                };
            }
        }, {
            key: "getTextNodes",
            value: function getTextNodes(cb) {
                var _this4 = this;

                var val = "",
                    nodes = [];
                this.iterator.forEachNode(NodeFilter.SHOW_TEXT, function (node) {
                    nodes.push({
                        start: val.length,
                        end: (val += node.textContent).length,
                        node: node
                    });
                }, function (node) {
                    if (_this4.matchesExclude(node.parentNode)) {
                        return NodeFilter.FILTER_REJECT;
                    } else {
                        return NodeFilter.FILTER_ACCEPT;
                    }
                }, function () {
                    cb({
                        value: val,
                        nodes: nodes
                    });
                });
            }
        }, {
            key: "matchesExclude",
            value: function matchesExclude(el) {
                return DOMIterator.matches(el, this.opt.exclude.concat(["script", "style", "title", "head", "html"]));
            }
        }, {
            key: "wrapRangeInTextNode",
            value: function wrapRangeInTextNode(node, start, end) {
                var hEl = !this.opt.element ? "mark" : this.opt.element,
                    startNode = node.splitText(start),
                    ret = startNode.splitText(end - start);
                var repl = document.createElement(hEl);
                repl.setAttribute("data-markjs", "true");
                if (this.opt.className) {
                    repl.setAttribute("class", this.opt.className);
                }
                repl.textContent = startNode.textContent;
                startNode.parentNode.replaceChild(repl, startNode);
                return ret;
            }
        }, {
            key: "wrapRangeInMappedTextNode",
            value: function wrapRangeInMappedTextNode(dict, start, end, filterCb, eachCb) {
                var _this5 = this;

                dict.nodes.every(function (n, i) {
                    var sibl = dict.nodes[i + 1];
                    if (typeof sibl === "undefined" || sibl.start > start) {
                        if (!filterCb(n.node)) {
                            return false;
                        }

                        var s = start - n.start,
                            e = (end > n.end ? n.end : end) - n.start,
                            startStr = dict.value.substr(0, n.start),
                            endStr = dict.value.substr(e + n.start);
                        n.node = _this5.wrapRangeInTextNode(n.node, s, e);

                        dict.value = startStr + endStr;
                        dict.nodes.forEach(function (k, j) {
                            if (j >= i) {
                                if (dict.nodes[j].start > 0 && j !== i) {
                                    dict.nodes[j].start -= e;
                                }
                                dict.nodes[j].end -= e;
                            }
                        });
                        end -= e;
                        eachCb(n.node.previousSibling, n.start);
                        if (end > n.end) {
                            start = n.end;
                        } else {
                            return false;
                        }
                    }
                    return true;
                });
            }
        }, {
            key: "wrapMatches",
            value: function wrapMatches(regex, ignoreGroups, filterCb, eachCb, endCb) {
                var _this6 = this;

                var matchIdx = ignoreGroups === 0 ? 0 : ignoreGroups + 1;
                this.getTextNodes(function (dict) {
                    dict.nodes.forEach(function (node) {
                        node = node.node;
                        var match = void 0;
                        while ((match = regex.exec(node.textContent)) !== null && match[matchIdx] !== "") {
                            if (!filterCb(match[matchIdx], node)) {
                                continue;
                            }
                            var pos = match.index;
                            if (matchIdx !== 0) {
                                for (var i = 1; i < matchIdx; i++) {
                                    pos += match[i].length;
                                }
                            }
                            node = _this6.wrapRangeInTextNode(node, pos, pos + match[matchIdx].length);
                            eachCb(node.previousSibling);

                            regex.lastIndex = 0;
                        }
                    });
                    endCb();
                });
            }
        }, {
            key: "wrapMatchesAcrossElements",
            value: function wrapMatchesAcrossElements(regex, ignoreGroups, filterCb, eachCb, endCb) {
                var _this7 = this;

                var matchIdx = ignoreGroups === 0 ? 0 : ignoreGroups + 1;
                this.getTextNodes(function (dict) {
                    var match = void 0;
                    while ((match = regex.exec(dict.value)) !== null && match[matchIdx] !== "") {
                        var start = match.index;
                        if (matchIdx !== 0) {
                            for (var i = 1; i < matchIdx; i++) {
                                start += match[i].length;
                            }
                        }
                        var end = start + match[matchIdx].length;

                        _this7.wrapRangeInMappedTextNode(dict, start, end, function (node) {
                            return filterCb(match[matchIdx], node);
                        }, function (node, lastIndex) {
                            regex.lastIndex = lastIndex;
                            eachCb(node);
                        });
                    }
                    endCb();
                });
            }
        }, {
            key: "wrapRangeFromIndex",
            value: function wrapRangeFromIndex(ranges, filterCb, eachCb, endCb) {
                var _this8 = this;

                this.getTextNodes(function (dict) {
                    var originalLength = dict.value.length;
                    ranges.forEach(function (range, counter) {
                        var _checkWhitespaceRange = _this8.checkWhitespaceRanges(range, originalLength, dict.value),
                            start = _checkWhitespaceRange.start,
                            end = _checkWhitespaceRange.end,
                            valid = _checkWhitespaceRange.valid;

                        if (valid) {
                            _this8.wrapRangeInMappedTextNode(dict, start, end, function (node) {
                                return filterCb(node, range, dict.value.substring(start, end), counter);
                            }, function (node) {
                                eachCb(node, range);
                            });
                        }
                    });
                    endCb();
                });
            }
        }, {
            key: "unwrapMatches",
            value: function unwrapMatches(node) {
                var parent = node.parentNode;
                var docFrag = document.createDocumentFragment();
                while (node.firstChild) {
                    docFrag.appendChild(node.removeChild(node.firstChild));
                }
                parent.replaceChild(docFrag, node);
                if (!this.ie) {
                    parent.normalize();
                } else {
                    this.normalizeTextNode(parent);
                }
            }
        }, {
            key: "normalizeTextNode",
            value: function normalizeTextNode(node) {
                if (!node) {
                    return;
                }
                if (node.nodeType === 3) {
                    while (node.nextSibling && node.nextSibling.nodeType === 3) {
                        node.nodeValue += node.nextSibling.nodeValue;
                        node.parentNode.removeChild(node.nextSibling);
                    }
                } else {
                    this.normalizeTextNode(node.firstChild);
                }
                this.normalizeTextNode(node.nextSibling);
            }
        }, {
            key: "markRegExp",
            value: function markRegExp(regexp, opt) {
                var _this9 = this;

                this.opt = opt;
                this.log("Searching with expression \"" + regexp + "\"");
                var totalMatches = 0,
                    fn = "wrapMatches";
                var eachCb = function eachCb(element) {
                    totalMatches++;
                    _this9.opt.each(element);
                };
                if (this.opt.acrossElements) {
                    fn = "wrapMatchesAcrossElements";
                }
                this[fn](regexp, this.opt.ignoreGroups, function (match, node) {
                    return _this9.opt.filter(node, match, totalMatches);
                }, eachCb, function () {
                    if (totalMatches === 0) {
                        _this9.opt.noMatch(regexp);
                    }
                    _this9.opt.done(totalMatches);
                });
            }
        }, {
            key: "mark",
            value: function mark(sv, opt) {
                var _this10 = this;

                this.opt = opt;
                var totalMatches = 0,
                    fn = "wrapMatches";

                var _getSeparatedKeywords = this.getSeparatedKeywords(typeof sv === "string" ? [sv] : sv),
                    kwArr = _getSeparatedKeywords.keywords,
                    kwArrLen = _getSeparatedKeywords.length,
                    sens = this.opt.caseSensitive ? "" : "i",
                    handler = function handler(kw) {
                    var regex = new RegExp(_this10.createRegExp(kw), "gm" + sens),
                        matches = 0;
                    _this10.log("Searching with expression \"" + regex + "\"");
                    _this10[fn](regex, 1, function (term, node) {
                        return _this10.opt.filter(node, kw, totalMatches, matches);
                    }, function (element) {
                        matches++;
                        totalMatches++;
                        _this10.opt.each(element);
                    }, function () {
                        if (matches === 0) {
                            _this10.opt.noMatch(kw);
                        }
                        if (kwArr[kwArrLen - 1] === kw) {
                            _this10.opt.done(totalMatches);
                        } else {
                            handler(kwArr[kwArr.indexOf(kw) + 1]);
                        }
                    });
                };

                if (this.opt.acrossElements) {
                    fn = "wrapMatchesAcrossElements";
                }
                if (kwArrLen === 0) {
                    this.opt.done(totalMatches);
                } else {
                    handler(kwArr[0]);
                }
            }
        }, {
            key: "markRanges",
            value: function markRanges(rawRanges, opt) {
                var _this11 = this;

                this.opt = opt;
                var totalMatches = 0,
                    ranges = this.checkRanges(rawRanges);
                if (ranges && ranges.length) {
                    this.log("Starting to mark with the following ranges: " + JSON.stringify(ranges));
                    this.wrapRangeFromIndex(ranges, function (node, range, match, counter) {
                        return _this11.opt.filter(node, range, match, counter);
                    }, function (element, range) {
                        totalMatches++;
                        _this11.opt.each(element, range);
                    }, function () {
                        _this11.opt.done(totalMatches);
                    });
                } else {
                    this.opt.done(totalMatches);
                }
            }
        }, {
            key: "unmark",
            value: function unmark(opt) {
                var _this12 = this;

                this.opt = opt;
                var sel = this.opt.element ? this.opt.element : "*";
                sel += "[data-markjs]";
                if (this.opt.className) {
                    sel += "." + this.opt.className;
                }
                this.log("Removal selector \"" + sel + "\"");
                this.iterator.forEachNode(NodeFilter.SHOW_ELEMENT, function (node) {
                    _this12.unwrapMatches(node);
                }, function (node) {
                    var matchesSel = DOMIterator.matches(node, sel),
                        matchesExclude = _this12.matchesExclude(node);
                    if (!matchesSel || matchesExclude) {
                        return NodeFilter.FILTER_REJECT;
                    } else {
                        return NodeFilter.FILTER_ACCEPT;
                    }
                }, this.opt.done);
            }
        }, {
            key: "opt",
            set: function set(val) {
                this._opt = _extends({}, {
                    "element": "",
                    "className": "",
                    "exclude": [],
                    "iframes": false,
                    "iframesTimeout": 5000,
                    "separateWordSearch": true,
                    "diacritics": true,
                    "synonyms": {},
                    "accuracy": "partially",
                    "acrossElements": false,
                    "caseSensitive": false,
                    "ignoreJoiners": false,
                    "ignoreGroups": 0,
                    "ignorePunctuation": [],
                    "wildcards": "disabled",
                    "each": function each() {},
                    "noMatch": function noMatch() {},
                    "filter": function filter() {
                        return true;
                    },
                    "done": function done() {},
                    "debug": false,
                    "log": window.console
                }, val);
            },
            get: function get() {
                return this._opt;
            }
        }, {
            key: "iterator",
            get: function get() {
                return new DOMIterator(this.ctx, this.opt.iframes, this.opt.exclude, this.opt.iframesTimeout);
            }
        }]);

        return Mark;
    }();

    var DOMIterator = function () {
        function DOMIterator(ctx) {
            var iframes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var exclude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var iframesTimeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5000;

            _classCallCheck(this, DOMIterator);

            this.ctx = ctx;

            this.iframes = iframes;

            this.exclude = exclude;

            this.iframesTimeout = iframesTimeout;
        }

        _createClass(DOMIterator, [{
            key: "getContexts",
            value: function getContexts() {
                var ctx = void 0,
                    filteredCtx = [];
                if (typeof this.ctx === "undefined" || !this.ctx) {
                    ctx = [];
                } else if (NodeList.prototype.isPrototypeOf(this.ctx)) {
                    ctx = Array.prototype.slice.call(this.ctx);
                } else if (Array.isArray(this.ctx)) {
                    ctx = this.ctx;
                } else if (typeof this.ctx === "string") {
                    ctx = Array.prototype.slice.call(document.querySelectorAll(this.ctx));
                } else {
                    ctx = [this.ctx];
                }

                ctx.forEach(function (ctx) {
                    var isDescendant = filteredCtx.filter(function (contexts) {
                        return contexts.contains(ctx);
                    }).length > 0;
                    if (filteredCtx.indexOf(ctx) === -1 && !isDescendant) {
                        filteredCtx.push(ctx);
                    }
                });
                return filteredCtx;
            }
        }, {
            key: "getIframeContents",
            value: function getIframeContents(ifr, successFn) {
                var errorFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

                var doc = void 0;
                try {
                    var ifrWin = ifr.contentWindow;
                    doc = ifrWin.document;
                    if (!ifrWin || !doc) {
                        throw new Error("iframe inaccessible");
                    }
                } catch (e) {
                    errorFn();
                }
                if (doc) {
                    successFn(doc);
                }
            }
        }, {
            key: "isIframeBlank",
            value: function isIframeBlank(ifr) {
                var bl = "about:blank",
                    src = ifr.getAttribute("src").trim(),
                    href = ifr.contentWindow.location.href;
                return href === bl && src !== bl && src;
            }
        }, {
            key: "observeIframeLoad",
            value: function observeIframeLoad(ifr, successFn, errorFn) {
                var _this13 = this;

                var called = false,
                    tout = null;
                var listener = function listener() {
                    if (called) {
                        return;
                    }
                    called = true;
                    clearTimeout(tout);
                    try {
                        if (!_this13.isIframeBlank(ifr)) {
                            ifr.removeEventListener("load", listener);
                            _this13.getIframeContents(ifr, successFn, errorFn);
                        }
                    } catch (e) {
                        errorFn();
                    }
                };
                ifr.addEventListener("load", listener);
                tout = setTimeout(listener, this.iframesTimeout);
            }
        }, {
            key: "onIframeReady",
            value: function onIframeReady(ifr, successFn, errorFn) {
                try {
                    if (ifr.contentWindow.document.readyState === "complete") {
                        if (this.isIframeBlank(ifr)) {
                            this.observeIframeLoad(ifr, successFn, errorFn);
                        } else {
                            this.getIframeContents(ifr, successFn, errorFn);
                        }
                    } else {
                        this.observeIframeLoad(ifr, successFn, errorFn);
                    }
                } catch (e) {
                    errorFn();
                }
            }
        }, {
            key: "waitForIframes",
            value: function waitForIframes(ctx, done) {
                var _this14 = this;

                var eachCalled = 0;
                this.forEachIframe(ctx, function () {
                    return true;
                }, function (ifr) {
                    eachCalled++;
                    _this14.waitForIframes(ifr.querySelector("html"), function () {
                        if (! --eachCalled) {
                            done();
                        }
                    });
                }, function (handled) {
                    if (!handled) {
                        done();
                    }
                });
            }
        }, {
            key: "forEachIframe",
            value: function forEachIframe(ctx, filter, each) {
                var _this15 = this;

                var end = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};

                var ifr = ctx.querySelectorAll("iframe"),
                    open = ifr.length,
                    handled = 0;
                ifr = Array.prototype.slice.call(ifr);
                var checkEnd = function checkEnd() {
                    if (--open <= 0) {
                        end(handled);
                    }
                };
                if (!open) {
                    checkEnd();
                }
                ifr.forEach(function (ifr) {
                    if (DOMIterator.matches(ifr, _this15.exclude)) {
                        checkEnd();
                    } else {
                        _this15.onIframeReady(ifr, function (con) {
                            if (filter(ifr)) {
                                handled++;
                                each(con);
                            }
                            checkEnd();
                        }, checkEnd);
                    }
                });
            }
        }, {
            key: "createIterator",
            value: function createIterator(ctx, whatToShow, filter) {
                return document.createNodeIterator(ctx, whatToShow, filter, false);
            }
        }, {
            key: "createInstanceOnIframe",
            value: function createInstanceOnIframe(contents) {
                return new DOMIterator(contents.querySelector("html"), this.iframes);
            }
        }, {
            key: "compareNodeIframe",
            value: function compareNodeIframe(node, prevNode, ifr) {
                var compCurr = node.compareDocumentPosition(ifr),
                    prev = Node.DOCUMENT_POSITION_PRECEDING;
                if (compCurr & prev) {
                    if (prevNode !== null) {
                        var compPrev = prevNode.compareDocumentPosition(ifr),
                            after = Node.DOCUMENT_POSITION_FOLLOWING;
                        if (compPrev & after) {
                            return true;
                        }
                    } else {
                        return true;
                    }
                }
                return false;
            }
        }, {
            key: "getIteratorNode",
            value: function getIteratorNode(itr) {
                var prevNode = itr.previousNode();
                var node = void 0;
                if (prevNode === null) {
                    node = itr.nextNode();
                } else {
                    node = itr.nextNode() && itr.nextNode();
                }
                return {
                    prevNode: prevNode,
                    node: node
                };
            }
        }, {
            key: "checkIframeFilter",
            value: function checkIframeFilter(node, prevNode, currIfr, ifr) {
                var key = false,
                    handled = false;
                ifr.forEach(function (ifrDict, i) {
                    if (ifrDict.val === currIfr) {
                        key = i;
                        handled = ifrDict.handled;
                    }
                });
                if (this.compareNodeIframe(node, prevNode, currIfr)) {
                    if (key === false && !handled) {
                        ifr.push({
                            val: currIfr,
                            handled: true
                        });
                    } else if (key !== false && !handled) {
                        ifr[key].handled = true;
                    }
                    return true;
                }
                if (key === false) {
                    ifr.push({
                        val: currIfr,
                        handled: false
                    });
                }
                return false;
            }
        }, {
            key: "handleOpenIframes",
            value: function handleOpenIframes(ifr, whatToShow, eCb, fCb) {
                var _this16 = this;

                ifr.forEach(function (ifrDict) {
                    if (!ifrDict.handled) {
                        _this16.getIframeContents(ifrDict.val, function (con) {
                            _this16.createInstanceOnIframe(con).forEachNode(whatToShow, eCb, fCb);
                        });
                    }
                });
            }
        }, {
            key: "iterateThroughNodes",
            value: function iterateThroughNodes(whatToShow, ctx, eachCb, filterCb, doneCb) {
                var _this17 = this;

                var itr = this.createIterator(ctx, whatToShow, filterCb);
                var ifr = [],
                    elements = [],
                    node = void 0,
                    prevNode = void 0,
                    retrieveNodes = function retrieveNodes() {
                    var _getIteratorNode = _this17.getIteratorNode(itr);

                    prevNode = _getIteratorNode.prevNode;
                    node = _getIteratorNode.node;

                    return node;
                };
                while (retrieveNodes()) {
                    if (this.iframes) {
                        this.forEachIframe(ctx, function (currIfr) {
                            return _this17.checkIframeFilter(node, prevNode, currIfr, ifr);
                        }, function (con) {
                            _this17.createInstanceOnIframe(con).forEachNode(whatToShow, function (ifrNode) {
                                return elements.push(ifrNode);
                            }, filterCb);
                        });
                    }

                    elements.push(node);
                }
                elements.forEach(function (node) {
                    eachCb(node);
                });
                if (this.iframes) {
                    this.handleOpenIframes(ifr, whatToShow, eachCb, filterCb);
                }
                doneCb();
            }
        }, {
            key: "forEachNode",
            value: function forEachNode(whatToShow, each, filter) {
                var _this18 = this;

                var done = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};

                var contexts = this.getContexts();
                var open = contexts.length;
                if (!open) {
                    done();
                }
                contexts.forEach(function (ctx) {
                    var ready = function ready() {
                        _this18.iterateThroughNodes(whatToShow, ctx, each, filter, function () {
                            if (--open <= 0) {
                                done();
                            }
                        });
                    };

                    if (_this18.iframes) {
                        _this18.waitForIframes(ctx, ready);
                    } else {
                        ready();
                    }
                });
            }
        }], [{
            key: "matches",
            value: function matches(element, selector) {
                var selectors = typeof selector === "string" ? [selector] : selector,
                    fn = element.matches || element.matchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector;
                if (fn) {
                    var match = false;
                    selectors.every(function (sel) {
                        if (fn.call(element, sel)) {
                            match = true;
                            return false;
                        }
                        return true;
                    });
                    return match;
                } else {
                    return false;
                }
            }
        }]);

        return DOMIterator;
    }();

    window.Mark = function (ctx) {
        var _this19 = this;

        var instance = new Mark(ctx);
        this.mark = function (sv, opt) {
            instance.mark(sv, opt);
            return _this19;
        };
        this.markRegExp = function (sv, opt) {
            instance.markRegExp(sv, opt);
            return _this19;
        };
        this.markRanges = function (sv, opt) {
            instance.markRanges(sv, opt);
            return _this19;
        };
        this.unmark = function (opt) {
            instance.unmark(opt);
            return _this19;
        };
        return this;
    };

    return window.Mark;
}, window, document);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function ($) {
  "use strict";

  var defaultOptions = {
    tagClass: function tagClass(item) {
      return 'label label-info';
    },
    itemValue: function itemValue(item) {
      return item ? item.toString() : item;
    },
    itemText: function itemText(item) {
      return this.itemValue(item);
    },
    itemTitle: function itemTitle(item) {
      return null;
    },
    freeInput: true,
    addOnBlur: true,
    maxTags: undefined,
    maxChars: undefined,
    confirmKeys: [13, 44],
    delimiter: ',',
    delimiterRegex: null,
    cancelConfirmKeysOnEmpty: true,
    onTagExists: function onTagExists(item, $tag) {
      $tag.hide().fadeIn();
    },
    trimValue: false,
    allowDuplicates: false
  };

  function TagsInput(element, options) {
    this.itemsArray = [];

    this.$element = $(element);
    this.$element.hide();

    this.isSelect = element.tagName === 'SELECT';
    this.multiple = this.isSelect && element.hasAttribute('multiple');
    this.objectItems = options && options.itemValue;
    this.placeholderText = element.hasAttribute('placeholder') ? this.$element.attr('placeholder') : '';
    this.inputSize = Math.max(1, this.placeholderText.length);

    this.$container = $('<div class="bootstrap-tagsinput"></div>');
    this.$input = $('<input type="text" placeholder="' + this.placeholderText + '"/>').appendTo(this.$container);

    this.$element.before(this.$container);

    this.build(options);
  }

  TagsInput.prototype = {
    constructor: TagsInput,

    add: function add(item, dontPushVal, options) {
      var self = this;

      if (self.options.maxTags && self.itemsArray.length >= self.options.maxTags) return;

      if (item !== false && !item) return;

      if (typeof item === "string" && self.options.trimValue) {
        item = $.trim(item);
      }

      if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === "object" && !self.objectItems) throw "Can't add objects when itemValue option is not set";

      if (item.toString().match(/^\s*$/)) return;

      if (self.isSelect && !self.multiple && self.itemsArray.length > 0) self.remove(self.itemsArray[0]);

      if (typeof item === "string" && this.$element[0].tagName === 'INPUT') {
        var delimiter = self.options.delimiterRegex ? self.options.delimiterRegex : self.options.delimiter;
        var items = item.split(delimiter);
        if (items.length > 1) {
          for (var i = 0; i < items.length; i++) {
            this.add(items[i], true);
          }

          if (!dontPushVal) self.pushVal();
          return;
        }
      }

      var itemValue = self.options.itemValue(item),
          itemText = self.options.itemText(item),
          tagClass = self.options.tagClass(item),
          itemTitle = self.options.itemTitle(item);

      var existing = $.grep(self.itemsArray, function (item) {
        return self.options.itemValue(item) === itemValue;
      })[0];
      if (existing && !self.options.allowDuplicates) {
        if (self.options.onTagExists) {
          var $existingTag = $(".tag", self.$container).filter(function () {
            return $(this).data("item") === existing;
          });
          self.options.onTagExists(item, $existingTag);
        }
        return;
      }

      if (self.items().toString().length + item.length + 1 > self.options.maxInputLength) return;

      var beforeItemAddEvent = $.Event('beforeItemAdd', { item: item, cancel: false, options: options });
      self.$element.trigger(beforeItemAddEvent);
      if (beforeItemAddEvent.cancel) return;

      self.itemsArray.push(item);


      var $tag = $('<span class="tag ' + htmlEncode(tagClass) + (itemTitle !== null ? '" title="' + itemTitle : '') + '">' + htmlEncode(itemText) + '<span data-role="remove"></span></span>');
      $tag.data('item', item);
      self.findInputWrapper().before($tag);
      $tag.after(' ');

      if (self.isSelect && !$('option[value="' + encodeURIComponent(itemValue) + '"]', self.$element)[0]) {
        var $option = $('<option selected>' + htmlEncode(itemText) + '</option>');
        $option.data('item', item);
        $option.attr('value', itemValue);
        self.$element.append($option);
      }

      if (!dontPushVal) self.pushVal();

      if (self.options.maxTags === self.itemsArray.length || self.items().toString().length === self.options.maxInputLength) self.$container.addClass('bootstrap-tagsinput-max');

      self.$element.trigger($.Event('itemAdded', { item: item, options: options }));
    },

    remove: function remove(item, dontPushVal, options) {
      var self = this;

      if (self.objectItems) {
        if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === "object") item = $.grep(self.itemsArray, function (other) {
          return self.options.itemValue(other) == self.options.itemValue(item);
        });else item = $.grep(self.itemsArray, function (other) {
          return self.options.itemValue(other) == item;
        });

        item = item[item.length - 1];
      }

      if (item) {
        var beforeItemRemoveEvent = $.Event('beforeItemRemove', { item: item, cancel: false, options: options });
        self.$element.trigger(beforeItemRemoveEvent);
        if (beforeItemRemoveEvent.cancel) return;

        $('.tag', self.$container).filter(function () {
          return $(this).data('item') === item;
        }).remove();
        $('option', self.$element).filter(function () {
          return $(this).data('item') === item;
        }).remove();
        if ($.inArray(item, self.itemsArray) !== -1) self.itemsArray.splice($.inArray(item, self.itemsArray), 1);
      }

      if (!dontPushVal) self.pushVal();

      if (self.options.maxTags > self.itemsArray.length) self.$container.removeClass('bootstrap-tagsinput-max');

      self.$element.trigger($.Event('itemRemoved', { item: item, options: options }));
    },

    removeAll: function removeAll() {
      var self = this;

      $('.tag', self.$container).remove();
      $('option', self.$element).remove();

      while (self.itemsArray.length > 0) {
        self.itemsArray.pop();
      }self.pushVal();
    },

    refresh: function refresh() {
      var self = this;
      $('.tag', self.$container).each(function () {
        var $tag = $(this),
            item = $tag.data('item'),
            itemValue = self.options.itemValue(item),
            itemText = self.options.itemText(item),
            tagClass = self.options.tagClass(item);

        $tag.attr('class', null);
        $tag.addClass('tag ' + htmlEncode(tagClass));
        $tag.contents().filter(function () {
          return this.nodeType == 3;
        })[0].nodeValue = htmlEncode(itemText);

        if (self.isSelect) {
          var option = $('option', self.$element).filter(function () {
            return $(this).data('item') === item;
          });
          option.attr('value', itemValue);
        }
      });
    },

    items: function items() {
      return this.itemsArray;
    },

    pushVal: function pushVal() {
      var self = this,
          val = $.map(self.items(), function (item) {
        return self.options.itemValue(item).toString();
      });

      self.$element.val(val, true).trigger('change');
    },

    build: function build(options) {
      var self = this;

      self.options = $.extend({}, defaultOptions, options);
      if (self.objectItems) self.options.freeInput = false;

      makeOptionItemFunction(self.options, 'itemValue');
      makeOptionItemFunction(self.options, 'itemText');
      makeOptionFunction(self.options, 'tagClass');

      if (self.options.typeahead) {
        var typeahead = self.options.typeahead || {};

        makeOptionFunction(typeahead, 'source');

        self.$input.typeahead($.extend({}, typeahead, {
          source: function source(query, process) {
            function processItems(items) {
              var texts = [];

              for (var i = 0; i < items.length; i++) {
                var text = self.options.itemText(items[i]);
                map[text] = items[i];
                texts.push(text);
              }
              process(texts);
            }

            this.map = {};
            var map = this.map,
                data = typeahead.source(query);

            if ($.isFunction(data.success)) {
              data.success(processItems);
            } else if ($.isFunction(data.then)) {
              data.then(processItems);
            } else {
              $.when(data).then(processItems);
            }
          },
          updater: function updater(text) {
            self.add(this.map[text]);
            return this.map[text];
          },
          matcher: function matcher(text) {
            return text.toLowerCase().indexOf(this.query.trim().toLowerCase()) !== -1;
          },
          sorter: function sorter(texts) {
            return texts.sort();
          },
          highlighter: function highlighter(text) {
            var regex = new RegExp('(' + this.query + ')', 'gi');
            return text.replace(regex, "<strong>$1</strong>");
          }
        }));
      }

      if (self.options.typeaheadjs) {
        var typeaheadConfig = null;
        var typeaheadDatasets = {};

        var typeaheadjs = self.options.typeaheadjs;
        if ($.isArray(typeaheadjs)) {
          typeaheadConfig = typeaheadjs[0];
          typeaheadDatasets = typeaheadjs[1];
        } else {
          typeaheadDatasets = typeaheadjs;
        }

        self.$input.typeahead(typeaheadConfig, typeaheadDatasets).on('typeahead:selected', $.proxy(function (obj, datum) {
          if (typeaheadDatasets.valueKey) self.add(datum[typeaheadDatasets.valueKey]);else self.add(datum);
          self.$input.typeahead('val', '');
        }, self));
      }

      self.$container.on('click', $.proxy(function (event) {
        if (!self.$element.attr('disabled')) {
          self.$input.removeAttr('disabled');
        }
        self.$input.focus();
      }, self));

      if (self.options.addOnBlur && self.options.freeInput) {
        self.$input.on('focusout', $.proxy(function (event) {
          if ($('.typeahead, .twitter-typeahead', self.$container).length === 0) {
            self.add(self.$input.val());
            self.$input.val('');
          }
        }, self));
      }

      self.$container.on('keydown', 'input', $.proxy(function (event) {
        var $input = $(event.target),
            $inputWrapper = self.findInputWrapper();

        if (self.$element.attr('disabled')) {
          self.$input.attr('disabled', 'disabled');
          return;
        }

        switch (event.which) {
          case 8:
            if (doGetCaretPosition($input[0]) === 0) {
              var prev = $inputWrapper.prev();
              if (prev.length) {
                self.remove(prev.data('item'));
              }
            }
            break;

          case 46:
            if (doGetCaretPosition($input[0]) === 0) {
              var next = $inputWrapper.next();
              if (next.length) {
                self.remove(next.data('item'));
              }
            }
            break;

          case 37:
            var $prevTag = $inputWrapper.prev();
            if ($input.val().length === 0 && $prevTag[0]) {
              $prevTag.before($inputWrapper);
              $input.focus();
            }
            break;
          case 39:
            var $nextTag = $inputWrapper.next();
            if ($input.val().length === 0 && $nextTag[0]) {
              $nextTag.after($inputWrapper);
              $input.focus();
            }
            break;
          default:
        }

        var textLength = $input.val().length,
            wordSpace = Math.ceil(textLength / 5),
            size = textLength + wordSpace + 1;
        $input.attr('size', Math.max(this.inputSize, $input.val().length));
      }, self));

      self.$container.on('keypress', 'input', $.proxy(function (event) {
        var $input = $(event.target);

        if (self.$element.attr('disabled')) {
          self.$input.attr('disabled', 'disabled');
          return;
        }

        var text = $input.val(),
            maxLengthReached = self.options.maxChars && text.length >= self.options.maxChars;
        if (self.options.freeInput && (keyCombinationInList(event, self.options.confirmKeys) || maxLengthReached)) {
          if (text.length !== 0) {
            self.add(maxLengthReached ? text.substr(0, self.options.maxChars) : text);
            $input.val('');
          }

          if (self.options.cancelConfirmKeysOnEmpty === false) {
            event.preventDefault();
          }
        }

        var textLength = $input.val().length,
            wordSpace = Math.ceil(textLength / 5),
            size = textLength + wordSpace + 1;
        $input.attr('size', Math.max(this.inputSize, $input.val().length));
      }, self));

      self.$container.on('click', '[data-role=remove]', $.proxy(function (event) {
        if (self.$element.attr('disabled')) {
          return;
        }
        self.remove($(event.target).closest('.tag').data('item'));
      }, self));

      if (self.options.itemValue === defaultOptions.itemValue) {
        if (self.$element[0].tagName === 'INPUT') {
          self.add(self.$element.val());
        } else {
          $('option', self.$element).each(function () {
            self.add($(this).attr('value'), true);
          });
        }
      }
    },

    destroy: function destroy() {
      var self = this;

      self.$container.off('keypress', 'input');
      self.$container.off('click', '[role=remove]');

      self.$container.remove();
      self.$element.removeData('tagsinput');
      self.$element.show();
    },

    focus: function focus() {
      this.$input.focus();
    },

    input: function input() {
      return this.$input;
    },

    findInputWrapper: function findInputWrapper() {
      var elt = this.$input[0],
          container = this.$container[0];
      while (elt && elt.parentNode !== container) {
        elt = elt.parentNode;
      }return $(elt);
    }
  };

  $.fn.tagsinput = function (arg1, arg2, arg3) {
    var results = [];

    this.each(function () {
      var tagsinput = $(this).data('tagsinput');
      if (!tagsinput) {
        tagsinput = new TagsInput(this, arg1);
        $(this).data('tagsinput', tagsinput);
        results.push(tagsinput);

        if (this.tagName === 'SELECT') {
          $('option', $(this)).attr('selected', 'selected');
        }

        $(this).val($(this).val());
      } else if (!arg1 && !arg2) {
        results.push(tagsinput);
      } else if (tagsinput[arg1] !== undefined) {
        if (tagsinput[arg1].length === 3 && arg3 !== undefined) {
          var retVal = tagsinput[arg1](arg2, null, arg3);
        } else {
          var retVal = tagsinput[arg1](arg2);
        }
        if (retVal !== undefined) results.push(retVal);
      }
    });

    if (typeof arg1 == 'string') {
      return results.length > 1 ? results : results[0];
    } else {
      return results;
    }
  };

  $.fn.tagsinput.Constructor = TagsInput;

  function makeOptionItemFunction(options, key) {
    if (typeof options[key] !== 'function') {
      var propertyName = options[key];
      options[key] = function (item) {
        return item[propertyName];
      };
    }
  }
  function makeOptionFunction(options, key) {
    if (typeof options[key] !== 'function') {
      var value = options[key];
      options[key] = function () {
        return value;
      };
    }
  }
  var htmlEncodeContainer = $('<div />');
  function htmlEncode(value) {
    if (value) {
      return htmlEncodeContainer.text(value).html();
    } else {
      return '';
    }
  }

  function doGetCaretPosition(oField) {
    var iCaretPos = 0;
    if (document.selection) {
      oField.focus();
      var oSel = document.selection.createRange();
      oSel.moveStart('character', -oField.value.length);
      iCaretPos = oSel.text.length;
    } else if (oField.selectionStart || oField.selectionStart == '0') {
      iCaretPos = oField.selectionStart;
    }
    return iCaretPos;
  }

  function keyCombinationInList(keyPressEvent, lookupList) {
    var found = false;
    $.each(lookupList, function (index, keyCombination) {
      if (typeof keyCombination === 'number' && keyPressEvent.which === keyCombination) {
        found = true;
        return false;
      }

      if (keyPressEvent.which === keyCombination.which) {
        var alt = !keyCombination.hasOwnProperty('altKey') || keyPressEvent.altKey === keyCombination.altKey,
            shift = !keyCombination.hasOwnProperty('shiftKey') || keyPressEvent.shiftKey === keyCombination.shiftKey,
            ctrl = !keyCombination.hasOwnProperty('ctrlKey') || keyPressEvent.ctrlKey === keyCombination.ctrlKey;
        if (alt && shift && ctrl) {
          found = true;
          return false;
        }
      }
    });

    return found;
  }

  $(function () {
    $("input[data-role=tagsinput], select[multiple][data-role=tagsinput]").tagsinput();
  });
})(window.jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };


if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery');
}

+function ($) {
  'use strict';

  var version = $.fn.jquery.split(' ')[0].split('.');
  if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1 || version[0] > 3) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4');
  }
}(jQuery);


+function ($) {
  'use strict';


  function transitionEnd() {
    var el = document.createElement('bootstrap');

    var transEndEventNames = {
      WebkitTransition: 'webkitTransitionEnd',
      MozTransition: 'transitionend',
      OTransition: 'oTransitionEnd otransitionend',
      transition: 'transitionend'
    };

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] };
      }
    }

    return false; 
  }

  $.fn.emulateTransitionEnd = function (duration) {
    var called = false;
    var $el = this;
    $(this).one('bsTransitionEnd', function () {
      called = true;
    });
    var callback = function callback() {
      if (!called) $($el).trigger($.support.transition.end);
    };
    setTimeout(callback, duration);
    return this;
  };

  $(function () {
    $.support.transition = transitionEnd();

    if (!$.support.transition) return;

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function handle(e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
      }
    };
  });
}(jQuery);


+function ($) {
  'use strict';


  var dismiss = '[data-dismiss="alert"]';
  var Alert = function Alert(el) {
    $(el).on('click', dismiss, this.close);
  };

  Alert.VERSION = '3.3.7';

  Alert.TRANSITION_DURATION = 150;

  Alert.prototype.close = function (e) {
    var $this = $(this);
    var selector = $this.attr('data-target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); 
    }

    var $parent = $(selector === '#' ? [] : selector);

    if (e) e.preventDefault();

    if (!$parent.length) {
      $parent = $this.closest('.alert');
    }

    $parent.trigger(e = $.Event('close.bs.alert'));

    if (e.isDefaultPrevented()) return;

    $parent.removeClass('in');

    function removeElement() {
      $parent.detach().trigger('closed.bs.alert').remove();
    }

    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
  };


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.alert');

      if (!data) $this.data('bs.alert', data = new Alert(this));
      if (typeof option == 'string') data[option].call($this);
    });
  }

  var old = $.fn.alert;

  $.fn.alert = Plugin;
  $.fn.alert.Constructor = Alert;


  $.fn.alert.noConflict = function () {
    $.fn.alert = old;
    return this;
  };


  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
}(jQuery);


+function ($) {
  'use strict';


  var Button = function Button(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Button.DEFAULTS, options);
    this.isLoading = false;
  };

  Button.VERSION = '3.3.7';

  Button.DEFAULTS = {
    loadingText: 'loading...'
  };

  Button.prototype.setState = function (state) {
    var d = 'disabled';
    var $el = this.$element;
    var val = $el.is('input') ? 'val' : 'html';
    var data = $el.data();

    state += 'Text';

    if (data.resetText == null) $el.data('resetText', $el[val]());

    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state]);

      if (state == 'loadingText') {
        this.isLoading = true;
        $el.addClass(d).attr(d, d).prop(d, true);
      } else if (this.isLoading) {
        this.isLoading = false;
        $el.removeClass(d).removeAttr(d).prop(d, false);
      }
    }, this), 0);
  };

  Button.prototype.toggle = function () {
    var changed = true;
    var $parent = this.$element.closest('[data-toggle="buttons"]');

    if ($parent.length) {
      var $input = this.$element.find('input');
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false;
        $parent.find('.active').removeClass('active');
        this.$element.addClass('active');
      } else if ($input.prop('type') == 'checkbox') {
        if ($input.prop('checked') !== this.$element.hasClass('active')) changed = false;
        this.$element.toggleClass('active');
      }
      $input.prop('checked', this.$element.hasClass('active'));
      if (changed) $input.trigger('change');
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));
      this.$element.toggleClass('active');
    }
  };


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.button');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.button', data = new Button(this, options));

      if (option == 'toggle') data.toggle();else if (option) data.setState(option);
    });
  }

  var old = $.fn.button;

  $.fn.button = Plugin;
  $.fn.button.Constructor = Button;


  $.fn.button.noConflict = function () {
    $.fn.button = old;
    return this;
  };


  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    var $btn = $(e.target).closest('.btn');
    Plugin.call($btn, 'toggle');
    if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
      e.preventDefault();
      if ($btn.is('input,button')) $btn.trigger('focus');else $btn.find('input:visible,button:visible').first().trigger('focus');
    }
  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
  });
}(jQuery);


+function ($) {
  'use strict';


  var Carousel = function Carousel(element, options) {
    this.$element = $(element);
    this.$indicators = this.$element.find('.carousel-indicators');
    this.options = options;
    this.paused = null;
    this.sliding = null;
    this.interval = null;
    this.$active = null;
    this.$items = null;

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
  };

  Carousel.VERSION = '3.3.7';

  Carousel.TRANSITION_DURATION = 600;

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  };

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return;
    switch (e.which) {
      case 37:
        this.prev();break;
      case 39:
        this.next();break;
      default:
        return;
    }

    e.preventDefault();
  };

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false);

    this.interval && clearInterval(this.interval);

    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));

    return this;
  };

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item');
    return this.$items.index(item || this.$active);
  };

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active);
    var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;
    if (willWrap && !this.options.wrap) return active;
    var delta = direction == 'prev' ? -1 : 1;
    var itemIndex = (activeIndex + delta) % this.$items.length;
    return this.$items.eq(itemIndex);
  };

  Carousel.prototype.to = function (pos) {
    var that = this;
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));

    if (pos > this.$items.length - 1 || pos < 0) return;

    if (this.sliding) return this.$element.one('slid.bs.carousel', function () {
      that.to(pos);
    }); 
    if (activeIndex == pos) return this.pause().cycle();

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
  };

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true);

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end);
      this.cycle(true);
    }

    this.interval = clearInterval(this.interval);

    return this;
  };

  Carousel.prototype.next = function () {
    if (this.sliding) return;
    return this.slide('next');
  };

  Carousel.prototype.prev = function () {
    if (this.sliding) return;
    return this.slide('prev');
  };

  Carousel.prototype.slide = function (type, next) {
    var $active = this.$element.find('.item.active');
    var $next = next || this.getItemForDirection(type, $active);
    var isCycling = this.interval;
    var direction = type == 'next' ? 'left' : 'right';
    var that = this;

    if ($next.hasClass('active')) return this.sliding = false;

    var relatedTarget = $next[0];
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    });
    this.$element.trigger(slideEvent);
    if (slideEvent.isDefaultPrevented()) return;

    this.sliding = true;

    isCycling && this.pause();

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active');
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
      $nextIndicator && $nextIndicator.addClass('active');
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }); 
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type);
      $next[0].offsetWidth; 
      $active.addClass(direction);
      $next.addClass(direction);
      $active.one('bsTransitionEnd', function () {
        $next.removeClass([type, direction].join(' ')).addClass('active');
        $active.removeClass(['active', direction].join(' '));
        that.sliding = false;
        setTimeout(function () {
          that.$element.trigger(slidEvent);
        }, 0);
      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
    } else {
      $active.removeClass('active');
      $next.addClass('active');
      this.sliding = false;
      this.$element.trigger(slidEvent);
    }

    isCycling && this.cycle();

    return this;
  };


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.carousel');
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);
      var action = typeof option == 'string' ? option : options.slide;

      if (!data) $this.data('bs.carousel', data = new Carousel(this, options));
      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();
    });
  }

  var old = $.fn.carousel;

  $.fn.carousel = Plugin;
  $.fn.carousel.Constructor = Carousel;


  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old;
    return this;
  };


  var clickHandler = function clickHandler(e) {
    var href;
    var $this = $(this);
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')); 
    if (!$target.hasClass('carousel')) return;
    var options = $.extend({}, $target.data(), $this.data());
    var slideIndex = $this.attr('data-slide-to');
    if (slideIndex) options.interval = false;

    Plugin.call($target, options);

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex);
    }

    e.preventDefault();
  };

  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this);
      Plugin.call($carousel, $carousel.data());
    });
  });
}(jQuery);



+function ($) {
  'use strict';


  var Collapse = function Collapse(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' + '[data-toggle="collapse"][data-target="#' + element.id + '"]');
    this.transitioning = null;

    if (this.options.parent) {
      this.$parent = this.getParent();
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger);
    }

    if (this.options.toggle) this.toggle();
  };

  Collapse.VERSION = '3.3.7';

  Collapse.TRANSITION_DURATION = 350;

  Collapse.DEFAULTS = {
    toggle: true
  };

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width');
    return hasWidth ? 'width' : 'height';
  };

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return;

    var activesData;
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse');
      if (activesData && activesData.transitioning) return;
    }

    var startEvent = $.Event('show.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    if (actives && actives.length) {
      Plugin.call(actives, 'hide');
      activesData || actives.data('bs.collapse', null);
    }

    var dimension = this.dimension();

    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);

    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);

    this.transitioning = 1;

    var complete = function complete() {
      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
      this.transitioning = 0;
      this.$element.trigger('shown.bs.collapse');
    };

    if (!$.support.transition) return complete.call(this);

    var scrollSize = $.camelCase(['scroll', dimension].join('-'));

    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
  };

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return;

    var startEvent = $.Event('hide.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    var dimension = this.dimension();

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;

    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);

    this.$trigger.addClass('collapsed').attr('aria-expanded', false);

    this.transitioning = 1;

    var complete = function complete() {
      this.transitioning = 0;
      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');
    };

    if (!$.support.transition) return complete.call(this);

    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
  };

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']();
  };

  Collapse.prototype.getParent = function () {
    return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
      var $element = $(element);
      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
    }, this)).end();
  };

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in');

    $element.attr('aria-expanded', isOpen);
    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);
  };

  function getTargetFromTrigger($trigger) {
    var href;
    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''); 

    return $(target);
  }


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.collapse');
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;
      if (!data) $this.data('bs.collapse', data = new Collapse(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.collapse;

  $.fn.collapse = Plugin;
  $.fn.collapse.Constructor = Collapse;


  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old;
    return this;
  };


  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this = $(this);

    if (!$this.attr('data-target')) e.preventDefault();

    var $target = getTargetFromTrigger($this);
    var data = $target.data('bs.collapse');
    var option = data ? 'toggle' : $this.data();

    Plugin.call($target, option);
  });
}(jQuery);


+function ($) {
  'use strict';


  var backdrop = '.dropdown-backdrop';
  var toggle = '[data-toggle="dropdown"]';
  var Dropdown = function Dropdown(element) {
    $(element).on('click.bs.dropdown', this.toggle);
  };

  Dropdown.VERSION = '3.3.7';

  function getParent($this) {
    var selector = $this.attr('data-target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); 
    }

    var $parent = selector && $(selector);

    return $parent && $parent.length ? $parent : $this.parent();
  }

  function clearMenus(e) {
    if (e && e.which === 3) return;
    $(backdrop).remove();
    $(toggle).each(function () {
      var $this = $(this);
      var $parent = getParent($this);
      var relatedTarget = { relatedTarget: this };

      if (!$parent.hasClass('open')) return;

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));

      if (e.isDefaultPrevented()) return;

      $this.attr('aria-expanded', 'false');
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget));
    });
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this);

    if ($this.is('.disabled, :disabled')) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');

    clearMenus();

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);
      }

      var relatedTarget = { relatedTarget: this };
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));

      if (e.isDefaultPrevented()) return;

      $this.trigger('focus').attr('aria-expanded', 'true');

      $parent.toggleClass('open').trigger($.Event('shown.bs.dropdown', relatedTarget));
    }

    return false;
  };

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;

    var $this = $(this);

    e.preventDefault();
    e.stopPropagation();

    if ($this.is('.disabled, :disabled')) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus');
      return $this.trigger('click');
    }

    var desc = ' li:not(.disabled):visible a';
    var $items = $parent.find('.dropdown-menu' + desc);

    if (!$items.length) return;

    var index = $items.index(e.target);

    if (e.which == 38 && index > 0) index--; 
    if (e.which == 40 && index < $items.length - 1) index++; 
    if (!~index) index = 0;

    $items.eq(index).trigger('focus');
  };


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.dropdown');

      if (!data) $this.data('bs.dropdown', data = new Dropdown(this));
      if (typeof option == 'string') data[option].call($this);
    });
  }

  var old = $.fn.dropdown;

  $.fn.dropdown = Plugin;
  $.fn.dropdown.Constructor = Dropdown;


  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old;
    return this;
  };


  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
    e.stopPropagation();
  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);
}(jQuery);


+function ($) {
  'use strict';


  var Modal = function Modal(element, options) {
    this.options = options;
    this.$body = $(document.body);
    this.$element = $(element);
    this.$dialog = this.$element.find('.modal-dialog');
    this.$backdrop = null;
    this.isShown = null;
    this.originalBodyPad = null;
    this.scrollbarWidth = 0;
    this.ignoreBackdropClick = false;

    if (this.options.remote) {
      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
        this.$element.trigger('loaded.bs.modal');
      }, this));
    }
  };

  Modal.VERSION = '3.3.7';

  Modal.TRANSITION_DURATION = 300;
  Modal.BACKDROP_TRANSITION_DURATION = 150;

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  };

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget);
  };

  Modal.prototype.show = function (_relatedTarget) {
    var that = this;
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });

    this.$element.trigger(e);

    if (this.isShown || e.isDefaultPrevented()) return;

    this.isShown = true;

    this.checkScrollbar();
    this.setScrollbar();
    this.$body.addClass('modal-open');

    this.escape();
    this.resize();

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;
      });
    });

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade');

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body); 
      }

      that.$element.show().scrollTop(0);

      that.adjustDialog();

      if (transition) {
        that.$element[0].offsetWidth; 
      }

      that.$element.addClass('in');

      that.enforceFocus();

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });

      transition ? that.$dialog 
      .one('bsTransitionEnd', function () {
        that.$element.trigger('focus').trigger(e);
      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
    });
  };

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault();

    e = $.Event('hide.bs.modal');

    this.$element.trigger(e);

    if (!this.isShown || e.isDefaultPrevented()) return;

    this.isShown = false;

    this.escape();
    this.resize();

    $(document).off('focusin.bs.modal');

    this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');

    this.$dialog.off('mousedown.dismiss.bs.modal');

    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
  };

  Modal.prototype.enforceFocus = function () {
    $(document).off('focusin.bs.modal') 
    .on('focusin.bs.modal', $.proxy(function (e) {
      if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {
        this.$element.trigger('focus');
      }
    }, this));
  };

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide();
      }, this));
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal');
    }
  };

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
    } else {
      $(window).off('resize.bs.modal');
    }
  };

  Modal.prototype.hideModal = function () {
    var that = this;
    this.$element.hide();
    this.backdrop(function () {
      that.$body.removeClass('modal-open');
      that.resetAdjustments();
      that.resetScrollbar();
      that.$element.trigger('hidden.bs.modal');
    });
  };

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove();
    this.$backdrop = null;
  };

  Modal.prototype.backdrop = function (callback) {
    var that = this;
    var animate = this.$element.hasClass('fade') ? 'fade' : '';

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;

      this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false;
          return;
        }
        if (e.target !== e.currentTarget) return;
        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();
      }, this));

      if (doAnimate) this.$backdrop[0].offsetWidth; 

      this.$backdrop.addClass('in');

      if (!callback) return;

      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in');

      var callbackRemove = function callbackRemove() {
        that.removeBackdrop();
        callback && callback();
      };
      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
    } else if (callback) {
      callback();
    }
  };


  Modal.prototype.handleUpdate = function () {
    this.adjustDialog();
  };

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;

    this.$element.css({
      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    });
  };

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    });
  };

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth;
    if (!fullWindowWidth) {
      var documentElementRect = document.documentElement.getBoundingClientRect();
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
    this.scrollbarWidth = this.measureScrollbar();
  };

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
    this.originalBodyPad = document.body.style.paddingRight || '';
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
  };

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad);
  };

  Modal.prototype.measureScrollbar = function () {
    var scrollDiv = document.createElement('div');
    scrollDiv.className = 'modal-scrollbar-measure';
    this.$body.append(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    this.$body[0].removeChild(scrollDiv);
    return scrollbarWidth;
  };


  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.modal');
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

      if (!data) $this.data('bs.modal', data = new Modal(this, options));
      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);
    });
  }

  var old = $.fn.modal;

  $.fn.modal = Plugin;
  $.fn.modal.Constructor = Modal;


  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };


  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, '')); 
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());

    if ($this.is('a')) e.preventDefault();

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return; 
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus');
      });
    });
    Plugin.call($target, option, this);
  });
}(jQuery);


+function ($) {
  'use strict';


  var Tooltip = function Tooltip(element, options) {
    this.type = null;
    this.options = null;
    this.enabled = null;
    this.timeout = null;
    this.hoverState = null;
    this.$element = null;
    this.inState = null;

    this.init('tooltip', element, options);
  };

  Tooltip.VERSION = '3.3.7';

  Tooltip.TRANSITION_DURATION = 150;

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  };

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled = true;
    this.type = type;
    this.$element = $(element);
    this.options = this.getOptions(options);
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
    this.inState = { click: false, hover: false, focus: false };

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');
    }

    var triggers = this.options.trigger.split(' ');

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i];

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
      } else if (trigger != 'manual') {
        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';

        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
      }
    }

    this.options.selector ? this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' }) : this.fixTitle();
  };

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS;
  };

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options);

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      };
    }

    return options;
  };

  Tooltip.prototype.getDelegateOptions = function () {
    var options = {};
    var defaults = this.getDefaults();

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value;
    });

    return options;
  };

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in';
      return;
    }

    clearTimeout(self.timeout);

    self.hoverState = 'in';

    if (!self.options.delay || !self.options.delay.show) return self.show();

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show();
    }, self.options.delay.show);
  };

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true;
    }

    return false;
  };

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;
    }

    if (self.isInStateTrue()) return;

    clearTimeout(self.timeout);

    self.hoverState = 'out';

    if (!self.options.delay || !self.options.delay.hide) return self.hide();

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide();
    }, self.options.delay.hide);
  };

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type);

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e);

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
      if (e.isDefaultPrevented() || !inDom) return;
      var that = this;

      var $tip = this.tip();

      var tipId = this.getUID(this.type);

      this.setContent();
      $tip.attr('id', tipId);
      this.$element.attr('aria-describedby', tipId);

      if (this.options.animation) $tip.addClass('fade');

      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;

      var autoToken = /\s?auto?\s?/i;
      var autoPlace = autoToken.test(placement);
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top';

      $tip.detach().css({ top: 0, left: 0, display: 'block' }).addClass(placement).data('bs.' + this.type, this);

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
      this.$element.trigger('inserted.bs.' + this.type);

      var pos = this.getPosition();
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;

      if (autoPlace) {
        var orgPlacement = placement;
        var viewportDim = this.getPosition(this.$viewport);

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;

        $tip.removeClass(orgPlacement).addClass(placement);
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);

      this.applyPlacement(calculatedOffset, placement);

      var complete = function complete() {
        var prevHoverState = that.hoverState;
        that.$element.trigger('shown.bs.' + that.type);
        that.hoverState = null;

        if (prevHoverState == 'out') that.leave(that);
      };

      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
    }
  };

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip = this.tip();
    var width = $tip[0].offsetWidth;
    var height = $tip[0].offsetHeight;

    var marginTop = parseInt($tip.css('margin-top'), 10);
    var marginLeft = parseInt($tip.css('margin-left'), 10);

    if (isNaN(marginTop)) marginTop = 0;
    if (isNaN(marginLeft)) marginLeft = 0;

    offset.top += marginTop;
    offset.left += marginLeft;

    $.offset.setOffset($tip[0], $.extend({
      using: function using(props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        });
      }
    }, offset), 0);

    $tip.addClass('in');

    var actualWidth = $tip[0].offsetWidth;
    var actualHeight = $tip[0].offsetHeight;

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight;
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);

    if (delta.left) offset.left += delta.left;else offset.top += delta.top;

    var isVertical = /top|bottom/.test(placement);
    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';

    $tip.offset(offset);
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
  };

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');
  };

  Tooltip.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
    $tip.removeClass('fade in top bottom left right');
  };

  Tooltip.prototype.hide = function (callback) {
    var that = this;
    var $tip = $(this.$tip);
    var e = $.Event('hide.bs.' + this.type);

    function complete() {
      if (that.hoverState != 'in') $tip.detach();
      if (that.$element) {
        that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);
      }
      callback && callback();
    }

    this.$element.trigger(e);

    if (e.isDefaultPrevented()) return;

    $tip.removeClass('in');

    $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();

    this.hoverState = null;

    return this;
  };

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element;
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
    }
  };

  Tooltip.prototype.hasContent = function () {
    return this.getTitle();
  };

  Tooltip.prototype.getPosition = function ($element) {
    $element = $element || this.$element;

    var el = $element[0];
    var isBody = el.tagName == 'BODY';

    var elRect = el.getBoundingClientRect();
    if (elRect.width == null) {
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement;
    var elOffset = isBody ? { top: 0, left: 0 } : isSvg ? null : $element.offset();
    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null;

    return $.extend({}, elRect, scroll, outerDims, elOffset);
  };

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
{ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
  };

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 };
    if (!this.$viewport) return delta;

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
    var viewportDimensions = this.getPosition(this.$viewport);

    if (/right|left/.test(placement)) {
      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
      if (topEdgeOffset < viewportDimensions.top) {
        delta.top = viewportDimensions.top - topEdgeOffset;
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
      }
    } else {
      var leftEdgeOffset = pos.left - viewportPadding;
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
      if (leftEdgeOffset < viewportDimensions.left) {
        delta.left = viewportDimensions.left - leftEdgeOffset;
      } else if (rightEdgeOffset > viewportDimensions.right) {
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
      }
    }

    return delta;
  };

  Tooltip.prototype.getTitle = function () {
    var title;
    var $e = this.$element;
    var o = this.options;

    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);

    return title;
  };

  Tooltip.prototype.getUID = function (prefix) {
    do {
      prefix += ~~(Math.random() * 1000000);
    } while (document.getElementById(prefix));
    return prefix;
  };

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template);
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');
      }
    }
    return this.$tip;
  };

  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
  };

  Tooltip.prototype.enable = function () {
    this.enabled = true;
  };

  Tooltip.prototype.disable = function () {
    this.enabled = false;
  };

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  };

  Tooltip.prototype.toggle = function (e) {
    var self = this;
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type);
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
        $(e.currentTarget).data('bs.' + this.type, self);
      }
    }

    if (e) {
      self.inState.click = !self.inState.click;
      if (self.isInStateTrue()) self.enter(self);else self.leave(self);
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
    }
  };

  Tooltip.prototype.destroy = function () {
    var that = this;
    clearTimeout(this.timeout);
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type);
      if (that.$tip) {
        that.$tip.detach();
      }
      that.$tip = null;
      that.$arrow = null;
      that.$viewport = null;
      that.$element = null;
    });
  };


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tooltip');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data && /destroy|hide/.test(option)) return;
      if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.tooltip;

  $.fn.tooltip = Plugin;
  $.fn.tooltip.Constructor = Tooltip;


  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old;
    return this;
  };
}(jQuery);


+function ($) {
  'use strict';


  var Popover = function Popover(element, options) {
    this.init('popover', element, options);
  };

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');

  Popover.VERSION = '3.3.7';

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });


  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);

  Popover.prototype.constructor = Popover;

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS;
  };

  Popover.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    var content = this.getContent();

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
    $tip.find('.popover-content').children().detach().end()[
    this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);

    $tip.removeClass('fade top bottom left right in');

    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();
  };

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  };

  Popover.prototype.getContent = function () {
    var $e = this.$element;
    var o = this.options;

    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
  };

  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow');
  };


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.popover');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data && /destroy|hide/.test(option)) return;
      if (!data) $this.data('bs.popover', data = new Popover(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.popover;

  $.fn.popover = Plugin;
  $.fn.popover.Constructor = Popover;


  $.fn.popover.noConflict = function () {
    $.fn.popover = old;
    return this;
  };
}(jQuery);


+function ($) {
  'use strict';


  function ScrollSpy(element, options) {
    this.$body = $(document.body);
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
    this.selector = (this.options.target || '') + ' .nav li > a';
    this.offsets = [];
    this.targets = [];
    this.activeTarget = null;
    this.scrollHeight = 0;

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));
    this.refresh();
    this.process();
  }

  ScrollSpy.VERSION = '3.3.7';

  ScrollSpy.DEFAULTS = {
    offset: 10
  };

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
  };

  ScrollSpy.prototype.refresh = function () {
    var that = this;
    var offsetMethod = 'offset';
    var offsetBase = 0;

    this.offsets = [];
    this.targets = [];
    this.scrollHeight = this.getScrollHeight();

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position';
      offsetBase = this.$scrollElement.scrollTop();
    }

    this.$body.find(this.selector).map(function () {
      var $el = $(this);
      var href = $el.data('target') || $el.attr('href');
      var $href = /^#./.test(href) && $(href);

      return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;
    }).sort(function (a, b) {
      return a[0] - b[0];
    }).each(function () {
      that.offsets.push(this[0]);
      that.targets.push(this[1]);
    });
  };

  ScrollSpy.prototype.process = function () {
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
    var scrollHeight = this.getScrollHeight();
    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
    var offsets = this.offsets;
    var targets = this.targets;
    var activeTarget = this.activeTarget;
    var i;

    if (this.scrollHeight != scrollHeight) {
      this.refresh();
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null;
      return this.clear();
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);
    }
  };

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target;

    this.clear();

    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';

    var active = $(selector).parents('li').addClass('active');

    if (active.parent('.dropdown-menu').length) {
      active = active.closest('li.dropdown').addClass('active');
    }

    active.trigger('activate.bs.scrollspy');
  };

  ScrollSpy.prototype.clear = function () {
    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
  };


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.scrollspy');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.scrollspy;

  $.fn.scrollspy = Plugin;
  $.fn.scrollspy.Constructor = ScrollSpy;


  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old;
    return this;
  };


  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this);
      Plugin.call($spy, $spy.data());
    });
  });
}(jQuery);


+function ($) {
  'use strict';


  var Tab = function Tab(element) {
    this.element = $(element);
  };

  Tab.VERSION = '3.3.7';

  Tab.TRANSITION_DURATION = 150;

  Tab.prototype.show = function () {
    var $this = this.element;
    var $ul = $this.closest('ul:not(.dropdown-menu)');
    var selector = $this.data('target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); 
    }

    if ($this.parent('li').hasClass('active')) return;

    var $previous = $ul.find('.active:last a');
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    });
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    });

    $previous.trigger(hideEvent);
    $this.trigger(showEvent);

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;

    var $target = $(selector);

    this.activate($this.closest('li'), $ul);
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      });
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      });
    });
  };

  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find('> .active');
    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);

    function next() {
      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', false);

      element.addClass('active').find('[data-toggle="tab"]').attr('aria-expanded', true);

      if (transition) {
        element[0].offsetWidth; 
        element.addClass('in');
      } else {
        element.removeClass('fade');
      }

      if (element.parent('.dropdown-menu').length) {
        element.closest('li.dropdown').addClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', true);
      }

      callback && callback();
    }

    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();

    $active.removeClass('in');
  };


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tab');

      if (!data) $this.data('bs.tab', data = new Tab(this));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.tab;

  $.fn.tab = Plugin;
  $.fn.tab.Constructor = Tab;


  $.fn.tab.noConflict = function () {
    $.fn.tab = old;
    return this;
  };


  var clickHandler = function clickHandler(e) {
    e.preventDefault();
    Plugin.call($(this), 'show');
  };

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler);
}(jQuery);


+function ($) {
  'use strict';


  var Affix = function Affix(element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);

    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));

    this.$element = $(element);
    this.affixed = null;
    this.unpin = null;
    this.pinnedOffset = null;

    this.checkPosition();
  };

  Affix.VERSION = '3.3.7';

  Affix.RESET = 'affix affix-top affix-bottom';

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  };

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    var targetHeight = this.$target.height();

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';
      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
    }

    var initializing = this.affixed == null;
    var colliderTop = initializing ? scrollTop : position.top;
    var colliderHeight = initializing ? targetHeight : height;

    if (offsetTop != null && scrollTop <= offsetTop) return 'top';
    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';

    return false;
  };

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset;
    this.$element.removeClass(Affix.RESET).addClass('affix');
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    return this.pinnedOffset = position.top - scrollTop;
  };

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return;

    var height = this.$element.height();
    var offset = this.options.offset;
    var offsetTop = offset.top;
    var offsetBottom = offset.bottom;
    var scrollHeight = Math.max($(document).height(), $(document.body).height());

    if ((typeof offset === 'undefined' ? 'undefined' : _typeof(offset)) != 'object') offsetBottom = offsetTop = offset;
    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '');

      var affixType = 'affix' + (affix ? '-' + affix : '');
      var e = $.Event(affixType + '.bs.affix');

      this.$element.trigger(e);

      if (e.isDefaultPrevented()) return;

      this.affixed = affix;
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;

      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      });
    }
  };


  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.affix');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.affix', data = new Affix(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.affix;

  $.fn.affix = Plugin;
  $.fn.affix.Constructor = Affix;


  $.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };


  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this);
      var data = $spy.data();

      data.offset = data.offset || {};

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;
      if (data.offsetTop != null) data.offset.top = data.offsetTop;

      Plugin.call($spy, data);
    });
  });
}(jQuery);
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };


(function () {
  (function (n) {
    var x = this || (0, eval)("this"),
        t = x.document,
        M = x.navigator,
        u = x.jQuery,
        H = x.JSON;(function (n) {
      "function" === typeof define && define.amd ? define(["exports", "require"], n) : "object" === (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" === (typeof module === "undefined" ? "undefined" : _typeof(module)) ? n(module.exports || exports) : n(x.ko = {});
    })(function (N, O) {
      function J(a, c) {
        return null === a || (typeof a === "undefined" ? "undefined" : _typeof(a)) in R ? a === c : !1;
      }function S(b, c) {
        var d;return function () {
          d || (d = a.a.setTimeout(function () {
            d = n;b();
          }, c));
        };
      }function T(b, c) {
        var d;return function () {
          clearTimeout(d);d = a.a.setTimeout(b, c);
        };
      }function U(a, c) {
        c && c !== E ? "beforeChange" === c ? this.Ob(a) : this.Ja(a, c) : this.Pb(a);
      }function V(a, c) {
        null !== c && c.k && c.k();
      }function W(a, c) {
        var d = this.Mc,
            e = d[s];e.T || (this.ob && this.Oa[c] ? (d.Sb(c, a, this.Oa[c]), this.Oa[c] = null, --this.ob) : e.s[c] || d.Sb(c, a, e.t ? { $: a } : d.yc(a)), a.Ha && a.Hc());
      }function K(b, c, d, e) {
        a.d[b] = { init: function init(b, g, h, l, m) {
            var k, r;a.m(function () {
              var q = g(),
                  p = a.a.c(q),
                  p = !d !== !p,
                  A = !r;if (A || c || p !== k) A && a.xa.Ca() && (r = a.a.wa(a.f.childNodes(b), !0)), p ? (A || a.f.fa(b, a.a.wa(r)), a.hb(e ? e(m, q) : m, b)) : a.f.za(b), k = p;
            }, null, { i: b });return { controlsDescendantBindings: !0 };
          } };a.h.va[b] = !1;a.f.aa[b] = !0;
      }var a = "undefined" !== typeof N ? N : {};a.b = function (b, c) {
        for (var d = b.split("."), e = a, f = 0; f < d.length - 1; f++) {
          e = e[d[f]];
        }e[d[d.length - 1]] = c;
      };a.H = function (a, c, d) {
        a[c] = d;
      };a.version = "3.4.2";a.b("version", a.version);a.options = { deferUpdates: !1, useOnlyNativeEvents: !1 };a.a = function () {
        function b(a, b) {
          for (var c in a) {
            a.hasOwnProperty(c) && b(c, a[c]);
          }
        }function c(a, b) {
          if (b) for (var c in b) {
            b.hasOwnProperty(c) && (a[c] = b[c]);
          }return a;
        }function d(a, b) {
          a.__proto__ = b;return a;
        }function e(b, c, d, e) {
          var m = b[c].match(r) || [];a.a.r(d.match(r), function (b) {
            a.a.ra(m, b, e);
          });b[c] = m.join(" ");
        }var f = { __proto__: [] } instanceof Array,
            g = "function" === typeof Symbol,
            h = {},
            l = {};h[M && /Firefox\/2/i.test(M.userAgent) ? "KeyboardEvent" : "UIEvents"] = ["keyup", "keydown", "keypress"];h.MouseEvents = "click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" ");b(h, function (a, b) {
          if (b.length) for (var c = 0, d = b.length; c < d; c++) {
            l[b[c]] = a;
          }
        });var m = { propertychange: !0 },
            k = t && function () {
          for (var a = 3, b = t.createElement("div"), c = b.getElementsByTagName("i"); b.innerHTML = "\x3c!--[if gt IE " + ++a + "]><i></i><![endif]--\x3e", c[0];) {}return 4 < a ? a : n;
        }(),
            r = /\S+/g;return { gc: ["authenticity_token", /^__RequestVerificationToken(_.*)?$/], r: function r(a, b) {
            for (var c = 0, d = a.length; c < d; c++) {
              b(a[c], c);
            }
          }, o: function o(a, b) {
            if ("function" == typeof Array.prototype.indexOf) return Array.prototype.indexOf.call(a, b);for (var c = 0, d = a.length; c < d; c++) {
              if (a[c] === b) return c;
            }return -1;
          }, Vb: function Vb(a, b, c) {
            for (var d = 0, e = a.length; d < e; d++) {
              if (b.call(c, a[d], d)) return a[d];
            }return null;
          }, Na: function Na(b, c) {
            var d = a.a.o(b, c);0 < d ? b.splice(d, 1) : 0 === d && b.shift();
          }, Wb: function Wb(b) {
            b = b || [];for (var c = [], d = 0, e = b.length; d < e; d++) {
              0 > a.a.o(c, b[d]) && c.push(b[d]);
            }return c;
          }, ib: function ib(a, b) {
            a = a || [];for (var c = [], d = 0, e = a.length; d < e; d++) {
              c.push(b(a[d], d));
            }return c;
          }, Ma: function Ma(a, b) {
            a = a || [];for (var c = [], d = 0, e = a.length; d < e; d++) {
              b(a[d], d) && c.push(a[d]);
            }return c;
          }, ta: function ta(a, b) {
            if (b instanceof Array) a.push.apply(a, b);else for (var c = 0, d = b.length; c < d; c++) {
              a.push(b[c]);
            }return a;
          }, ra: function ra(b, c, d) {
            var e = a.a.o(a.a.Bb(b), c);0 > e ? d && b.push(c) : d || b.splice(e, 1);
          }, la: f, extend: c, $a: d, ab: f ? d : c, D: b, Ea: function Ea(a, b) {
            if (!a) return a;var c = {},
                d;for (d in a) {
              a.hasOwnProperty(d) && (c[d] = b(a[d], d, a));
            }return c;
          }, rb: function rb(b) {
            for (; b.firstChild;) {
              a.removeNode(b.firstChild);
            }
          }, nc: function nc(b) {
            b = a.a.W(b);for (var c = (b[0] && b[0].ownerDocument || t).createElement("div"), d = 0, e = b.length; d < e; d++) {
              c.appendChild(a.ba(b[d]));
            }return c;
          }, wa: function wa(b, c) {
            for (var d = 0, e = b.length, m = []; d < e; d++) {
              var k = b[d].cloneNode(!0);m.push(c ? a.ba(k) : k);
            }return m;
          }, fa: function fa(b, c) {
            a.a.rb(b);if (c) for (var d = 0, e = c.length; d < e; d++) {
              b.appendChild(c[d]);
            }
          }, uc: function uc(b, c) {
            var d = b.nodeType ? [b] : b;if (0 < d.length) {
              for (var e = d[0], m = e.parentNode, k = 0, f = c.length; k < f; k++) {
                m.insertBefore(c[k], e);
              }k = 0;for (f = d.length; k < f; k++) {
                a.removeNode(d[k]);
              }
            }
          }, Ba: function Ba(a, b) {
            if (a.length) {
              for (b = 8 === b.nodeType && b.parentNode || b; a.length && a[0].parentNode !== b;) {
                a.splice(0, 1);
              }for (; 1 < a.length && a[a.length - 1].parentNode !== b;) {
                a.length--;
              }if (1 < a.length) {
                var c = a[0],
                    d = a[a.length - 1];for (a.length = 0; c !== d;) {
                  a.push(c), c = c.nextSibling;
                }a.push(d);
              }
            }return a;
          }, wc: function wc(a, b) {
            7 > k ? a.setAttribute("selected", b) : a.selected = b;
          }, cb: function cb(a) {
            return null === a || a === n ? "" : a.trim ? a.trim() : a.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
          }, sd: function sd(a, b) {
            a = a || "";return b.length > a.length ? !1 : a.substring(0, b.length) === b;
          }, Rc: function Rc(a, b) {
            if (a === b) return !0;if (11 === a.nodeType) return !1;if (b.contains) return b.contains(3 === a.nodeType ? a.parentNode : a);if (b.compareDocumentPosition) return 16 == (b.compareDocumentPosition(a) & 16);for (; a && a != b;) {
              a = a.parentNode;
            }return !!a;
          }, qb: function qb(b) {
            return a.a.Rc(b, b.ownerDocument.documentElement);
          }, Tb: function Tb(b) {
            return !!a.a.Vb(b, a.a.qb);
          }, A: function A(a) {
            return a && a.tagName && a.tagName.toLowerCase();
          }, Zb: function Zb(b) {
            return a.onError ? function () {
              try {
                return b.apply(this, arguments);
              } catch (c) {
                throw a.onError && a.onError(c), c;
              }
            } : b;
          }, setTimeout: function (_setTimeout) {
            function setTimeout(_x, _x2) {
              return _setTimeout.apply(this, arguments);
            }

            setTimeout.toString = function () {
              return _setTimeout.toString();
            };

            return setTimeout;
          }(function (b, c) {
            return setTimeout(a.a.Zb(b), c);
          }), dc: function dc(b) {
            setTimeout(function () {
              a.onError && a.onError(b);throw b;
            }, 0);
          }, q: function q(b, c, d) {
            var e = a.a.Zb(d);d = k && m[c];if (a.options.useOnlyNativeEvents || d || !u) {
              if (d || "function" != typeof b.addEventListener) {
                if ("undefined" != typeof b.attachEvent) {
                  var f = function f(a) {
                    e.call(b, a);
                  },
                      l = "on" + c;b.attachEvent(l, f);a.a.G.qa(b, function () {
                    b.detachEvent(l, f);
                  });
                } else throw Error("Browser doesn't support addEventListener or attachEvent");
              } else b.addEventListener(c, e, !1);
            } else u(b).bind(c, e);
          }, Fa: function Fa(b, c) {
            if (!b || !b.nodeType) throw Error("element must be a DOM node when calling triggerEvent");var d;"input" === a.a.A(b) && b.type && "click" == c.toLowerCase() ? (d = b.type, d = "checkbox" == d || "radio" == d) : d = !1;if (a.options.useOnlyNativeEvents || !u || d) {
              if ("function" == typeof t.createEvent) {
                if ("function" == typeof b.dispatchEvent) d = t.createEvent(l[c] || "HTMLEvents"), d.initEvent(c, !0, !0, x, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, b), b.dispatchEvent(d);else throw Error("The supplied element doesn't support dispatchEvent");
              } else if (d && b.click) b.click();else if ("undefined" != typeof b.fireEvent) b.fireEvent("on" + c);else throw Error("Browser doesn't support triggering events");
            } else u(b).trigger(c);
          }, c: function c(b) {
            return a.I(b) ? b() : b;
          }, Bb: function Bb(b) {
            return a.I(b) ? b.p() : b;
          }, fb: function fb(b, c, d) {
            var k;c && ("object" === _typeof(b.classList) ? (k = b.classList[d ? "add" : "remove"], a.a.r(c.match(r), function (a) {
              k.call(b.classList, a);
            })) : "string" === typeof b.className.baseVal ? e(b.className, "baseVal", c, d) : e(b, "className", c, d));
          }, bb: function bb(b, c) {
            var d = a.a.c(c);if (null === d || d === n) d = "";var e = a.f.firstChild(b);!e || 3 != e.nodeType || a.f.nextSibling(e) ? a.f.fa(b, [b.ownerDocument.createTextNode(d)]) : e.data = d;a.a.Wc(b);
          }, vc: function vc(a, b) {
            a.name = b;if (7 >= k) try {
              a.mergeAttributes(t.createElement("<input name='" + a.name + "'/>"), !1);
            } catch (c) {}
          }, Wc: function Wc(a) {
            9 <= k && (a = 1 == a.nodeType ? a : a.parentNode, a.style && (a.style.zoom = a.style.zoom));
          }, Sc: function Sc(a) {
            if (k) {
              var b = a.style.width;a.style.width = 0;a.style.width = b;
            }
          }, nd: function nd(b, c) {
            b = a.a.c(b);c = a.a.c(c);for (var d = [], e = b; e <= c; e++) {
              d.push(e);
            }return d;
          }, W: function W(a) {
            for (var b = [], c = 0, d = a.length; c < d; c++) {
              b.push(a[c]);
            }return b;
          }, bc: function bc(a) {
            return g ? Symbol(a) : a;
          }, xd: 6 === k,
          yd: 7 === k, C: k, ic: function ic(b, c) {
            for (var d = a.a.W(b.getElementsByTagName("input")).concat(a.a.W(b.getElementsByTagName("textarea"))), e = "string" == typeof c ? function (a) {
              return a.name === c;
            } : function (a) {
              return c.test(a.name);
            }, k = [], m = d.length - 1; 0 <= m; m--) {
              e(d[m]) && k.push(d[m]);
            }return k;
          }, kd: function kd(b) {
            return "string" == typeof b && (b = a.a.cb(b)) ? H && H.parse ? H.parse(b) : new Function("return " + b)() : null;
          }, Gb: function Gb(b, c, d) {
            if (!H || !H.stringify) throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");
            return H.stringify(a.a.c(b), c, d);
          }, ld: function ld(c, d, e) {
            e = e || {};var k = e.params || {},
                m = e.includeFields || this.gc,
                f = c;if ("object" == (typeof c === "undefined" ? "undefined" : _typeof(c)) && "form" === a.a.A(c)) for (var f = c.action, l = m.length - 1; 0 <= l; l--) {
              for (var g = a.a.ic(c, m[l]), h = g.length - 1; 0 <= h; h--) {
                k[g[h].name] = g[h].value;
              }
            }d = a.a.c(d);var r = t.createElement("form");r.style.display = "none";r.action = f;r.method = "post";for (var n in d) {
              c = t.createElement("input"), c.type = "hidden", c.name = n, c.value = a.a.Gb(a.a.c(d[n])), r.appendChild(c);
            }b(k, function (a, b) {
              var c = t.createElement("input");
              c.type = "hidden";c.name = a;c.value = b;r.appendChild(c);
            });t.body.appendChild(r);e.submitter ? e.submitter(r) : r.submit();setTimeout(function () {
              r.parentNode.removeChild(r);
            }, 0);
          } };
      }();a.b("utils", a.a);a.b("utils.arrayForEach", a.a.r);a.b("utils.arrayFirst", a.a.Vb);a.b("utils.arrayFilter", a.a.Ma);a.b("utils.arrayGetDistinctValues", a.a.Wb);a.b("utils.arrayIndexOf", a.a.o);a.b("utils.arrayMap", a.a.ib);a.b("utils.arrayPushAll", a.a.ta);a.b("utils.arrayRemoveItem", a.a.Na);a.b("utils.extend", a.a.extend);a.b("utils.fieldsIncludedWithJsonPost", a.a.gc);a.b("utils.getFormFields", a.a.ic);a.b("utils.peekObservable", a.a.Bb);a.b("utils.postJson", a.a.ld);a.b("utils.parseJson", a.a.kd);a.b("utils.registerEventHandler", a.a.q);a.b("utils.stringifyJson", a.a.Gb);a.b("utils.range", a.a.nd);a.b("utils.toggleDomNodeCssClass", a.a.fb);a.b("utils.triggerEvent", a.a.Fa);a.b("utils.unwrapObservable", a.a.c);a.b("utils.objectForEach", a.a.D);a.b("utils.addOrRemoveItem", a.a.ra);a.b("utils.setTextContent", a.a.bb);a.b("unwrap", a.a.c);Function.prototype.bind || (Function.prototype.bind = function (a) {
        var c = this;if (1 === arguments.length) return function () {
          return c.apply(a, arguments);
        };var d = Array.prototype.slice.call(arguments, 1);return function () {
          var e = d.slice(0);e.push.apply(e, arguments);return c.apply(a, e);
        };
      });a.a.e = new function () {
        function a(b, g) {
          var h = b[d];if (!h || "null" === h || !e[h]) {
            if (!g) return n;h = b[d] = "ko" + c++;e[h] = {};
          }return e[h];
        }var c = 0,
            d = "__ko__" + new Date().getTime(),
            e = {};return { get: function get(c, d) {
            var e = a(c, !1);return e === n ? n : e[d];
          }, set: function set(c, d, e) {
            if (e !== n || a(c, !1) !== n) a(c, !0)[d] = e;
          }, clear: function clear(a) {
            var b = a[d];return b ? (delete e[b], a[d] = null, !0) : !1;
          }, J: function J() {
            return c++ + d;
          } };
      }();a.b("utils.domData", a.a.e);a.b("utils.domData.clear", a.a.e.clear);a.a.G = new function () {
        function b(b, c) {
          var e = a.a.e.get(b, d);e === n && c && (e = [], a.a.e.set(b, d, e));return e;
        }function c(d) {
          var e = b(d, !1);if (e) for (var e = e.slice(0), l = 0; l < e.length; l++) {
            e[l](d);
          }a.a.e.clear(d);a.a.G.cleanExternalData(d);if (f[d.nodeType]) for (e = d.firstChild; d = e;) {
            e = d.nextSibling, 8 === d.nodeType && c(d);
          }
        }var d = a.a.e.J(),
            e = { 1: !0, 8: !0, 9: !0 },
            f = { 1: !0, 9: !0 };return { qa: function qa(a, c) {
            if ("function" != typeof c) throw Error("Callback must be a function");b(a, !0).push(c);
          }, tc: function tc(c, e) {
            var f = b(c, !1);f && (a.a.Na(f, e), 0 == f.length && a.a.e.set(c, d, n));
          }, ba: function ba(b) {
            if (e[b.nodeType] && (c(b), f[b.nodeType])) {
              var d = [];a.a.ta(d, b.getElementsByTagName("*"));for (var l = 0, m = d.length; l < m; l++) {
                c(d[l]);
              }
            }return b;
          }, removeNode: function removeNode(b) {
            a.ba(b);b.parentNode && b.parentNode.removeChild(b);
          }, cleanExternalData: function cleanExternalData(a) {
            u && "function" == typeof u.cleanData && u.cleanData([a]);
          } };
      }();
      a.ba = a.a.G.ba;a.removeNode = a.a.G.removeNode;a.b("cleanNode", a.ba);a.b("removeNode", a.removeNode);a.b("utils.domNodeDisposal", a.a.G);a.b("utils.domNodeDisposal.addDisposeCallback", a.a.G.qa);a.b("utils.domNodeDisposal.removeDisposeCallback", a.a.G.tc);(function () {
        var b = [0, "", ""],
            c = [1, "<table>", "</table>"],
            d = [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            e = [1, "<select multiple='multiple'>", "</select>"],
            f = { thead: c, tbody: c, tfoot: c, tr: [2, "<table><tbody>", "</tbody></table>"], td: d, th: d, option: e, optgroup: e },
            g = 8 >= a.a.C;a.a.na = function (c, d) {
          var e;if (u) {
            if (u.parseHTML) e = u.parseHTML(c, d) || [];else {
              if ((e = u.clean([c], d)) && e[0]) {
                for (var k = e[0]; k.parentNode && 11 !== k.parentNode.nodeType;) {
                  k = k.parentNode;
                }k.parentNode && k.parentNode.removeChild(k);
              }
            }
          } else {
            (e = d) || (e = t);var k = e.parentWindow || e.defaultView || x,
                r = a.a.cb(c).toLowerCase(),
                q = e.createElement("div"),
                p;p = (r = r.match(/^<([a-z]+)[ >]/)) && f[r[1]] || b;r = p[0];p = "ignored<div>" + p[1] + c + p[2] + "</div>";"function" == typeof k.innerShiv ? q.appendChild(k.innerShiv(p)) : (g && e.appendChild(q), q.innerHTML = p, g && q.parentNode.removeChild(q));for (; r--;) {
              q = q.lastChild;
            }e = a.a.W(q.lastChild.childNodes);
          }return e;
        };a.a.Eb = function (b, c) {
          a.a.rb(b);c = a.a.c(c);if (null !== c && c !== n) if ("string" != typeof c && (c = c.toString()), u) u(b).html(c);else for (var d = a.a.na(c, b.ownerDocument), e = 0; e < d.length; e++) {
            b.appendChild(d[e]);
          }
        };
      })();a.b("utils.parseHtmlFragment", a.a.na);a.b("utils.setHtml", a.a.Eb);a.N = function () {
        function b(c, e) {
          if (c) if (8 == c.nodeType) {
            var f = a.N.pc(c.nodeValue);null != f && e.push({ Qc: c, hd: f });
          } else if (1 == c.nodeType) for (var f = 0, g = c.childNodes, h = g.length; f < h; f++) {
            b(g[f], e);
          }
        }var c = {};return { yb: function yb(a) {
            if ("function" != typeof a) throw Error("You can only pass a function to ko.memoization.memoize()");var b = (4294967296 * (1 + Math.random()) | 0).toString(16).substring(1) + (4294967296 * (1 + Math.random()) | 0).toString(16).substring(1);c[b] = a;return "\x3c!--[ko_memo:" + b + "]--\x3e";
          }, Bc: function Bc(a, b) {
            var f = c[a];if (f === n) throw Error("Couldn't find any memo with ID " + a + ". Perhaps it's already been unmemoized.");try {
              return f.apply(null, b || []), !0;
            } finally {
              delete c[a];
            }
          }, Cc: function Cc(c, e) {
            var f = [];b(c, f);for (var g = 0, h = f.length; g < h; g++) {
              var l = f[g].Qc,
                  m = [l];e && a.a.ta(m, e);a.N.Bc(f[g].hd, m);l.nodeValue = "";l.parentNode && l.parentNode.removeChild(l);
            }
          }, pc: function pc(a) {
            return (a = a.match(/^\[ko_memo\:(.*?)\]$/)) ? a[1] : null;
          } };
      }();a.b("memoization", a.N);a.b("memoization.memoize", a.N.yb);a.b("memoization.unmemoize", a.N.Bc);a.b("memoization.parseMemoText", a.N.pc);a.b("memoization.unmemoizeDomNodeAndDescendants", a.N.Cc);a.Z = function () {
        function b() {
          if (e) for (var b = e, c = 0, m; g < e;) {
            if (m = d[g++]) {
              if (g > b) {
                if (5E3 <= ++c) {
                  g = e;a.a.dc(Error("'Too much recursion' after processing " + c + " task groups."));break;
                }b = e;
              }try {
                m();
              } catch (k) {
                a.a.dc(k);
              }
            }
          }
        }function c() {
          b();g = e = d.length = 0;
        }var d = [],
            e = 0,
            f = 1,
            g = 0;return { scheduler: x.MutationObserver ? function (a) {
            var b = t.createElement("div");new MutationObserver(a).observe(b, { attributes: !0 });return function () {
              b.classList.toggle("foo");
            };
          }(c) : t && "onreadystatechange" in t.createElement("script") ? function (a) {
            var b = t.createElement("script");b.onreadystatechange = function () {
              b.onreadystatechange = null;t.documentElement.removeChild(b);b = null;a();
            };t.documentElement.appendChild(b);
          } : function (a) {
            setTimeout(a, 0);
          }, Za: function Za(b) {
            e || a.Z.scheduler(c);d[e++] = b;return f++;
          }, cancel: function cancel(a) {
            a -= f - e;a >= g && a < e && (d[a] = null);
          }, resetForTesting: function resetForTesting() {
            var a = e - g;g = e = d.length = 0;return a;
          }, rd: b };
      }();a.b("tasks", a.Z);a.b("tasks.schedule", a.Z.Za);a.b("tasks.runEarly", a.Z.rd);a.Aa = { throttle: function throttle(b, c) {
          b.throttleEvaluation = c;var d = null;return a.B({ read: b, write: function write(e) {
              clearTimeout(d);
              d = a.a.setTimeout(function () {
                b(e);
              }, c);
            } });
        }, rateLimit: function rateLimit(a, c) {
          var d, e, f;"number" == typeof c ? d = c : (d = c.timeout, e = c.method);a.gb = !1;f = "notifyWhenChangesStop" == e ? T : S;a.Wa(function (a) {
            return f(a, d);
          });
        }, deferred: function deferred(b, c) {
          if (!0 !== c) throw Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");b.gb || (b.gb = !0, b.Wa(function (c) {
            var e,
                f = !1;return function () {
              if (!f) {
                a.Z.cancel(e);e = a.Z.Za(c);try {
                  f = !0, b.notifySubscribers(n, "dirty");
                } finally {
                  f = !1;
                }
              }
            };
          }));
        }, notify: function notify(a, c) {
          a.equalityComparer = "always" == c ? null : J;
        } };var R = { undefined: 1, "boolean": 1, number: 1, string: 1 };a.b("extenders", a.Aa);a.zc = function (b, c, d) {
        this.$ = b;this.jb = c;this.Pc = d;this.T = !1;a.H(this, "dispose", this.k);
      };a.zc.prototype.k = function () {
        this.T = !0;this.Pc();
      };a.K = function () {
        a.a.ab(this, D);D.ub(this);
      };var E = "change",
          D = { ub: function ub(a) {
          a.F = { change: [] };a.Qb = 1;
        }, Y: function Y(b, c, d) {
          var e = this;d = d || E;var f = new a.zc(e, c ? b.bind(c) : b, function () {
            a.a.Na(e.F[d], f);e.Ka && e.Ka(d);
          });e.ua && e.ua(d);
          e.F[d] || (e.F[d] = []);e.F[d].push(f);return f;
        }, notifySubscribers: function notifySubscribers(b, c) {
          c = c || E;c === E && this.Kb();if (this.Ra(c)) {
            var d = c === E && this.Fc || this.F[c].slice(0);try {
              a.l.Xb();for (var e = 0, f; f = d[e]; ++e) {
                f.T || f.jb(b);
              }
            } finally {
              a.l.end();
            }
          }
        }, Pa: function Pa() {
          return this.Qb;
        }, Zc: function Zc(a) {
          return this.Pa() !== a;
        }, Kb: function Kb() {
          ++this.Qb;
        }, Wa: function Wa(b) {
          var c = this,
              d = a.I(c),
              e,
              f,
              g,
              h;c.Ja || (c.Ja = c.notifySubscribers, c.notifySubscribers = U);var l = b(function () {
            c.Ha = !1;d && h === c && (h = c.Mb ? c.Mb() : c());var a = f || c.Ua(g, h);f = e = !1;
            a && c.Ja(g = h);
          });c.Pb = function (a) {
            c.Fc = c.F[E].slice(0);c.Ha = e = !0;h = a;l();
          };c.Ob = function (a) {
            e || (g = a, c.Ja(a, "beforeChange"));
          };c.Hc = function () {
            c.Ua(g, c.p(!0)) && (f = !0);
          };
        }, Ra: function Ra(a) {
          return this.F[a] && this.F[a].length;
        }, Xc: function Xc(b) {
          if (b) return this.F[b] && this.F[b].length || 0;var c = 0;a.a.D(this.F, function (a, b) {
            "dirty" !== a && (c += b.length);
          });return c;
        }, Ua: function Ua(a, c) {
          return !this.equalityComparer || !this.equalityComparer(a, c);
        }, extend: function extend(b) {
          var c = this;b && a.a.D(b, function (b, e) {
            var f = a.Aa[b];"function" == typeof f && (c = f(c, e) || c);
          });return c;
        } };a.H(D, "subscribe", D.Y);a.H(D, "extend", D.extend);a.H(D, "getSubscriptionsCount", D.Xc);a.a.la && a.a.$a(D, Function.prototype);a.K.fn = D;a.lc = function (a) {
        return null != a && "function" == typeof a.Y && "function" == typeof a.notifySubscribers;
      };a.b("subscribable", a.K);a.b("isSubscribable", a.lc);a.xa = a.l = function () {
        function b(a) {
          d.push(e);e = a;
        }function c() {
          e = d.pop();
        }var d = [],
            e,
            f = 0;return { Xb: b, end: c, sc: function sc(b) {
            if (e) {
              if (!a.lc(b)) throw Error("Only subscribable things can act as dependencies");
              e.jb.call(e.Lc, b, b.Gc || (b.Gc = ++f));
            }
          }, w: function w(a, d, e) {
            try {
              return b(), a.apply(d, e || []);
            } finally {
              c();
            }
          }, Ca: function Ca() {
            if (e) return e.m.Ca();
          }, Va: function Va() {
            if (e) return e.Va;
          } };
      }();a.b("computedContext", a.xa);a.b("computedContext.getDependenciesCount", a.xa.Ca);a.b("computedContext.isInitial", a.xa.Va);a.b("ignoreDependencies", a.wd = a.l.w);var F = a.a.bc("_latestValue");a.O = function (b) {
        function c() {
          if (0 < arguments.length) return c.Ua(c[F], arguments[0]) && (c.ia(), c[F] = arguments[0], c.ha()), this;a.l.sc(c);return c[F];
        }
        c[F] = b;a.a.la || a.a.extend(c, a.K.fn);a.K.fn.ub(c);a.a.ab(c, B);a.options.deferUpdates && a.Aa.deferred(c, !0);return c;
      };var B = { equalityComparer: J, p: function p() {
          return this[F];
        }, ha: function ha() {
          this.notifySubscribers(this[F]);
        }, ia: function ia() {
          this.notifySubscribers(this[F], "beforeChange");
        } };a.a.la && a.a.$a(B, a.K.fn);var I = a.O.md = "__ko_proto__";B[I] = a.O;a.Qa = function (b, c) {
        return null === b || b === n || b[I] === n ? !1 : b[I] === c ? !0 : a.Qa(b[I], c);
      };a.I = function (b) {
        return a.Qa(b, a.O);
      };a.Da = function (b) {
        return "function" == typeof b && b[I] === a.O || "function" == typeof b && b[I] === a.B && b.$c ? !0 : !1;
      };a.b("observable", a.O);a.b("isObservable", a.I);a.b("isWriteableObservable", a.Da);a.b("isWritableObservable", a.Da);a.b("observable.fn", B);a.H(B, "peek", B.p);a.H(B, "valueHasMutated", B.ha);a.H(B, "valueWillMutate", B.ia);a.ma = function (b) {
        b = b || [];if ("object" != (typeof b === "undefined" ? "undefined" : _typeof(b)) || !("length" in b)) throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");b = a.O(b);a.a.ab(b, a.ma.fn);return b.extend({ trackArrayChanges: !0 });
      };
      a.ma.fn = { remove: function remove(b) {
          for (var c = this.p(), d = [], e = "function" != typeof b || a.I(b) ? function (a) {
            return a === b;
          } : b, f = 0; f < c.length; f++) {
            var g = c[f];e(g) && (0 === d.length && this.ia(), d.push(g), c.splice(f, 1), f--);
          }d.length && this.ha();return d;
        }, removeAll: function removeAll(b) {
          if (b === n) {
            var c = this.p(),
                d = c.slice(0);this.ia();c.splice(0, c.length);this.ha();return d;
          }return b ? this.remove(function (c) {
            return 0 <= a.a.o(b, c);
          }) : [];
        }, destroy: function destroy(b) {
          var c = this.p(),
              d = "function" != typeof b || a.I(b) ? function (a) {
            return a === b;
          } : b;this.ia();
          for (var e = c.length - 1; 0 <= e; e--) {
            d(c[e]) && (c[e]._destroy = !0);
          }this.ha();
        }, destroyAll: function destroyAll(b) {
          return b === n ? this.destroy(function () {
            return !0;
          }) : b ? this.destroy(function (c) {
            return 0 <= a.a.o(b, c);
          }) : [];
        }, indexOf: function indexOf(b) {
          var c = this();return a.a.o(c, b);
        }, replace: function replace(a, c) {
          var d = this.indexOf(a);0 <= d && (this.ia(), this.p()[d] = c, this.ha());
        } };a.a.la && a.a.$a(a.ma.fn, a.O.fn);a.a.r("pop push reverse shift sort splice unshift".split(" "), function (b) {
        a.ma.fn[b] = function () {
          var a = this.p();this.ia();this.Yb(a, b, arguments);
          var d = a[b].apply(a, arguments);this.ha();return d === a ? this : d;
        };
      });a.a.r(["slice"], function (b) {
        a.ma.fn[b] = function () {
          var a = this();return a[b].apply(a, arguments);
        };
      });a.b("observableArray", a.ma);a.Aa.trackArrayChanges = function (b, c) {
        function d() {
          if (!e) {
            e = !0;l = b.notifySubscribers;b.notifySubscribers = function (a, b) {
              b && b !== E || ++h;return l.apply(this, arguments);
            };var c = [].concat(b.p() || []);f = null;g = b.Y(function (d) {
              d = [].concat(d || []);if (b.Ra("arrayChange")) {
                var e;if (!f || 1 < h) f = a.a.lb(c, d, b.kb);e = f;
              }c = d;f = null;h = 0;
              e && e.length && b.notifySubscribers(e, "arrayChange");
            });
          }
        }b.kb = {};c && "object" == (typeof c === "undefined" ? "undefined" : _typeof(c)) && a.a.extend(b.kb, c);b.kb.sparse = !0;if (!b.Yb) {
          var e = !1,
              f = null,
              g,
              h = 0,
              l,
              m = b.ua,
              k = b.Ka;b.ua = function (a) {
            m && m.call(b, a);"arrayChange" === a && d();
          };b.Ka = function (a) {
            k && k.call(b, a);"arrayChange" !== a || b.Ra("arrayChange") || (l && (b.notifySubscribers = l, l = n), g.k(), e = !1);
          };b.Yb = function (b, c, d) {
            function k(a, b, c) {
              return m[m.length] = { status: a, value: b, index: c };
            }if (e && !h) {
              var m = [],
                  l = b.length,
                  g = d.length,
                  G = 0;switch (c) {case "push":
                  G = l;case "unshift":
                  for (c = 0; c < g; c++) {
                    k("added", d[c], G + c);
                  }break;case "pop":
                  G = l - 1;case "shift":
                  l && k("deleted", b[G], G);break;case "splice":
                  c = Math.min(Math.max(0, 0 > d[0] ? l + d[0] : d[0]), l);for (var l = 1 === g ? l : Math.min(c + (d[1] || 0), l), g = c + g - 2, G = Math.max(l, g), n = [], s = [], w = 2; c < G; ++c, ++w) {
                    c < l && s.push(k("deleted", b[c], c)), c < g && n.push(k("added", d[w], c));
                  }a.a.hc(s, n);break;default:
                  return;}f = m;
            }
          };
        }
      };var s = a.a.bc("_state");a.m = a.B = function (b, c, d) {
        function e() {
          if (0 < arguments.length) {
            if ("function" === typeof f) f.apply(g.sb, arguments);else throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");
            return this;
          }a.l.sc(e);(g.V || g.t && e.Sa()) && e.U();return g.M;
        }"object" === (typeof b === "undefined" ? "undefined" : _typeof(b)) ? d = b : (d = d || {}, b && (d.read = b));if ("function" != typeof d.read) throw Error("Pass a function that returns the value of the ko.computed");var f = d.write,
            g = { M: n, da: !0, V: !0, Ta: !1, Hb: !1, T: !1, Ya: !1, t: !1, od: d.read, sb: c || d.owner, i: d.disposeWhenNodeIsRemoved || d.i || null, ya: d.disposeWhen || d.ya, pb: null, s: {}, L: 0, fc: null };e[s] = g;e.$c = "function" === typeof f;a.a.la || a.a.extend(e, a.K.fn);a.K.fn.ub(e);a.a.ab(e, z);d.pure ? (g.Ya = !0, g.t = !0, a.a.extend(e, Y)) : d.deferEvaluation && a.a.extend(e, Z);a.options.deferUpdates && a.Aa.deferred(e, !0);g.i && (g.Hb = !0, g.i.nodeType || (g.i = null));g.t || d.deferEvaluation || e.U();g.i && e.ca() && a.a.G.qa(g.i, g.pb = function () {
          e.k();
        });return e;
      };var z = { equalityComparer: J, Ca: function Ca() {
          return this[s].L;
        }, Sb: function Sb(a, c, d) {
          if (this[s].Ya && c === this) throw Error("A 'pure' computed must not be called recursively");this[s].s[a] = d;d.Ia = this[s].L++;d.pa = c.Pa();
        }, Sa: function Sa() {
          var a,
              c,
              d = this[s].s;for (a in d) {
            if (d.hasOwnProperty(a) && (c = d[a], this.oa && c.$.Ha || c.$.Zc(c.pa))) return !0;
          }
        }, gd: function gd() {
          this.oa && !this[s].Ta && this.oa(!1);
        }, ca: function ca() {
          var a = this[s];return a.V || 0 < a.L;
        }, qd: function qd() {
          this.Ha ? this[s].V && (this[s].da = !0) : this.ec();
        }, yc: function yc(a) {
          if (a.gb && !this[s].i) {
            var c = a.Y(this.gd, this, "dirty"),
                d = a.Y(this.qd, this);return { $: a, k: function k() {
                c.k();d.k();
              } };
          }return a.Y(this.ec, this);
        }, ec: function ec() {
          var b = this,
              c = b.throttleEvaluation;c && 0 <= c ? (clearTimeout(this[s].fc), this[s].fc = a.a.setTimeout(function () {
            b.U(!0);
          }, c)) : b.oa ? b.oa(!0) : b.U(!0);
        }, U: function U(b) {
          var c = this[s],
              d = c.ya,
              e = !1;if (!c.Ta && !c.T) {
            if (c.i && !a.a.qb(c.i) || d && d()) {
              if (!c.Hb) {
                this.k();return;
              }
            } else c.Hb = !1;c.Ta = !0;try {
              e = this.Vc(b);
            } finally {
              c.Ta = !1;
            }c.L || this.k();return e;
          }
        }, Vc: function Vc(b) {
          var c = this[s],
              d = !1,
              e = c.Ya ? n : !c.L,
              f = { Mc: this, Oa: c.s, ob: c.L };a.l.Xb({ Lc: f, jb: W, m: this, Va: e });c.s = {};c.L = 0;f = this.Uc(c, f);this.Ua(c.M, f) && (c.t || this.notifySubscribers(c.M, "beforeChange"), c.M = f, c.t ? this.Kb() : b && this.notifySubscribers(c.M), d = !0);e && this.notifySubscribers(c.M, "awake");return d;
        }, Uc: function Uc(b, c) {
          try {
            var d = b.od;return b.sb ? d.call(b.sb) : d();
          } finally {
            a.l.end(), c.ob && !b.t && a.a.D(c.Oa, V), b.da = b.V = !1;
          }
        }, p: function p(a) {
          var c = this[s];(c.V && (a || !c.L) || c.t && this.Sa()) && this.U();return c.M;
        }, Wa: function Wa(b) {
          a.K.fn.Wa.call(this, b);this.Mb = function () {
            this[s].da ? this.U() : this[s].V = !1;return this[s].M;
          };this.oa = function (a) {
            this.Ob(this[s].M);this[s].V = !0;a && (this[s].da = !0);this.Pb(this);
          };
        }, k: function k() {
          var b = this[s];!b.t && b.s && a.a.D(b.s, function (a, b) {
            b.k && b.k();
          });b.i && b.pb && a.a.G.tc(b.i, b.pb);b.s = null;b.L = 0;b.T = !0;b.da = !1;b.V = !1;b.t = !1;b.i = null;
        } },
          Y = { ua: function ua(b) {
          var c = this,
              d = c[s];if (!d.T && d.t && "change" == b) {
            d.t = !1;if (d.da || c.Sa()) d.s = null, d.L = 0, c.U() && c.Kb();else {
              var e = [];a.a.D(d.s, function (a, b) {
                e[b.Ia] = a;
              });a.a.r(e, function (a, b) {
                var e = d.s[a],
                    l = c.yc(e.$);l.Ia = b;l.pa = e.pa;d.s[a] = l;
              });
            }d.T || c.notifySubscribers(d.M, "awake");
          }
        }, Ka: function Ka(b) {
          var c = this[s];c.T || "change" != b || this.Ra("change") || (a.a.D(c.s, function (a, b) {
            b.k && (c.s[a] = { $: b.$, Ia: b.Ia, pa: b.pa }, b.k());
          }), c.t = !0, this.notifySubscribers(n, "asleep"));
        }, Pa: function Pa() {
          var b = this[s];b.t && (b.da || this.Sa()) && this.U();return a.K.fn.Pa.call(this);
        } },
          Z = { ua: function ua(a) {
          "change" != a && "beforeChange" != a || this.p();
        } };a.a.la && a.a.$a(z, a.K.fn);var P = a.O.md;a.m[P] = a.O;z[P] = a.m;a.bd = function (b) {
        return a.Qa(b, a.m);
      };a.cd = function (b) {
        return a.Qa(b, a.m) && b[s] && b[s].Ya;
      };a.b("computed", a.m);a.b("dependentObservable", a.m);a.b("isComputed", a.bd);a.b("isPureComputed", a.cd);a.b("computed.fn", z);a.H(z, "peek", z.p);a.H(z, "dispose", z.k);a.H(z, "isActive", z.ca);a.H(z, "getDependenciesCount", z.Ca);a.rc = function (b, c) {
        if ("function" === typeof b) return a.m(b, c, { pure: !0 });b = a.a.extend({}, b);b.pure = !0;return a.m(b, c);
      };a.b("pureComputed", a.rc);(function () {
        function b(a, f, g) {
          g = g || new d();a = f(a);if ("object" != (typeof a === "undefined" ? "undefined" : _typeof(a)) || null === a || a === n || a instanceof RegExp || a instanceof Date || a instanceof String || a instanceof Number || a instanceof Boolean) return a;var h = a instanceof Array ? [] : {};g.save(a, h);c(a, function (c) {
            var d = f(a[c]);switch (typeof d === "undefined" ? "undefined" : _typeof(d)) {case "boolean":case "number":case "string":case "function":
                h[c] = d;break;case "object":case "undefined":
                var k = g.get(d);h[c] = k !== n ? k : b(d, f, g);}
          });return h;
        }function c(a, b) {
          if (a instanceof Array) {
            for (var c = 0; c < a.length; c++) {
              b(c);
            }"function" == typeof a.toJSON && b("toJSON");
          } else for (c in a) {
            b(c);
          }
        }function d() {
          this.keys = [];this.Lb = [];
        }a.Ac = function (c) {
          if (0 == arguments.length) throw Error("When calling ko.toJS, pass the object you want to convert.");return b(c, function (b) {
            for (var c = 0; a.I(b) && 10 > c; c++) {
              b = b();
            }return b;
          });
        };a.toJSON = function (b, c, d) {
          b = a.Ac(b);return a.a.Gb(b, c, d);
        };d.prototype = { save: function save(b, c) {
            var d = a.a.o(this.keys, b);0 <= d ? this.Lb[d] = c : (this.keys.push(b), this.Lb.push(c));
          }, get: function get(b) {
            b = a.a.o(this.keys, b);return 0 <= b ? this.Lb[b] : n;
          } };
      })();a.b("toJS", a.Ac);a.b("toJSON", a.toJSON);(function () {
        a.j = { u: function u(b) {
            switch (a.a.A(b)) {case "option":
                return !0 === b.__ko__hasDomDataOptionValue__ ? a.a.e.get(b, a.d.options.zb) : 7 >= a.a.C ? b.getAttributeNode("value") && b.getAttributeNode("value").specified ? b.value : b.text : b.value;case "select":
                return 0 <= b.selectedIndex ? a.j.u(b.options[b.selectedIndex]) : n;default:
                return b.value;}
          }, ja: function ja(b, c, d) {
            switch (a.a.A(b)) {case "option":
                switch (typeof c === "undefined" ? "undefined" : _typeof(c)) {case "string":
                    a.a.e.set(b, a.d.options.zb, n);"__ko__hasDomDataOptionValue__" in b && delete b.__ko__hasDomDataOptionValue__;b.value = c;break;default:
                    a.a.e.set(b, a.d.options.zb, c), b.__ko__hasDomDataOptionValue__ = !0, b.value = "number" === typeof c ? c : "";}break;case "select":
                if ("" === c || null === c) c = n;for (var e = -1, f = 0, g = b.options.length, h; f < g; ++f) {
                  if (h = a.j.u(b.options[f]), h == c || "" == h && c === n) {
                    e = f;break;
                  }
                }if (d || 0 <= e || c === n && 1 < b.size) b.selectedIndex = e;break;default:
                if (null === c || c === n) c = "";b.value = c;}
          } };
      })();a.b("selectExtensions", a.j);a.b("selectExtensions.readValue", a.j.u);a.b("selectExtensions.writeValue", a.j.ja);a.h = function () {
        function b(b) {
          b = a.a.cb(b);123 === b.charCodeAt(0) && (b = b.slice(1, -1));var c = [],
              d = b.match(e),
              r,
              h = [],
              p = 0;if (d) {
            d.push(",");for (var A = 0, y; y = d[A]; ++A) {
              var v = y.charCodeAt(0);if (44 === v) {
                if (0 >= p) {
                  c.push(r && h.length ? { key: r, value: h.join("") } : { unknown: r || h.join("") });r = p = 0;h = [];continue;
                }
              } else if (58 === v) {
                if (!p && !r && 1 === h.length) {
                  r = h.pop();continue;
                }
              } else 47 === v && A && 1 < y.length ? (v = d[A - 1].match(f)) && !g[v[0]] && (b = b.substr(b.indexOf(y) + 1), d = b.match(e), d.push(","), A = -1, y = "/") : 40 === v || 123 === v || 91 === v ? ++p : 41 === v || 125 === v || 93 === v ? --p : r || h.length || 34 !== v && 39 !== v || (y = y.slice(1, -1));h.push(y);
            }
          }return c;
        }var c = ["true", "false", "null", "undefined"],
            d = /^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,
            e = RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]", "g"),
            f = /[\])"'A-Za-z0-9_$]+$/,
            g = { "in": 1, "return": 1, "typeof": 1 },
            h = {};return { va: [], ga: h, Ab: b, Xa: function Xa(e, m) {
            function k(b, e) {
              var m;if (!A) {
                var l = a.getBindingHandler(b);if (l && l.preprocess && !(e = l.preprocess(e, b, k))) return;if (l = h[b]) m = e, 0 <= a.a.o(c, m) ? m = !1 : (l = m.match(d), m = null === l ? !1 : l[1] ? "Object(" + l[1] + ")" + l[2] : m), l = m;l && g.push("'" + b + "':function(_z){" + m + "=_z}");
              }p && (e = "function(){return " + e + " }");f.push("'" + b + "':" + e);
            }m = m || {};var f = [],
                g = [],
                p = m.valueAccessors,
                A = m.bindingParams,
                y = "string" === typeof e ? b(e) : e;a.a.r(y, function (a) {
              k(a.key || a.unknown, a.value);
            });g.length && k("_ko_property_writers", "{" + g.join(",") + " }");return f.join(",");
          }, fd: function fd(a, b) {
            for (var c = 0; c < a.length; c++) {
              if (a[c].key == b) return !0;
            }return !1;
          }, Ga: function Ga(b, c, d, e, f) {
            if (b && a.I(b)) !a.Da(b) || f && b.p() === e || b(e);else if ((b = c.get("_ko_property_writers")) && b[d]) b[d](e);
          } };
      }();a.b("expressionRewriting", a.h);a.b("expressionRewriting.bindingRewriteValidators", a.h.va);a.b("expressionRewriting.parseObjectLiteral", a.h.Ab);a.b("expressionRewriting.preProcessBindings", a.h.Xa);a.b("expressionRewriting._twoWayBindings", a.h.ga);a.b("jsonExpressionRewriting", a.h);a.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson", a.h.Xa);(function () {
        function b(a) {
          return 8 == a.nodeType && g.test(f ? a.text : a.nodeValue);
        }function c(a) {
          return 8 == a.nodeType && h.test(f ? a.text : a.nodeValue);
        }function d(a, d) {
          for (var e = a, f = 1, l = []; e = e.nextSibling;) {
            if (c(e) && (f--, 0 === f)) return l;l.push(e);b(e) && f++;
          }if (!d) throw Error("Cannot find closing comment tag to match: " + a.nodeValue);return null;
        }function e(a, b) {
          var c = d(a, b);return c ? 0 < c.length ? c[c.length - 1].nextSibling : a.nextSibling : null;
        }var f = t && "\x3c!--test--\x3e" === t.createComment("test").text,
            g = f ? /^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/ : /^\s*ko(?:\s+([\s\S]+))?\s*$/,
            h = f ? /^\x3c!--\s*\/ko\s*--\x3e$/ : /^\s*\/ko\s*$/,
            l = { ul: !0, ol: !0 };a.f = { aa: {}, childNodes: function childNodes(a) {
            return b(a) ? d(a) : a.childNodes;
          }, za: function za(c) {
            if (b(c)) {
              c = a.f.childNodes(c);for (var d = 0, e = c.length; d < e; d++) {
                a.removeNode(c[d]);
              }
            } else a.a.rb(c);
          }, fa: function fa(c, d) {
            if (b(c)) {
              a.f.za(c);for (var e = c.nextSibling, f = 0, l = d.length; f < l; f++) {
                e.parentNode.insertBefore(d[f], e);
              }
            } else a.a.fa(c, d);
          }, qc: function qc(a, c) {
            b(a) ? a.parentNode.insertBefore(c, a.nextSibling) : a.firstChild ? a.insertBefore(c, a.firstChild) : a.appendChild(c);
          }, kc: function kc(c, d, e) {
            e ? b(c) ? c.parentNode.insertBefore(d, e.nextSibling) : e.nextSibling ? c.insertBefore(d, e.nextSibling) : c.appendChild(d) : a.f.qc(c, d);
          }, firstChild: function firstChild(a) {
            return b(a) ? !a.nextSibling || c(a.nextSibling) ? null : a.nextSibling : a.firstChild;
          }, nextSibling: function nextSibling(a) {
            b(a) && (a = e(a));return a.nextSibling && c(a.nextSibling) ? null : a.nextSibling;
          }, Yc: b, vd: function vd(a) {
            return (a = (f ? a.text : a.nodeValue).match(g)) ? a[1] : null;
          }, oc: function oc(d) {
            if (l[a.a.A(d)]) {
              var k = d.firstChild;if (k) {
                do {
                  if (1 === k.nodeType) {
                    var f;f = k.firstChild;var g = null;if (f) {
                      do {
                        if (g) g.push(f);else if (b(f)) {
                          var h = e(f, !0);h ? f = h : g = [f];
                        } else c(f) && (g = [f]);
                      } while (f = f.nextSibling);
                    }if (f = g) for (g = k.nextSibling, h = 0; h < f.length; h++) {
                      g ? d.insertBefore(f[h], g) : d.appendChild(f[h]);
                    }
                  }
                } while (k = k.nextSibling);
              }
            }
          } };
      })();a.b("virtualElements", a.f);a.b("virtualElements.allowedBindings", a.f.aa);a.b("virtualElements.emptyNode", a.f.za);a.b("virtualElements.insertAfter", a.f.kc);a.b("virtualElements.prepend", a.f.qc);a.b("virtualElements.setDomNodeChildren", a.f.fa);(function () {
        a.S = function () {
          this.Kc = {};
        };a.a.extend(a.S.prototype, { nodeHasBindings: function nodeHasBindings(b) {
            switch (b.nodeType) {case 1:
                return null != b.getAttribute("data-bind") || a.g.getComponentNameForNode(b);case 8:
                return a.f.Yc(b);default:
                return !1;}
          }, getBindings: function getBindings(b, c) {
            var d = this.getBindingsString(b, c),
                d = d ? this.parseBindingsString(d, c, b) : null;return a.g.Rb(d, b, c, !1);
          }, getBindingAccessors: function getBindingAccessors(b, c) {
            var d = this.getBindingsString(b, c),
                d = d ? this.parseBindingsString(d, c, b, { valueAccessors: !0 }) : null;return a.g.Rb(d, b, c, !0);
          }, getBindingsString: function getBindingsString(b) {
            switch (b.nodeType) {case 1:
                return b.getAttribute("data-bind");case 8:
                return a.f.vd(b);default:
                return null;}
          }, parseBindingsString: function parseBindingsString(b, c, d, e) {
            try {
              var f = this.Kc,
                  g = b + (e && e.valueAccessors || ""),
                  h;if (!(h = f[g])) {
                var l,
                    m = "with($context){with($data||{}){return{" + a.h.Xa(b, e) + "}}}";l = new Function("$context", "$element", m);h = f[g] = l;
              }return h(c, d);
            } catch (k) {
              throw k.message = "Unable to parse bindings.\nBindings value: " + b + "\nMessage: " + k.message, k;
            }
          } });a.S.instance = new a.S();
      })();a.b("bindingProvider", a.S);(function () {
        function b(a) {
          return function () {
            return a;
          };
        }function c(a) {
          return a();
        }function d(b) {
          return a.a.Ea(a.l.w(b), function (a, c) {
            return function () {
              return b()[c];
            };
          });
        }function e(c, e, k) {
          return "function" === typeof c ? d(c.bind(null, e, k)) : a.a.Ea(c, b);
        }function f(a, b) {
          return d(this.getBindings.bind(this, a, b));
        }function g(b, c, d) {
          var e,
              k = a.f.firstChild(c),
              f = a.S.instance,
              m = f.preprocessNode;if (m) {
            for (; e = k;) {
              k = a.f.nextSibling(e), m.call(f, e);
            }k = a.f.firstChild(c);
          }for (; e = k;) {
            k = a.f.nextSibling(e), h(b, e, d);
          }
        }function h(b, c, d) {
          var e = !0,
              k = 1 === c.nodeType;k && a.f.oc(c);if (k && d || a.S.instance.nodeHasBindings(c)) e = m(c, null, b, d).shouldBindDescendants;e && !r[a.a.A(c)] && g(b, c, !k);
        }function l(b) {
          var c = [],
              d = {},
              e = [];a.a.D(b, function X(k) {
            if (!d[k]) {
              var f = a.getBindingHandler(k);f && (f.after && (e.push(k), a.a.r(f.after, function (c) {
                if (b[c]) {
                  if (-1 !== a.a.o(e, c)) throw Error("Cannot combine the following bindings, because they have a cyclic dependency: " + e.join(", "));
                  X(c);
                }
              }), e.length--), c.push({ key: k, jc: f }));d[k] = !0;
            }
          });return c;
        }function m(b, d, e, k) {
          var m = a.a.e.get(b, q);if (!d) {
            if (m) throw Error("You cannot apply bindings multiple times to the same element.");a.a.e.set(b, q, !0);
          }!m && k && a.xc(b, e);var g;if (d && "function" !== typeof d) g = d;else {
            var h = a.S.instance,
                r = h.getBindingAccessors || f,
                p = a.B(function () {
              (g = d ? d(e, b) : r.call(h, b, e)) && e.Q && e.Q();return g;
            }, null, { i: b });g && p.ca() || (p = null);
          }var s;if (g) {
            var t = p ? function (a) {
              return function () {
                return c(p()[a]);
              };
            } : function (a) {
              return g[a];
            },
                u = function u() {
              return a.a.Ea(p ? p() : g, c);
            };u.get = function (a) {
              return g[a] && c(t(a));
            };u.has = function (a) {
              return a in g;
            };k = l(g);a.a.r(k, function (c) {
              var d = c.jc.init,
                  k = c.jc.update,
                  f = c.key;if (8 === b.nodeType && !a.f.aa[f]) throw Error("The binding '" + f + "' cannot be used with virtual elements");try {
                "function" == typeof d && a.l.w(function () {
                  var a = d(b, t(f), u, e.$data, e);if (a && a.controlsDescendantBindings) {
                    if (s !== n) throw Error("Multiple bindings (" + s + " and " + f + ") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");
                    s = f;
                  }
                }), "function" == typeof k && a.B(function () {
                  k(b, t(f), u, e.$data, e);
                }, null, { i: b });
              } catch (m) {
                throw m.message = 'Unable to process binding "' + f + ": " + g[f] + '"\nMessage: ' + m.message, m;
              }
            });
          }return { shouldBindDescendants: s === n };
        }function k(b) {
          return b && b instanceof a.R ? b : new a.R(b);
        }a.d = {};var r = { script: !0, textarea: !0, template: !0 };a.getBindingHandler = function (b) {
          return a.d[b];
        };a.R = function (b, c, d, e, k) {
          function f() {
            var k = g ? b() : b,
                m = a.a.c(k);c ? (c.Q && c.Q(), a.a.extend(l, c), l.Q = r) : (l.$parents = [], l.$root = m, l.ko = a);l.$rawData = k;l.$data = m;d && (l[d] = m);e && e(l, c, m);return l.$data;
          }function m() {
            return h && !a.a.Tb(h);
          }var l = this,
              g = "function" == typeof b && !a.I(b),
              h,
              r;k && k.exportDependencies ? f() : (r = a.B(f, null, { ya: m, i: !0 }), r.ca() && (l.Q = r, r.equalityComparer = null, h = [], r.Dc = function (b) {
            h.push(b);a.a.G.qa(b, function (b) {
              a.a.Na(h, b);h.length || (r.k(), l.Q = r = n);
            });
          }));
        };a.R.prototype.createChildContext = function (b, c, d, e) {
          return new a.R(b, this, c, function (a, b) {
            a.$parentContext = b;a.$parent = b.$data;a.$parents = (b.$parents || []).slice(0);a.$parents.unshift(a.$parent);
            d && d(a);
          }, e);
        };a.R.prototype.extend = function (b) {
          return new a.R(this.Q || this.$data, this, null, function (c, d) {
            c.$rawData = d.$rawData;a.a.extend(c, "function" == typeof b ? b() : b);
          });
        };a.R.prototype.ac = function (a, b) {
          return this.createChildContext(a, b, null, { exportDependencies: !0 });
        };var q = a.a.e.J(),
            p = a.a.e.J();a.xc = function (b, c) {
          if (2 == arguments.length) a.a.e.set(b, p, c), c.Q && c.Q.Dc(b);else return a.a.e.get(b, p);
        };a.La = function (b, c, d) {
          1 === b.nodeType && a.f.oc(b);return m(b, c, k(d), !0);
        };a.Ic = function (b, c, d) {
          d = k(d);return a.La(b, e(c, d, b), d);
        };a.hb = function (a, b) {
          1 !== b.nodeType && 8 !== b.nodeType || g(k(a), b, !0);
        };a.Ub = function (a, b) {
          !u && x.jQuery && (u = x.jQuery);if (b && 1 !== b.nodeType && 8 !== b.nodeType) throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");b = b || x.document.body;h(k(a), b, !0);
        };a.nb = function (b) {
          switch (b.nodeType) {case 1:case 8:
              var c = a.xc(b);if (c) return c;if (b.parentNode) return a.nb(b.parentNode);}return n;
        };a.Oc = function (b) {
          return (b = a.nb(b)) ? b.$data : n;
        };a.b("bindingHandlers", a.d);a.b("applyBindings", a.Ub);a.b("applyBindingsToDescendants", a.hb);a.b("applyBindingAccessorsToNode", a.La);a.b("applyBindingsToNode", a.Ic);a.b("contextFor", a.nb);a.b("dataFor", a.Oc);
      })();(function (b) {
        function c(c, e) {
          var m = f.hasOwnProperty(c) ? f[c] : b,
              k;m ? m.Y(e) : (m = f[c] = new a.K(), m.Y(e), d(c, function (b, d) {
            var e = !(!d || !d.synchronous);g[c] = { definition: b, dd: e };delete f[c];k || e ? m.notifySubscribers(b) : a.Z.Za(function () {
              m.notifySubscribers(b);
            });
          }), k = !0);
        }function d(a, b) {
          e("getConfig", [a], function (c) {
            c ? e("loadComponent", [a, c], function (a) {
              b(a, c);
            }) : b(null, null);
          });
        }function e(c, d, f, k) {
          k || (k = a.g.loaders.slice(0));var g = k.shift();if (g) {
            var q = g[c];if (q) {
              var p = !1;if (q.apply(g, d.concat(function (a) {
                p ? f(null) : null !== a ? f(a) : e(c, d, f, k);
              })) !== b && (p = !0, !g.suppressLoaderExceptions)) throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.");
            } else e(c, d, f, k);
          } else f(null);
        }var f = {},
            g = {};a.g = { get: function get(d, e) {
            var f = g.hasOwnProperty(d) ? g[d] : b;f ? f.dd ? a.l.w(function () {
              e(f.definition);
            }) : a.Z.Za(function () {
              e(f.definition);
            }) : c(d, e);
          }, $b: function $b(a) {
            delete g[a];
          }, Nb: e };a.g.loaders = [];a.b("components", a.g);a.b("components.get", a.g.get);a.b("components.clearCachedDefinition", a.g.$b);
      })();(function () {
        function b(b, c, d, e) {
          function g() {
            0 === --y && e(h);
          }var h = {},
              y = 2,
              v = d.template;d = d.viewModel;v ? f(c, v, function (c) {
            a.g.Nb("loadTemplate", [b, c], function (a) {
              h.template = a;g();
            });
          }) : g();d ? f(c, d, function (c) {
            a.g.Nb("loadViewModel", [b, c], function (a) {
              h[l] = a;g();
            });
          }) : g();
        }function c(a, b, d) {
          if ("function" === typeof b) d(function (a) {
            return new b(a);
          });else if ("function" === typeof b[l]) d(b[l]);else if ("instance" in b) {
            var e = b.instance;d(function () {
              return e;
            });
          } else "viewModel" in b ? c(a, b.viewModel, d) : a("Unknown viewModel value: " + b);
        }function d(b) {
          switch (a.a.A(b)) {case "script":
              return a.a.na(b.text);case "textarea":
              return a.a.na(b.value);case "template":
              if (e(b.content)) return a.a.wa(b.content.childNodes);}return a.a.wa(b.childNodes);
        }function e(a) {
          return x.DocumentFragment ? a instanceof DocumentFragment : a && 11 === a.nodeType;
        }function f(a, b, c) {
          "string" === typeof b.require ? O || x.require ? (O || x.require)([b.require], c) : a("Uses require, but no AMD loader is present") : c(b);
        }function g(a) {
          return function (b) {
            throw Error("Component '" + a + "': " + b);
          };
        }var h = {};a.g.register = function (b, c) {
          if (!c) throw Error("Invalid configuration for " + b);if (a.g.wb(b)) throw Error("Component " + b + " is already registered");h[b] = c;
        };a.g.wb = function (a) {
          return h.hasOwnProperty(a);
        };a.g.ud = function (b) {
          delete h[b];a.g.$b(b);
        };a.g.cc = { getConfig: function getConfig(a, b) {
            b(h.hasOwnProperty(a) ? h[a] : null);
          }, loadComponent: function loadComponent(a, c, d) {
            var e = g(a);f(e, c, function (c) {
              b(a, e, c, d);
            });
          }, loadTemplate: function loadTemplate(b, c, f) {
            b = g(b);if ("string" === typeof c) f(a.a.na(c));else if (c instanceof Array) f(c);else if (e(c)) f(a.a.W(c.childNodes));else if (c.element) {
              if (c = c.element, x.HTMLElement ? c instanceof HTMLElement : c && c.tagName && 1 === c.nodeType) f(d(c));else if ("string" === typeof c) {
                var l = t.getElementById(c);l ? f(d(l)) : b("Cannot find element with ID " + c);
              } else b("Unknown element type: " + c);
            } else b("Unknown template value: " + c);
          }, loadViewModel: function loadViewModel(a, b, d) {
            c(g(a), b, d);
          } };var l = "createViewModel";a.b("components.register", a.g.register);a.b("components.isRegistered", a.g.wb);a.b("components.unregister", a.g.ud);a.b("components.defaultLoader", a.g.cc);a.g.loaders.push(a.g.cc);a.g.Ec = h;
      })();(function () {
        function b(b, e) {
          var f = b.getAttribute("params");if (f) {
            var f = c.parseBindingsString(f, e, b, { valueAccessors: !0, bindingParams: !0 }),
                f = a.a.Ea(f, function (c) {
              return a.m(c, null, { i: b });
            }),
                g = a.a.Ea(f, function (c) {
              var e = c.p();return c.ca() ? a.m({ read: function read() {
                  return a.a.c(c());
                }, write: a.Da(e) && function (a) {
                  c()(a);
                }, i: b }) : e;
            });g.hasOwnProperty("$raw") || (g.$raw = f);return g;
          }return { $raw: {} };
        }a.g.getComponentNameForNode = function (b) {
          var c = a.a.A(b);if (a.g.wb(c) && (-1 != c.indexOf("-") || "[object HTMLUnknownElement]" == "" + b || 8 >= a.a.C && b.tagName === c)) return c;
        };a.g.Rb = function (c, e, f, g) {
          if (1 === e.nodeType) {
            var h = a.g.getComponentNameForNode(e);if (h) {
              c = c || {};if (c.component) throw Error('Cannot use the "component" binding on a custom element matching a component');var l = { name: h, params: b(e, f) };c.component = g ? function () {
                return l;
              } : l;
            }
          }return c;
        };var c = new a.S();9 > a.a.C && (a.g.register = function (a) {
          return function (b) {
            t.createElement(b);return a.apply(this, arguments);
          };
        }(a.g.register), t.createDocumentFragment = function (b) {
          return function () {
            var c = b(),
                f = a.g.Ec,
                g;for (g in f) {
              f.hasOwnProperty(g) && c.createElement(g);
            }return c;
          };
        }(t.createDocumentFragment));
      })();(function (b) {
        function c(b, c, d) {
          c = c.template;if (!c) throw Error("Component '" + b + "' has no template");b = a.a.wa(c);a.f.fa(d, b);
        }function d(a, b, c, d) {
          var e = a.createViewModel;return e ? e.call(a, d, { element: b, templateNodes: c }) : d;
        }var e = 0;a.d.component = { init: function init(f, g, h, l, m) {
            function k() {
              var a = r && r.dispose;"function" === typeof a && a.call(r);q = r = null;
            }var r,
                q,
                p = a.a.W(a.f.childNodes(f));a.a.G.qa(f, k);a.m(function () {
              var l = a.a.c(g()),
                  h,
                  v;"string" === typeof l ? h = l : (h = a.a.c(l.name), v = a.a.c(l.params));if (!h) throw Error("No component name specified");var n = q = ++e;a.g.get(h, function (e) {
                if (q === n) {
                  k();if (!e) throw Error("Unknown component '" + h + "'");c(h, e, f);var l = d(e, f, p, v);e = m.createChildContext(l, b, function (a) {
                    a.$component = l;a.$componentTemplateNodes = p;
                  });r = l;a.hb(e, f);
                }
              });
            }, null, { i: f });return { controlsDescendantBindings: !0 };
          } };a.f.aa.component = !0;
      })();var Q = { "class": "className", "for": "htmlFor" };a.d.attr = { update: function update(b, c) {
          var d = a.a.c(c()) || {};a.a.D(d, function (c, d) {
            d = a.a.c(d);var g = !1 === d || null === d || d === n;g && b.removeAttribute(c);8 >= a.a.C && c in Q ? (c = Q[c], g ? b.removeAttribute(c) : b[c] = d) : g || b.setAttribute(c, d.toString());"name" === c && a.a.vc(b, g ? "" : d.toString());
          });
        } };(function () {
        a.d.checked = { after: ["value", "attr"], init: function init(b, c, d) {
            function e() {
              var e = b.checked,
                  f = p ? g() : e;if (!a.xa.Va() && (!l || e)) {
                var h = a.l.w(c);if (k) {
                  var m = r ? h.p() : h;q !== f ? (e && (a.a.ra(m, f, !0), a.a.ra(m, q, !1)), q = f) : a.a.ra(m, f, e);r && a.Da(h) && h(m);
                } else a.h.Ga(h, d, "checked", f, !0);
              }
            }function f() {
              var d = a.a.c(c());b.checked = k ? 0 <= a.a.o(d, g()) : h ? d : g() === d;
            }var g = a.rc(function () {
              return d.has("checkedValue") ? a.a.c(d.get("checkedValue")) : d.has("value") ? a.a.c(d.get("value")) : b.value;
            }),
                h = "checkbox" == b.type,
                l = "radio" == b.type;if (h || l) {
              var m = c(),
                  k = h && a.a.c(m) instanceof Array,
                  r = !(k && m.push && m.splice),
                  q = k ? g() : n,
                  p = l || k;l && !b.name && a.d.uniqueName.init(b, function () {
                return !0;
              });a.m(e, null, { i: b });a.a.q(b, "click", e);a.m(f, null, { i: b });m = n;
            }
          } };a.h.ga.checked = !0;a.d.checkedValue = { update: function update(b, c) {
            b.value = a.a.c(c());
          } };
      })();a.d.css = { update: function update(b, c) {
          var d = a.a.c(c());null !== d && "object" == (typeof d === "undefined" ? "undefined" : _typeof(d)) ? a.a.D(d, function (c, d) {
            d = a.a.c(d);a.a.fb(b, c, d);
          }) : (d = a.a.cb(String(d || "")), a.a.fb(b, b.__ko__cssValue, !1), b.__ko__cssValue = d, a.a.fb(b, d, !0));
        } };a.d.enable = { update: function update(b, c) {
          var d = a.a.c(c());
          d && b.disabled ? b.removeAttribute("disabled") : d || b.disabled || (b.disabled = !0);
        } };a.d.disable = { update: function update(b, c) {
          a.d.enable.update(b, function () {
            return !a.a.c(c());
          });
        } };a.d.event = { init: function init(b, c, d, e, f) {
          var g = c() || {};a.a.D(g, function (g) {
            "string" == typeof g && a.a.q(b, g, function (b) {
              var m,
                  k = c()[g];if (k) {
                try {
                  var r = a.a.W(arguments);e = f.$data;r.unshift(e);m = k.apply(e, r);
                } finally {
                  !0 !== m && (b.preventDefault ? b.preventDefault() : b.returnValue = !1);
                }!1 === d.get(g + "Bubble") && (b.cancelBubble = !0, b.stopPropagation && b.stopPropagation());
              }
            });
          });
        } };
      a.d.foreach = { mc: function mc(b) {
          return function () {
            var c = b(),
                d = a.a.Bb(c);if (!d || "number" == typeof d.length) return { foreach: c, templateEngine: a.X.vb };a.a.c(c);return { foreach: d.data, as: d.as, includeDestroyed: d.includeDestroyed, afterAdd: d.afterAdd, beforeRemove: d.beforeRemove, afterRender: d.afterRender, beforeMove: d.beforeMove, afterMove: d.afterMove, templateEngine: a.X.vb };
          };
        }, init: function init(b, c) {
          return a.d.template.init(b, a.d.foreach.mc(c));
        }, update: function update(b, c, d, e, f) {
          return a.d.template.update(b, a.d.foreach.mc(c), d, e, f);
        } };a.h.va.foreach = !1;a.f.aa.foreach = !0;a.d.hasfocus = { init: function init(b, c, d) {
          function e(e) {
            b.__ko_hasfocusUpdating = !0;var f = b.ownerDocument;if ("activeElement" in f) {
              var g;try {
                g = f.activeElement;
              } catch (k) {
                g = f.body;
              }e = g === b;
            }f = c();a.h.Ga(f, d, "hasfocus", e, !0);b.__ko_hasfocusLastValue = e;b.__ko_hasfocusUpdating = !1;
          }var f = e.bind(null, !0),
              g = e.bind(null, !1);a.a.q(b, "focus", f);a.a.q(b, "focusin", f);a.a.q(b, "blur", g);a.a.q(b, "focusout", g);
        }, update: function update(b, c) {
          var d = !!a.a.c(c());b.__ko_hasfocusUpdating || b.__ko_hasfocusLastValue === d || (d ? b.focus() : b.blur(), !d && b.__ko_hasfocusLastValue && b.ownerDocument.body.focus(), a.l.w(a.a.Fa, null, [b, d ? "focusin" : "focusout"]));
        } };a.h.ga.hasfocus = !0;a.d.hasFocus = a.d.hasfocus;a.h.ga.hasFocus = !0;a.d.html = { init: function init() {
          return { controlsDescendantBindings: !0 };
        }, update: function update(b, c) {
          a.a.Eb(b, c());
        } };K("if");K("ifnot", !1, !0);K("with", !0, !1, function (a, c) {
        return a.ac(c);
      });var L = {};a.d.options = { init: function init(b) {
          if ("select" !== a.a.A(b)) throw Error("options binding applies only to SELECT elements");for (; 0 < b.length;) {
            b.remove(0);
          }return { controlsDescendantBindings: !0 };
        }, update: function update(b, c, d) {
          function e() {
            return a.a.Ma(b.options, function (a) {
              return a.selected;
            });
          }function f(a, b, c) {
            var d = typeof b === "undefined" ? "undefined" : _typeof(b);return "function" == d ? b(a) : "string" == d ? a[b] : c;
          }function g(c, e) {
            if (A && k) a.j.ja(b, a.a.c(d.get("value")), !0);else if (p.length) {
              var f = 0 <= a.a.o(p, a.j.u(e[0]));a.a.wc(e[0], f);A && !f && a.l.w(a.a.Fa, null, [b, "change"]);
            }
          }var h = b.multiple,
              l = 0 != b.length && h ? b.scrollTop : null,
              m = a.a.c(c()),
              k = d.get("valueAllowUnset") && d.has("value"),
              r = d.get("optionsIncludeDestroyed");c = {};var q,
              p = [];k || (h ? p = a.a.ib(e(), a.j.u) : 0 <= b.selectedIndex && p.push(a.j.u(b.options[b.selectedIndex])));m && ("undefined" == typeof m.length && (m = [m]), q = a.a.Ma(m, function (b) {
            return r || b === n || null === b || !a.a.c(b._destroy);
          }), d.has("optionsCaption") && (m = a.a.c(d.get("optionsCaption")), null !== m && m !== n && q.unshift(L)));var A = !1;c.beforeRemove = function (a) {
            b.removeChild(a);
          };m = g;d.has("optionsAfterRender") && "function" == typeof d.get("optionsAfterRender") && (m = function m(b, c) {
            g(0, c);
            a.l.w(d.get("optionsAfterRender"), null, [c[0], b !== L ? b : n]);
          });a.a.Db(b, q, function (c, e, g) {
            g.length && (p = !k && g[0].selected ? [a.j.u(g[0])] : [], A = !0);e = b.ownerDocument.createElement("option");c === L ? (a.a.bb(e, d.get("optionsCaption")), a.j.ja(e, n)) : (g = f(c, d.get("optionsValue"), c), a.j.ja(e, a.a.c(g)), c = f(c, d.get("optionsText"), g), a.a.bb(e, c));return [e];
          }, c, m);a.l.w(function () {
            k ? a.j.ja(b, a.a.c(d.get("value")), !0) : (h ? p.length && e().length < p.length : p.length && 0 <= b.selectedIndex ? a.j.u(b.options[b.selectedIndex]) !== p[0] : p.length || 0 <= b.selectedIndex) && a.a.Fa(b, "change");
          });a.a.Sc(b);l && 20 < Math.abs(l - b.scrollTop) && (b.scrollTop = l);
        } };a.d.options.zb = a.a.e.J();a.d.selectedOptions = { after: ["options", "foreach"], init: function init(b, c, d) {
          a.a.q(b, "change", function () {
            var e = c(),
                f = [];a.a.r(b.getElementsByTagName("option"), function (b) {
              b.selected && f.push(a.j.u(b));
            });a.h.Ga(e, d, "selectedOptions", f);
          });
        }, update: function update(b, c) {
          if ("select" != a.a.A(b)) throw Error("values binding applies only to SELECT elements");var d = a.a.c(c()),
              e = b.scrollTop;
          d && "number" == typeof d.length && a.a.r(b.getElementsByTagName("option"), function (b) {
            var c = 0 <= a.a.o(d, a.j.u(b));b.selected != c && a.a.wc(b, c);
          });b.scrollTop = e;
        } };a.h.ga.selectedOptions = !0;a.d.style = { update: function update(b, c) {
          var d = a.a.c(c() || {});a.a.D(d, function (c, d) {
            d = a.a.c(d);if (null === d || d === n || !1 === d) d = "";b.style[c] = d;
          });
        } };a.d.submit = { init: function init(b, c, d, e, f) {
          if ("function" != typeof c()) throw Error("The value for a submit binding must be a function");a.a.q(b, "submit", function (a) {
            var d,
                e = c();try {
              d = e.call(f.$data, b);
            } finally {
              !0 !== d && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);
            }
          });
        } };a.d.text = { init: function init() {
          return { controlsDescendantBindings: !0 };
        }, update: function update(b, c) {
          a.a.bb(b, c());
        } };a.f.aa.text = !0;(function () {
        if (x && x.navigator) var b = function b(a) {
          if (a) return parseFloat(a[1]);
        },
            c = x.opera && x.opera.version && parseInt(x.opera.version()),
            d = x.navigator.userAgent,
            e = b(d.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),
            f = b(d.match(/Firefox\/([^ ]*)/));if (10 > a.a.C) var g = a.a.e.J(),
            h = a.a.e.J(),
            l = function l(b) {
          var c = this.activeElement;(c = c && a.a.e.get(c, h)) && c(b);
        },
            m = function m(b, c) {
          var d = b.ownerDocument;a.a.e.get(d, g) || (a.a.e.set(d, g, !0), a.a.q(d, "selectionchange", l));a.a.e.set(b, h, c);
        };a.d.textInput = { init: function init(b, d, g) {
            function l(c, d) {
              a.a.q(b, c, d);
            }function h() {
              var c = a.a.c(d());if (null === c || c === n) c = "";u !== n && c === u ? a.a.setTimeout(h, 4) : b.value !== c && (s = c, b.value = c);
            }function y() {
              t || (u = b.value, t = a.a.setTimeout(v, 4));
            }function v() {
              clearTimeout(t);u = t = n;var c = b.value;s !== c && (s = c, a.h.Ga(d(), g, "textInput", c));
            }var s = b.value,
                t,
                u,
                x = 9 == a.a.C ? y : v;10 > a.a.C ? (l("propertychange", function (a) {
              "value" === a.propertyName && x(a);
            }), 8 == a.a.C && (l("keyup", v), l("keydown", v)), 8 <= a.a.C && (m(b, x), l("dragend", y))) : (l("input", v), 5 > e && "textarea" === a.a.A(b) ? (l("keydown", y), l("paste", y), l("cut", y)) : 11 > c ? l("keydown", y) : 4 > f && (l("DOMAutoComplete", v), l("dragdrop", v), l("drop", v)));l("change", v);a.m(h, null, { i: b });
          } };a.h.ga.textInput = !0;a.d.textinput = { preprocess: function preprocess(a, b, c) {
            c("textInput", a);
          } };
      })();a.d.uniqueName = { init: function init(b, c) {
          if (c()) {
            var d = "ko_unique_" + ++a.d.uniqueName.Nc;a.a.vc(b, d);
          }
        } };a.d.uniqueName.Nc = 0;a.d.value = { after: ["options", "foreach"], init: function init(b, c, d) {
          if ("input" != b.tagName.toLowerCase() || "checkbox" != b.type && "radio" != b.type) {
            var e = ["change"],
                f = d.get("valueUpdate"),
                g = !1,
                h = null;f && ("string" == typeof f && (f = [f]), a.a.ta(e, f), e = a.a.Wb(e));var l = function l() {
              h = null;g = !1;var e = c(),
                  f = a.j.u(b);a.h.Ga(e, d, "value", f);
            };!a.a.C || "input" != b.tagName.toLowerCase() || "text" != b.type || "off" == b.autocomplete || b.form && "off" == b.form.autocomplete || -1 != a.a.o(e, "propertychange") || (a.a.q(b, "propertychange", function () {
              g = !0;
            }), a.a.q(b, "focus", function () {
              g = !1;
            }), a.a.q(b, "blur", function () {
              g && l();
            }));a.a.r(e, function (c) {
              var d = l;a.a.sd(c, "after") && (d = function d() {
                h = a.j.u(b);a.a.setTimeout(l, 0);
              }, c = c.substring(5));a.a.q(b, c, d);
            });var m = function m() {
              var e = a.a.c(c()),
                  f = a.j.u(b);if (null !== h && e === h) a.a.setTimeout(m, 0);else if (e !== f) if ("select" === a.a.A(b)) {
                var g = d.get("valueAllowUnset"),
                    f = function f() {
                  a.j.ja(b, e, g);
                };f();g || e === a.j.u(b) ? a.a.setTimeout(f, 0) : a.l.w(a.a.Fa, null, [b, "change"]);
              } else a.j.ja(b, e);
            };a.m(m, null, { i: b });
          } else a.La(b, { checkedValue: c });
        }, update: function update() {} };a.h.ga.value = !0;a.d.visible = { update: function update(b, c) {
          var d = a.a.c(c()),
              e = "none" != b.style.display;d && !e ? b.style.display = "" : !d && e && (b.style.display = "none");
        } };(function (b) {
        a.d[b] = { init: function init(c, d, e, f, g) {
            return a.d.event.init.call(this, c, function () {
              var a = {};a[b] = d();return a;
            }, e, f, g);
          } };
      })("click");a.P = function () {};a.P.prototype.renderTemplateSource = function () {
        throw Error("Override renderTemplateSource");
      };a.P.prototype.createJavaScriptEvaluatorBlock = function () {
        throw Error("Override createJavaScriptEvaluatorBlock");
      };a.P.prototype.makeTemplateSource = function (b, c) {
        if ("string" == typeof b) {
          c = c || t;var d = c.getElementById(b);if (!d) throw Error("Cannot find template with ID " + b);return new a.v.n(d);
        }if (1 == b.nodeType || 8 == b.nodeType) return new a.v.sa(b);throw Error("Unknown template type: " + b);
      };a.P.prototype.renderTemplate = function (a, c, d, e) {
        a = this.makeTemplateSource(a, e);return this.renderTemplateSource(a, c, d, e);
      };a.P.prototype.isTemplateRewritten = function (a, c) {
        return !1 === this.allowTemplateRewriting ? !0 : this.makeTemplateSource(a, c).data("isRewritten");
      };a.P.prototype.rewriteTemplate = function (a, c, d) {
        a = this.makeTemplateSource(a, d);c = c(a.text());a.text(c);a.data("isRewritten", !0);
      };a.b("templateEngine", a.P);a.Ib = function () {
        function b(b, c, d, h) {
          b = a.h.Ab(b);for (var l = a.h.va, m = 0; m < b.length; m++) {
            var k = b[m].key;if (l.hasOwnProperty(k)) {
              var r = l[k];if ("function" === typeof r) {
                if (k = r(b[m].value)) throw Error(k);
              } else if (!r) throw Error("This template engine does not support the '" + k + "' binding within its templates");
            }
          }d = "ko.__tr_ambtns(function($context,$element){return(function(){return{ " + a.h.Xa(b, { valueAccessors: !0 }) + " } })()},'" + d.toLowerCase() + "')";return h.createJavaScriptEvaluatorBlock(d) + c;
        }var c = /(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,
            d = /\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return { Tc: function Tc(b, c, d) {
            c.isTemplateRewritten(b, d) || c.rewriteTemplate(b, function (b) {
              return a.Ib.jd(b, c);
            }, d);
          }, jd: function jd(a, f) {
            return a.replace(c, function (a, c, d, e, k) {
              return b(k, c, d, f);
            }).replace(d, function (a, c) {
              return b(c, "\x3c!-- ko --\x3e", "#comment", f);
            });
          }, Jc: function Jc(b, c) {
            return a.N.yb(function (d, h) {
              var l = d.nextSibling;l && l.nodeName.toLowerCase() === c && a.La(l, b, h);
            });
          } };
      }();a.b("__tr_ambtns", a.Ib.Jc);(function () {
        a.v = {};a.v.n = function (b) {
          if (this.n = b) {
            var c = a.a.A(b);this.eb = "script" === c ? 1 : "textarea" === c ? 2 : "template" == c && b.content && 11 === b.content.nodeType ? 3 : 4;
          }
        };a.v.n.prototype.text = function () {
          var b = 1 === this.eb ? "text" : 2 === this.eb ? "value" : "innerHTML";if (0 == arguments.length) return this.n[b];var c = arguments[0];"innerHTML" === b ? a.a.Eb(this.n, c) : this.n[b] = c;
        };var b = a.a.e.J() + "_";a.v.n.prototype.data = function (c) {
          if (1 === arguments.length) return a.a.e.get(this.n, b + c);a.a.e.set(this.n, b + c, arguments[1]);
        };var c = a.a.e.J();a.v.n.prototype.nodes = function () {
          var b = this.n;if (0 == arguments.length) return (a.a.e.get(b, c) || {}).mb || (3 === this.eb ? b.content : 4 === this.eb ? b : n);a.a.e.set(b, c, { mb: arguments[0] });
        };a.v.sa = function (a) {
          this.n = a;
        };a.v.sa.prototype = new a.v.n();a.v.sa.prototype.text = function () {
          if (0 == arguments.length) {
            var b = a.a.e.get(this.n, c) || {};b.Jb === n && b.mb && (b.Jb = b.mb.innerHTML);return b.Jb;
          }a.a.e.set(this.n, c, { Jb: arguments[0] });
        };a.b("templateSources", a.v);a.b("templateSources.domElement", a.v.n);a.b("templateSources.anonymousTemplate", a.v.sa);
      })();(function () {
        function b(b, c, d) {
          var e;for (c = a.f.nextSibling(c); b && (e = b) !== c;) {
            b = a.f.nextSibling(e), d(e, b);
          }
        }function c(c, d) {
          if (c.length) {
            var e = c[0],
                f = c[c.length - 1],
                g = e.parentNode,
                h = a.S.instance,
                n = h.preprocessNode;if (n) {
              b(e, f, function (a, b) {
                var c = a.previousSibling,
                    d = n.call(h, a);d && (a === e && (e = d[0] || b), a === f && (f = d[d.length - 1] || c));
              });c.length = 0;if (!e) return;e === f ? c.push(e) : (c.push(e, f), a.a.Ba(c, g));
            }b(e, f, function (b) {
              1 !== b.nodeType && 8 !== b.nodeType || a.Ub(d, b);
            });b(e, f, function (b) {
              1 !== b.nodeType && 8 !== b.nodeType || a.N.Cc(b, [d]);
            });a.a.Ba(c, g);
          }
        }function d(a) {
          return a.nodeType ? a : 0 < a.length ? a[0] : null;
        }function e(b, e, f, h, q) {
          q = q || {};var p = (b && d(b) || f || {}).ownerDocument,
              n = q.templateEngine || g;
          a.Ib.Tc(f, n, p);f = n.renderTemplate(f, h, q, p);if ("number" != typeof f.length || 0 < f.length && "number" != typeof f[0].nodeType) throw Error("Template engine must return an array of DOM nodes");p = !1;switch (e) {case "replaceChildren":
              a.f.fa(b, f);p = !0;break;case "replaceNode":
              a.a.uc(b, f);p = !0;break;case "ignoreTargetNode":
              break;default:
              throw Error("Unknown renderMode: " + e);}p && (c(f, h), q.afterRender && a.l.w(q.afterRender, null, [f, h.$data]));return f;
        }function f(b, c, d) {
          return a.I(b) ? b() : "function" === typeof b ? b(c, d) : b;
        }
        var g;a.Fb = function (b) {
          if (b != n && !(b instanceof a.P)) throw Error("templateEngine must inherit from ko.templateEngine");g = b;
        };a.Cb = function (b, c, k, h, q) {
          k = k || {};if ((k.templateEngine || g) == n) throw Error("Set a template engine before calling renderTemplate");q = q || "replaceChildren";if (h) {
            var p = d(h);return a.B(function () {
              var g = c && c instanceof a.R ? c : new a.R(c, null, null, null, { exportDependencies: !0 }),
                  n = f(b, g.$data, g),
                  g = e(h, q, n, g, k);"replaceNode" == q && (h = g, p = d(h));
            }, null, { ya: function ya() {
                return !p || !a.a.qb(p);
              }, i: p && "replaceNode" == q ? p.parentNode : p });
          }return a.N.yb(function (d) {
            a.Cb(b, c, k, d, "replaceNode");
          });
        };a.pd = function (b, d, g, h, q) {
          function p(a, b) {
            c(b, t);g.afterRender && g.afterRender(b, a);t = null;
          }function s(a, c) {
            t = q.createChildContext(a, g.as, function (a) {
              a.$index = c;
            });var d = f(b, a, t);return e(null, "ignoreTargetNode", d, t, g);
          }var t;return a.B(function () {
            var b = a.a.c(d) || [];"undefined" == typeof b.length && (b = [b]);b = a.a.Ma(b, function (b) {
              return g.includeDestroyed || b === n || null === b || !a.a.c(b._destroy);
            });a.l.w(a.a.Db, null, [h, b, s, g, p]);
          }, null, { i: h });
        };var h = a.a.e.J();a.d.template = { init: function init(b, c) {
            var d = a.a.c(c());if ("string" == typeof d || d.name) a.f.za(b);else {
              if ("nodes" in d) {
                if (d = d.nodes || [], a.I(d)) throw Error('The "nodes" option must be a plain, non-observable array.');
              } else d = a.f.childNodes(b);d = a.a.nc(d);new a.v.sa(b).nodes(d);
            }return { controlsDescendantBindings: !0 };
          }, update: function update(b, c, d, e, f) {
            var g = c();c = a.a.c(g);d = !0;e = null;"string" == typeof c ? c = {} : (g = c.name, "if" in c && (d = a.a.c(c["if"])), d && "ifnot" in c && (d = !a.a.c(c.ifnot)));
            "foreach" in c ? e = a.pd(g || b, d && c.foreach || [], c, b, f) : d ? (f = "data" in c ? f.ac(c.data, c.as) : f, e = a.Cb(g || b, f, c, b)) : a.f.za(b);f = e;(c = a.a.e.get(b, h)) && "function" == typeof c.k && c.k();a.a.e.set(b, h, f && f.ca() ? f : n);
          } };a.h.va.template = function (b) {
          b = a.h.Ab(b);return 1 == b.length && b[0].unknown || a.h.fd(b, "name") ? null : "This template engine does not support anonymous templates nested within its templates";
        };a.f.aa.template = !0;
      })();a.b("setTemplateEngine", a.Fb);a.b("renderTemplate", a.Cb);a.a.hc = function (a, c, d) {
        if (a.length && c.length) {
          var e, f, g, h, l;for (e = f = 0; (!d || e < d) && (h = a[f]); ++f) {
            for (g = 0; l = c[g]; ++g) {
              if (h.value === l.value) {
                h.moved = l.index;l.moved = h.index;c.splice(g, 1);e = g = 0;break;
              }
            }e += g;
          }
        }
      };a.a.lb = function () {
        function b(b, d, e, f, g) {
          var h = Math.min,
              l = Math.max,
              m = [],
              k,
              n = b.length,
              q,
              p = d.length,
              s = p - n || 1,
              t = n + p + 1,
              v,
              u,
              x;for (k = 0; k <= n; k++) {
            for (u = v, m.push(v = []), x = h(p, k + s), q = l(0, k - 1); q <= x; q++) {
              v[q] = q ? k ? b[k - 1] === d[q - 1] ? u[q - 1] : h(u[q] || t, v[q - 1] || t) + 1 : q + 1 : k + 1;
            }
          }h = [];l = [];s = [];k = n;for (q = p; k || q;) {
            p = m[k][q] - 1, q && p === m[k][q - 1] ? l.push(h[h.length] = { status: e,
              value: d[--q], index: q }) : k && p === m[k - 1][q] ? s.push(h[h.length] = { status: f, value: b[--k], index: k }) : (--q, --k, g.sparse || h.push({ status: "retained", value: d[q] }));
          }a.a.hc(s, l, !g.dontLimitMoves && 10 * n);return h.reverse();
        }return function (a, d, e) {
          e = "boolean" === typeof e ? { dontLimitMoves: e } : e || {};a = a || [];d = d || [];return a.length < d.length ? b(a, d, "added", "deleted", e) : b(d, a, "deleted", "added", e);
        };
      }();a.b("utils.compareArrays", a.a.lb);(function () {
        function b(b, c, d, h, l) {
          var m = [],
              k = a.B(function () {
            var k = c(d, l, a.a.Ba(m, b)) || [];0 < m.length && (a.a.uc(m, k), h && a.l.w(h, null, [d, k, l]));m.length = 0;a.a.ta(m, k);
          }, null, { i: b, ya: function ya() {
              return !a.a.Tb(m);
            } });return { ea: m, B: k.ca() ? k : n };
        }var c = a.a.e.J(),
            d = a.a.e.J();a.a.Db = function (e, f, g, h, l) {
          function m(b, c) {
            w = q[c];u !== c && (D[b] = w);w.tb(u++);a.a.Ba(w.ea, e);t.push(w);z.push(w);
          }function k(b, c) {
            if (b) for (var d = 0, e = c.length; d < e; d++) {
              c[d] && a.a.r(c[d].ea, function (a) {
                b(a, d, c[d].ka);
              });
            }
          }f = f || [];h = h || {};var r = a.a.e.get(e, c) === n,
              q = a.a.e.get(e, c) || [],
              p = a.a.ib(q, function (a) {
            return a.ka;
          }),
              s = a.a.lb(p, f, h.dontLimitMoves),
              t = [],
              v = 0,
              u = 0,
              x = [],
              z = [];f = [];for (var D = [], p = [], w, C = 0, B, E; B = s[C]; C++) {
            switch (E = B.moved, B.status) {case "deleted":
                E === n && (w = q[v], w.B && (w.B.k(), w.B = n), a.a.Ba(w.ea, e).length && (h.beforeRemove && (t.push(w), z.push(w), w.ka === d ? w = null : f[C] = w), w && x.push.apply(x, w.ea)));v++;break;case "retained":
                m(C, v++);break;case "added":
                E !== n ? m(C, E) : (w = { ka: B.value, tb: a.O(u++) }, t.push(w), z.push(w), r || (p[C] = w));}
          }a.a.e.set(e, c, t);k(h.beforeMove, D);a.a.r(x, h.beforeRemove ? a.ba : a.removeNode);for (var C = 0, r = a.f.firstChild(e), F; w = z[C]; C++) {
            w.ea || a.a.extend(w, b(e, g, w.ka, l, w.tb));for (v = 0; s = w.ea[v]; r = s.nextSibling, F = s, v++) {
              s !== r && a.f.kc(e, s, F);
            }!w.ad && l && (l(w.ka, w.ea, w.tb), w.ad = !0);
          }k(h.beforeRemove, f);for (C = 0; C < f.length; ++C) {
            f[C] && (f[C].ka = d);
          }k(h.afterMove, D);k(h.afterAdd, p);
        };
      })();a.b("utils.setDomNodeChildrenFromArrayMapping", a.a.Db);a.X = function () {
        this.allowTemplateRewriting = !1;
      };a.X.prototype = new a.P();a.X.prototype.renderTemplateSource = function (b, c, d, e) {
        if (c = (9 > a.a.C ? 0 : b.nodes) ? b.nodes() : null) return a.a.W(c.cloneNode(!0).childNodes);b = b.text();
        return a.a.na(b, e);
      };a.X.vb = new a.X();a.Fb(a.X.vb);a.b("nativeTemplateEngine", a.X);(function () {
        a.xb = function () {
          var a = this.ed = function () {
            if (!u || !u.tmpl) return 0;try {
              if (0 <= u.tmpl.tag.tmpl.open.toString().indexOf("__")) return 2;
            } catch (a) {}return 1;
          }();this.renderTemplateSource = function (b, e, f, g) {
            g = g || t;f = f || {};if (2 > a) throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var h = b.data("precompiled");h || (h = b.text() || "", h = u.template(null, "{{ko_with $item.koBindingContext}}" + h + "{{/ko_with}}"), b.data("precompiled", h));b = [e.$data];e = u.extend({ koBindingContext: e }, f.templateOptions);e = u.tmpl(h, b, e);e.appendTo(g.createElement("div"));u.fragments = {};return e;
          };this.createJavaScriptEvaluatorBlock = function (a) {
            return "{{ko_code ((function() { return " + a + " })()) }}";
          };this.addTemplate = function (a, b) {
            t.write("<script type='text/html' id='" + a + "'>" + b + "\x3c/script>");
          };0 < a && (u.tmpl.tag.ko_code = { open: "__.push($1 || '');" }, u.tmpl.tag.ko_with = { open: "with($1) {", close: "} " });
        };a.xb.prototype = new a.P();var b = new a.xb();0 < b.ed && a.Fb(b);a.b("jqueryTmplTemplateEngine", a.xb);
      })();
    });
  })();
})();
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }
})(function ($) {
    'use strict';

    var Slick = window.Slick || {};

    Slick = function () {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this,
                dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function customPaging(slider, i) {
                    return $('<button type="button" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                focusOnChange: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: false,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                swiping: false,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

            _.registerBreakpoints();
            _.init(true);
        }

        return Slick;
    }();

    Slick.prototype.activateADA = function () {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });
    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {

        var _ = this;

        if (typeof index === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || index >= _.slideCount) {
            return false;
        }

        _.unload();

        if (typeof index === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.animateHeight = function () {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function (targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }
        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -_.currentLeft;
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function step(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' + now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' + now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function complete() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });
            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function () {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }
            }
        }
    };

    Slick.prototype.getNavTarget = function () {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;
    };

    Slick.prototype.asNavFor = function (index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if (asNavFor !== null && (typeof asNavFor === 'undefined' ? 'undefined' : _typeof(asNavFor)) === 'object') {
            asNavFor.each(function () {
                var target = $(this).slick('getSlick');
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }
    };

    Slick.prototype.applyTransition = function (slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.autoPlay = function () {

        var _ = this;

        _.autoPlayClear();

        if (_.slideCount > _.options.slidesToShow) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
        }
    };

    Slick.prototype.autoPlayClear = function () {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }
    };

    Slick.prototype.autoPlayIterator = function () {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if (!_.paused && !_.interrupted && !_.focussed) {

            if (_.options.infinite === false) {

                if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
                    _.direction = 0;
                } else if (_.direction === 0) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if (_.currentSlide - 1 === 0) {
                        _.direction = 1;
                    }
                }
            }

            _.slideHandler(slideTo);
        }
    };

    Slick.prototype.buildArrows = function () {

        var _ = this;

        if (_.options.arrows === true) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if (_.slideCount > _.options.slidesToShow) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                }
            } else {

                _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({
                    'aria-disabled': 'true',
                    'tabindex': '-1'
                });
            }
        }
    };

    Slick.prototype.buildDots = function () {

        var _ = this,
            i,
            dot;

        if (_.options.dots === true) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active');
        }
    };

    Slick.prototype.buildOut = function () {

        var _ = this;

        _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap('<div class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }
    };

    Slick.prototype.buildRows = function () {

        var _ = this,
            a,
            b,
            c,
            newSlides,
            numOfSlides,
            originalSlides,
            slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if (_.options.rows > 1) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement('div');
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children().css({
                'width': 100 / _.options.slidesPerRow + '%',
                'display': 'inline-block'
            });
        }
    };

    Slick.prototype.checkResponsive = function (initial, forceUpdate) {

        var _ = this,
            breakpoint,
            targetBreakpoint,
            respondToWidth,
            triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }
    };

    Slick.prototype.changeSlide = function (event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset,
            slideOffset,
            unevenOffset;

        if ($target.is('a')) {
            event.preventDefault();
        }

        if (!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }
    };

    Slick.prototype.checkNavigable = function (index) {

        var _ = this,
            navigables,
            prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function () {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));

            if (_.options.accessibility === true) {
                _.$dots.off('keydown.slick', _.keyHandler);
            }
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
            }
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.cleanUpSlideEvents = function () {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
    };

    Slick.prototype.cleanUpRows = function () {

        var _ = this,
            originalSlides;

        if (_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }
    };

    Slick.prototype.clickHandler = function (event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }
    };

    Slick.prototype.destroy = function (refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.$prevArrow.length) {

            _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
        }

        if (_.$nextArrow && _.$nextArrow.length) {

            _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }
        }

        if (_.$slides) {

            _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {
                $(this).attr('style', $(this).data('originalStyling'));
            });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if (!refresh) {
            _.$slider.trigger('destroy', [_]);
        }
    };

    Slick.prototype.disableTransition = function (slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.fadeSlide = function (slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function () {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }
        }
    };

    Slick.prototype.fadeSlideOut = function (slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });
        }
    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.focusHandler = function () {

        var _ = this;

        _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*', function (event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function () {

                if (_.options.pauseOnFocus) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }
            }, 0);
        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {

        var _ = this;
        return _.currentSlide;
    };

    Slick.prototype.getDotCount = function () {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            if (_.slideCount <= _.options.slidesToShow) {
                ++pagerQty;
            } else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if (!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;
    };

    Slick.prototype.getLeft = function (slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide,
            coef;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
                coef = -1;

                if (_.options.vertical === true && _.options.centerMode === true) {
                    if (_.options.slidesToShow === 2) {
                        coef = -1.5;
                    } else if (_.options.slidesToShow === 1) {
                        coef = -2;
                    }
                }
                verticalOffset = verticalHeight * _.options.slidesToShow * coef;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
                        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
                    } else {
                        _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
                        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
                verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
            _.slideOffset = _.slideWidth * Math.floor(_.options.slidesToShow) / 2 - _.slideWidth * _.slideCount / 2;
        } else if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
        } else {
            targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft = 0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft = 0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;
    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {

        var _ = this;

        return _.options[option];
    };

    Slick.prototype.getNavigableIndexes = function () {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;
    };

    Slick.prototype.getSlick = function () {

        return this;
    };

    Slick.prototype.getSlideCount = function () {

        var _ = this,
            slidesTraversed,
            swipedSlide,
            centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function (index, slide) {
                if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;
        } else {
            return _.options.slidesToScroll;
        }
    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);
    };

    Slick.prototype.init = function (creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();
        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if (_.options.autoplay) {

            _.paused = false;
            _.autoPlay();
        }
    };

    Slick.prototype.initADA = function () {
        var _ = this,
            numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
            tabControlIndexes = _.getNavigableIndexes().filter(function (val) {
            return val >= 0 && val < _.slideCount;
        });

        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        if (_.$dots !== null) {
            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {
                var slideControlIndex = tabControlIndexes.indexOf(i);

                $(this).attr({
                    'role': 'tabpanel',
                    'id': 'slick-slide' + _.instanceUid + i,
                    'tabindex': -1
                });

                if (slideControlIndex !== -1) {
                    $(this).attr({
                        'aria-describedby': 'slick-slide-control' + _.instanceUid + slideControlIndex
                    });
                }
            });

            _.$dots.attr('role', 'tablist').find('li').each(function (i) {
                var mappedSlideIndex = tabControlIndexes[i];

                $(this).attr({
                    'role': 'presentation'
                });

                $(this).find('button').first().attr({
                    'role': 'tab',
                    'id': 'slick-slide-control' + _.instanceUid + i,
                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
                    'aria-label': i + 1 + ' of ' + numDotGroups,
                    'aria-selected': null,
                    'tabindex': '-1'
                });
            }).eq(_.currentSlide).find('button').attr({
                'aria-selected': 'true',
                'tabindex': '0'
            }).end();
        }

        for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {
            _.$slides.eq(i).attr('tabindex', 0);
        }

        _.activateADA();
    };

    Slick.prototype.initArrowEvents = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.off('click.slick').on('click.slick', {
                message: 'previous'
            }, _.changeSlide);
            _.$nextArrow.off('click.slick').on('click.slick', {
                message: 'next'
            }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow.on('keydown.slick', _.keyHandler);
                _.$nextArrow.on('keydown.slick', _.keyHandler);
            }
        }
    };

    Slick.prototype.initDotEvents = function () {

        var _ = this;

        if (_.options.dots === true) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$dots.on('keydown.slick', _.keyHandler);
            }
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true) {

            $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initSlideEvents = function () {

        var _ = this;

        if (_.options.pauseOnHover) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initializeEvents = function () {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(_.setPosition);
    };

    Slick.prototype.initUI = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();
        }
    };

    Slick.prototype.keyHandler = function (event) {

        var _ = this;
        if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' : 'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }
    };

    Slick.prototype.lazyLoad = function () {

        var _ = this,
            loadRange,
            cloneRange,
            rangeStart,
            rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function () {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageSrcSet = $(this).attr('data-srcset'),
                    imageSizes = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function () {

                    image.animate({ opacity: 0 }, 100, function () {

                        if (imageSrcSet) {
                            image.attr('srcset', imageSrcSet);

                            if (imageSizes) {
                                image.attr('sizes', imageSizes);
                            }
                        }

                        image.attr('src', imageSource).animate({ opacity: 1 }, 200, function () {
                            image.removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');
                        });
                        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                    });
                };

                imageToLoad.onerror = function () {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);
                };

                imageToLoad.src = imageSource;
            });
        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

        if (_.options.lazyLoad === 'anticipated') {
            var prevSlide = rangeStart - 1,
                nextSlide = rangeEnd,
                $slides = _.$slider.find('.slick-slide');

            for (var i = 0; i < _.options.slidesToScroll; i++) {
                if (prevSlide < 0) prevSlide = _.slideCount - 1;
                loadRange = loadRange.add($slides.eq(prevSlide));
                loadRange = loadRange.add($slides.eq(nextSlide));
                prevSlide--;
                nextSlide++;
            }
        }

        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }
    };

    Slick.prototype.loadSlider = function () {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }
    };

    Slick.prototype.next = Slick.prototype.slickNext = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });
    };

    Slick.prototype.orientationChange = function () {

        var _ = this;

        _.checkResponsive();
        _.setPosition();
    };

    Slick.prototype.pause = Slick.prototype.slickPause = function () {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;
    };

    Slick.prototype.play = Slick.prototype.slickPlay = function () {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;
    };

    Slick.prototype.postSlide = function (index) {

        var _ = this;

        if (!_.unslicked) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            if (_.slideCount > _.options.slidesToShow) {
                _.setPosition();
            }

            _.swipeLeft = null;

            if (_.options.autoplay) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();

                if (_.options.focusOnChange) {
                    var $currentSlide = $(_.$slides.get(_.currentSlide));
                    $currentSlide.attr('tabindex', 0).focus();
                }
            }
        }
    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });
    };

    Slick.prototype.preventDefault = function (event) {

        event.preventDefault();
    };

    Slick.prototype.progressiveLazyLoad = function (tryCount) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $('img[data-lazy]', _.$slider),
            image,
            imageSource,
            imageSrcSet,
            imageSizes,
            imageToLoad;

        if ($imgsToLoad.length) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageSrcSet = image.attr('data-srcset');
            imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function () {

                if (imageSrcSet) {
                    image.attr('srcset', imageSrcSet);

                    if (imageSizes) {
                        image.attr('sizes', imageSizes);
                    }
                }

                image.attr('src', imageSource).removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');

                if (_.options.adaptiveHeight === true) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                _.progressiveLazyLoad();
            };

            imageToLoad.onerror = function () {

                if (tryCount < 3) {

                    setTimeout(function () {
                        _.progressiveLazyLoad(tryCount + 1);
                    }, 500);
                } else {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                    _.progressiveLazyLoad();
                }
            };

            imageToLoad.src = imageSource;
        } else {

            _.$slider.trigger('allImagesLoaded', [_]);
        }
    };

    Slick.prototype.refresh = function (initializing) {

        var _ = this,
            currentSlide,
            lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
            _.currentSlide = lastVisibleIndex;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if (!initializing) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);
        }
    };

    Slick.prototype.registerBreakpoints = function () {

        var _ = this,
            breakpoint,
            currentBreakpoint,
            l,
            responsiveSettings = _.options.responsive || null;

        if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {

            _.respondTo = _.options.respondTo || 'window';

            for (breakpoint in responsiveSettings) {

                l = _.breakpoints.length - 1;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {
                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
                }
            }

            _.breakpoints.sort(function (a, b) {
                return _.options.mobileFirst ? a - b : b - a;
            });
        }
    };

    Slick.prototype.reinit = function () {

        var _ = this;

        _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);
    };

    Slick.prototype.resize = function () {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function () {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition();
                }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {

        var _ = this;

        if (typeof index === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.setCSS = function (position) {

        var _ = this,
            positionProps = {},
            x,
            y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }
    };

    Slick.prototype.setDimensions = function () {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: '0px ' + _.options.centerPadding
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: _.options.centerPadding + ' 0px'
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();

        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));
        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
    };

    Slick.prototype.setFade = function () {

        var _ = this,
            targetLeft;

        _.$slides.each(function (index, element) {
            targetLeft = _.slideWidth * index * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });
    };

    Slick.prototype.setHeight = function () {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }
    };

    Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {


        var _ = this,
            l,
            item,
            option,
            value,
            refresh = false,
            type;

        if ($.type(arguments[0]) === 'object') {

            option = arguments[0];
            refresh = arguments[1];
            type = 'multiple';
        } else if ($.type(arguments[0]) === 'string') {

            option = arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {

                type = 'responsive';
            } else if (typeof arguments[1] !== 'undefined') {

                type = 'single';
            }
        }

        if (type === 'single') {

            _.options[option] = value;
        } else if (type === 'multiple') {

            $.each(option, function (opt, val) {

                _.options[opt] = val;
            });
        } else if (type === 'responsive') {

            for (item in value) {

                if ($.type(_.options.responsive) !== 'array') {

                    _.options.responsive = [value[item]];
                } else {

                    l = _.options.responsive.length - 1;

                    while (l >= 0) {

                        if (_.options.responsive[l].breakpoint === value[item].breakpoint) {

                            _.options.responsive.splice(l, 1);
                        }

                        l--;
                    }

                    _.options.responsive.push(value[item]);
                }
            }
        }

        if (refresh) {

            _.unload();
            _.reinit();
        }
    };

    Slick.prototype.setPosition = function () {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);
    };

    Slick.prototype.setProps = function () {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if (_.options.fade) {
            if (typeof _.options.zIndex === 'number') {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;
    };

    Slick.prototype.setSlideClasses = function (index) {

        var _ = this,
            centerOffset,
            allSlides,
            indexOffset,
            remainder;

        allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');

        _.$slides.eq(index).addClass('slick-current');

        if (_.options.centerMode === true) {

            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {
                    _.$slides.slice(index - centerOffset + evenCoef, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides.slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');
                }

                if (index === 0) {

                    allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');
                } else if (index === _.slideCount - 1) {

                    allSlides.eq(_.options.slidesToShow).addClass('slick-center');
                }
            }

            _.$slides.eq(index).addClass('slick-center');
        } else {

            if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {

                _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides.addClass('slick-active').attr('aria-hidden', 'false');
            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {

                    allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
                }
            }
        }

        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function () {

        var _ = this,
            i,
            slideIndex,
            infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount + _.slideCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
                    $(this).attr('id', '');
                });
            }
        }
    };

    Slick.prototype.interrupt = function (toggle) {

        var _ = this;

        if (!toggle) {
            _.autoPlay();
        }
        _.interrupted = toggle;
    };

    Slick.prototype.selectHandler = function (event) {

        var _ = this;

        var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.slideHandler(index, false, true);
            return;
        }

        _.slideHandler(index);
    };

    Slick.prototype.slideHandler = function (index, sync, dontAnimate) {

        var targetSlide,
            animSlide,
            oldSlide,
            slideLeft,
            targetLeft = null,
            _ = this,
            navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if (_.options.autoplay) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if (_.options.asNavFor) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                navTarget.setSlideClasses(_.currentSlide);
            }
        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function () {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function () {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }
    };

    Slick.prototype.startLoad = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();
        }

        _.$slider.addClass('slick-loading');
    };

    Slick.prototype.swipeDirection = function () {

        var xDist,
            yDist,
            r,
            swipeAngle,
            _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return _.options.rtl === false ? 'right' : 'left';
        }
        if (_.options.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';
    };

    Slick.prototype.swipeEnd = function (event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.swiping = false;

        if (_.scrolling) {
            _.scrolling = false;
            return false;
        }

        _.interrupted = false;
        _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;

        if (_.touchObject.curX === undefined) {
            return false;
        }

        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger('edge', [_, _.swipeDirection()]);
        }

        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

            direction = _.swipeDirection();

            switch (direction) {

                case 'left':
                case 'down':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:

            }

            if (direction != 'vertical') {

                _.slideHandler(slideCount);
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction]);
            }
        } else {

            if (_.touchObject.startX !== _.touchObject.curX) {

                _.slideHandler(_.currentSlide);
                _.touchObject = {};
            }
        }
    };

    Slick.prototype.swipeHandler = function (event) {

        var _ = this;

        if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }
    };

    Slick.prototype.swipeMove = function (event) {

        var _ = this,
            edgeWasHit = false,
            curLeft,
            swipeDirection,
            swipeLength,
            positionOffset,
            touches,
            verticalSwipeLength;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        verticalSwipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
            _.scrolling = true;
            return false;
        }

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = verticalSwipeLength;
        }

        swipeDirection = _.swipeDirection();

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            _.swiping = true;
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }

        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);
    };

    Slick.prototype.swipeStart = function (event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;
    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.unload = function () {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');
    };

    Slick.prototype.unslick = function (fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();
    };

    Slick.prototype.updateArrows = function () {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            }
        }
    };

    Slick.prototype.updateDots = function () {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots.find('li').removeClass('slick-active').end();

            _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active');
        }
    };

    Slick.prototype.visibility = function () {

        var _ = this;

        if (_.options.autoplay) {

            if (document[_.hidden]) {

                _.interrupted = true;
            } else {

                _.interrupted = false;
            }
        }
    };

    $.fn.slick = function () {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if ((typeof opt === 'undefined' ? 'undefined' : _typeof(opt)) == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };
});
'use strict';

var rej = {
    hslToRgb: function hslToRgb(h, s, l) {
        var r, g, b;
        function hue2rgb(p, q, t) {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);

        return [Math.floor(r * 255), Math.floor(g * 210), Math.floor(b * 60)];
    },

    numberToColorHsl: function numberToColorHsl(i) {
        var hue = i * 1.2 / 360;
        var rgb = rej.hslToRgb(hue, 1, .5);
        return 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';
    }
};
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {

    var punctuation = "<<,>.?/:;\"'()!".split('');

    var Dashboard = function () {
        function Dashboard(element) {
            _classCallCheck(this, Dashboard);

            this.$root = $(element);
            if (!this.$root.length) return;

            this.$currentPost = null;

            this.$therm = this.$root.find('.therm-container');
            this.$ticker = this.$root.closest('body').find('.ticker');
            this.initListeners();
        }

        _createClass(Dashboard, [{
            key: 'initListeners',
            value: function initListeners() {
                var _this2 = this;

                var _this = this;

                var $jsTagsInput = this.$root.find('.js-hashtags');
                $jsTagsInput.tagsinput({
                    confirmKeys: [32, 44],
                    splitOn: ',',
                    trimValue: true
                });
                $jsTagsInput.on('itemAdded', function (event) {
                    var vals = $(this).closest('.input-group').find('.bootstrap-tagsinput').val();
                    console.log(vals);
                });

                $('.bootstrap-tagsinput input').keyup(function (event) {
                    if (event.keyCode == 13) {
                        _this.fillDashboard($('.js-hashtags').val());
                    }
                });

                $('.js-hashtags-submit').on('click', function () {
                    _this.fillDashboard($('.js-hashtags').val());
                });

                $('body').on('keydown', function (e) {
                    if ((e.metaKey || e.ctrlKey) && e.keyCode === 76) {
                        e.preventDefault();
                        _this2.$currentPost.find('.like input').trigger('click');
                    }
                });
            }
        }, {
            key: 'updateQualityStick',
            value: function updateQualityStick(comment) {
                var $progress = this.$therm.find('.progress'),
                    value = 0,
                    puncRatio = 0;

                value = Math.min(comment.split('').length / 140, 1) * 50; 

                value += comment.split(' ').length * 1.2;

                puncRatio = comment.split('').filter(function (m) {
                    return punctuation.indexOf(m) > -1;
                }).length / comment.split('').length;

                if (puncRatio > 0 && puncRatio < .1) {
                    value *= 1.8;
                } else if (puncRatio >= .1) {
                    value *= .3;
                }

                function setWidthandColor(i) {
                    var width = Math.min(i, 100);
                    var color = rej.numberToColorHsl(width);
                    var colorStepper = rej.numberToColorHsl(0),
                        widthStepper = i;
                    var interval = setInterval(function () {
                        if (widthStepper++ >= width) {
                            clearInterval(interval);
                        }
                        $progress.css({
                            width: widthStepper + '%',
                            "background-color": rej.numberToColorHsl(widthStepper)
                        });
                    }, 5);

                }

                setWidthandColor(value); 
            }
        }, {
            key: 'igPostHtml',
            value: function igPostHtml(postObj) {

                var media = '';
                var hashtags = postObj.caption.split('#').map(function (h) {
                    if (!h) return '';
                    h = h.split(' ');
                    if (h.length >= 1) {
                        return '<a href="#">#' + h[0] + '</a> ' + h.slice(1).join(' ');
                    }
                    return h.join(' ');
                }); 

                if (postObj.caption[0] != "#") {
                    hashtags[0] = postObj.caption.split('#')[0];
                }

                hashtags = hashtags.join(' ');

                if (postObj.videos) {
                    media = '\n                <video controls="false" width="' + postObj.videos.standard_resolution.width + '" height="' + postObj.videos.standard_resolution.height + '" loop>\n                  <source src="' + postObj.videos.standard_resolution.url + '" type="video/mp4">\n                  Your browser does not support the video tag.\n                </video>';
                } else {
                    media = '<img src="' + postObj.images.standard_resolution.url + '" />';
                }

                return '      \n                <div class="post-container hidden row" data-postid="' + postObj.id + '">\n                    <div class="image-container col-md-8">\n                        ' + media + '\n                        <div class="like">\n                            <input type="checkbox" id="ig-liked"/>\n                            <label for="ig-liked">\n                                <svg viewBox="0 0 24 24">\n                                    <path d="M12 21.35l-1.45-1.32c-5.15-4.67-8.55-7.75-8.55-11.53 0-3.08 2.42-5.5 5.5-5.5 1.74 0 3.41.81 4.5 2.09 1.09-1.28 2.76-2.09 4.5-2.09 3.08 0 5.5 2.42 5.5 5.5 0 3.78-3.4 6.86-8.55 11.54l-1.45 1.31z"/>\n                                </svg>\n                            </label>\n                        </div>\n                    </div>\n                    <div class="side-details col-md-4">\n                        \n                        <div class=\'input-comments\'>\n                            <div class=\'comments\'>\n                                <p class="caption">' + hashtags + '</p>\n                            </div>\n                            <textarea class=\'comment form-control\'></textarea>\n                            \n                        </div>\n                    </div>\n                </div>';
            }
        }, {
            key: 'runCommenting',
            value: function runCommenting() {
                var _this3 = this;

                if (this.$root.find('.post-container').length < 3) {
                }

                this.updateQualityStick('');

                var $textArea = this.$currentPost.find('textarea');

                this.$root.find('.hash-search').addClass('remove');

                setTimeout(function () {
                    var postHeight = _this3.$currentPost.height();


                    if (_this3.$currentPost.find('video').length) {
                        var videoEl = _this3.$currentPost.find('video')[0];
                        videoEl.play();
                        videoEl.controls = false;
                        _this3.$currentPost.find('video').on('click', function (e) {
                            this.paused ? this.play() : this.pause();
                        });
                    }

                    setTimeout(function () {
                        $textArea.focus();
                    }, 50);
                }, 50); 


                $textArea.on('keydown', function (e) {
                    if ((e.metaKey || e.ctrlKey || event.shiftKey) && e.keyCode === 13) {
                        $textArea.val($textArea.val() + "\n");
                    } else if (e.keyCode === 13) {
                        console.log('submit');
                        e.preventDefault();
                        _this3.submitComment();
                    }
                });

                $textArea.keyup(function (e) {
                    _this3.updateQualityStick($(e.currentTarget).val());
                });
            }
        }, {
            key: 'preCommenting',
            value: function preCommenting(next) {
                this.$currentPost = this.$currentPost || this.$root.find('.ig-content-window').find('.post-container').first();
                this.$therm.removeClass('hidden');
                this.$currentPost.removeClass('hidden'); 
                setTimeout(next, 1500);
            }
        }, {
            key: 'submitComment',
            value: function submitComment(comment) {
                var $nextPost = this.$currentPost.next();
                this.$currentPost.remove();
                this.$currentPost = $nextPost;
                this.$currentPost.removeClass('hidden');
                this.runCommenting();

                this.updateTicker();
            }
        }, {
            key: 'updateTicker',
            value: function updateTicker() {
                var _this4 = this;

                var count = +this.$ticker.text();
                count++;
                this.$ticker.text(count);
                var tcl = this.$ticker.clone();

                tcl.css({
                    position: "absolute",
                    left: this.$ticker.offset().left,
                    top: this.$ticker.offset().top
                });

                $('body').append(tcl);

                setTimeout(function () {
                    _this4.$ticker.text(count);
                    tcl.text(count);
                    tcl.addClass('fade');
                    setTimeout(function () {
                        tcl.remove();
                    }, 2000);
                }, 0);
            }
        }, {
            key: 'fillDashboard',
            value: function fillDashboard(hashtags) {
                var _this5 = this;


                var $contentRoot = $('.ig-content-window', this.$root);

                hashtags = hashtags.split(',').map(function (ht) {
                    return 'tag=' + ht;
                }).join('&');

                $.getJSON('./api/user/tags?' + hashtags + '&username=itcropper&password=TeCz1313').done(function (data) {
                    var $images = data.map(function (d) {
                        return _this5.igPostHtml(d);
                    });
                    $contentRoot.append($images.join(''));

                    _this5.preCommenting(_this5.runCommenting.bind(_this5));
                });
            }
        }]);

        return Dashboard;
    }();

    if (typeof dashboard == 'undefined') {
        var dashboard = new Dashboard('.dashboard');
    }
})();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
    var Login = function () {
        function Login(el) {
            var _this = this;

            _classCallCheck(this, Login);

            this.$root = $(el);

            this.viewModel = {
                username: ko.observable(''),
                pass: ko.observable('')
            };

            this.viewModel.submitable = ko.computed(function () {
                return _this.viewModel.username() != '' && _this.viewModel.pass() != '';
            });

            ko.applyBindings(this.viewModel);

            this.$root.find('.btn').on('click', this.login.bind(this));
        }

        _createClass(Login, [{
            key: 'login',
            value: function login(e) {
                e.preventDefault();
                $.ajax({
                    url: "/login",
                    method: "POST",
                    data: JSON.stringify({
                        username: this.viewModel.username(),
                        password: this.viewModel.pass()
                    })
                }).done(function (e) {
                    if (e) {
                        location.href = "/dashboard";
                    }
                });
            }
        }]);

        return Login;
    }();

    if ($('.login-container').length) {
        var sign = new Login('.login-container');
    }
})();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
    var Signup = function () {
        function Signup(el) {
            var _this = this;

            _classCallCheck(this, Signup);

            this.$root = $(el);

            this.viewModel = {
                tersmAndCond: ko.observable(false),
                email: ko.observable(''),
                email2: ko.observable(''),
                badEmail2: ko.observable(''),
                pass: ko.observable(''),
                pass2: ko.observable(''),
                username: ko.observable(''),
                badUsername: ko.observable(false)
            };

            this.viewModel.username.subscribe(function (nv) {

                if (nv.replace(/\s+/g, "") != nv) {
                    _this.viewModel.badUsername("Username cannot contain space characters.");
                    return;
                }

                var ajax;
                setTimeout(function () {
                    if (ajax) {
                        ajax.abort();
                        ajax = null;
                    } else {
                        ajax = $.ajax({
                            url: "/api/user/checkusername/" + nv,
                            method: "GET"
                        }).done(function (e) {
                            console.log(e);
                            if (e) {
                                _this.viewModel.badUsername("That username is already taken. Please chose another one.");
                            } else {
                                _this.viewModel.badUsername("");
                            }
                        }).always(function () {
                            ajax = null;
                        });
                    }
                }, 500);
            });

            this.viewModel.email2.subscribe(function (nv) {
                if (_this.viewModel.email() != nv) {
                    _this.viewModel.badEmail2('Emails do not match');
                }
            });

            this.viewModel.submitable = ko.computed(function () {
                return _this.viewModel.tersmAndCond() && _this.viewModel.email() != '' && _this.viewModel.email2() != '' && _this.viewModel.pass() != '' && _this.viewModel.pass2() != '';
                _this.viewModel.username() != '';
            });

            this.$root.find('.btn').on('click', this.submitSignup.bind(this));

            ko.applyBindings(this.viewModel);
        }

        _createClass(Signup, [{
            key: 'submitSignup',
            value: function submitSignup(e) {

                e.preventDefault();

                $.ajax({
                    url: "/api/user/createUser",
                    method: "POST",
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({
                        username: this.viewModel.username(),
                        email: this.viewModel.email(),
                        password: this.viewModel.pass()
                    })
                }).done(function (e) {
                    console.log(e);
                });
            }
        }]);

        return Signup;
    }();

    if ($('.signup-container').length) {
        var sign = new Signup('.signup-container');
    }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsIm1hcmsuanMiLCJib290c3RyYXAtdGFnc2lucHV0LmpzIiwiYm9vdHN0cmFwLmpzIiwia25vY2tvdXQuanMiLCJzbGljay5qcyIsInV0aWwuanMiLCJob21lLmpzIiwibG9naW4uanMiLCJzaWdudXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsOFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNwaUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4bERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlvRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhbGwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoKHR5cGVvZiBtb2R1bGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gXCJvYmplY3RcIiAmJiBfdHlwZW9mKG1vZHVsZS5leHBvcnRzKSA9PT0gXCJvYmplY3RcIikge1xuXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgPyBmYWN0b3J5KGdsb2JhbCwgdHJ1ZSkgOiBmdW5jdGlvbiAodykge1xuXHRcdFx0aWYgKCF3LmRvY3VtZW50KSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFjdG9yeSh3KTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoZ2xvYmFsKTtcblx0fVxuXG59KSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdW5kZWZpbmVkLCBmdW5jdGlvbiAod2luZG93LCBub0dsb2JhbCkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBhcnIgPSBbXTtcblxuXHR2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblx0dmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG5cdHZhciBfc2xpY2UgPSBhcnIuc2xpY2U7XG5cblx0dmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cblx0dmFyIHB1c2ggPSBhcnIucHVzaDtcblxuXHR2YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG5cdHZhciBjbGFzczJ0eXBlID0ge307XG5cblx0dmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxuXHR2YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuXHR2YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxuXHR2YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuXHR2YXIgc3VwcG9ydCA9IHt9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoY29kZSwgZG9jKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHR9XG5cblxuXHR2YXIgdmVyc2lvbiA9IFwiMy4yLjFcIixcblxuXG5cdGpRdWVyeSA9IGZ1bmN0aW9uIGpRdWVyeShzZWxlY3RvciwgY29udGV4dCkge1xuXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdChzZWxlY3RvciwgY29udGV4dCk7XG5cdH0sXG5cblxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdCAgICByZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cblxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24gZmNhbWVsQ2FzZShhbGwsIGxldHRlcikge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxuXHRqUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdFx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdFx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHRcdGxlbmd0aDogMCxcblxuXHRcdHRvQXJyYXk6IGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG5cdFx0XHRyZXR1cm4gX3NsaWNlLmNhbGwodGhpcyk7XG5cdFx0fSxcblxuXHRcdGdldDogZnVuY3Rpb24gZ2V0KG51bSkge1xuXG5cdFx0XHRpZiAobnVtID09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIF9zbGljZS5jYWxsKHRoaXMpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbbnVtICsgdGhpcy5sZW5ndGhdIDogdGhpc1tudW1dO1xuXHRcdH0sXG5cblx0XHRwdXNoU3RhY2s6IGZ1bmN0aW9uIHB1c2hTdGFjayhlbGVtcykge1xuXG5cdFx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMpO1xuXG5cdFx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSxcblxuXHRcdGVhY2g6IGZ1bmN0aW9uIGVhY2goY2FsbGJhY2spIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZWFjaCh0aGlzLCBjYWxsYmFjayk7XG5cdFx0fSxcblxuXHRcdG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soalF1ZXJ5Lm1hcCh0aGlzLCBmdW5jdGlvbiAoZWxlbSwgaSkge1xuXHRcdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbChlbGVtLCBpLCBlbGVtKTtcblx0XHRcdH0pKTtcblx0XHR9LFxuXG5cdFx0c2xpY2U6IGZ1bmN0aW9uIHNsaWNlKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKF9zbGljZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0XHR9LFxuXG5cdFx0Zmlyc3Q6IGZ1bmN0aW9uIGZpcnN0KCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZXEoMCk7XG5cdFx0fSxcblxuXHRcdGxhc3Q6IGZ1bmN0aW9uIGxhc3QoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcSgtMSk7XG5cdFx0fSxcblxuXHRcdGVxOiBmdW5jdGlvbiBlcShpKSB7XG5cdFx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHQgICAgaiA9ICtpICsgKGkgPCAwID8gbGVuIDogMCk7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soaiA+PSAwICYmIGogPCBsZW4gPyBbdGhpc1tqXV0gOiBbXSk7XG5cdFx0fSxcblxuXHRcdGVuZDogZnVuY3Rpb24gZW5kKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdFx0fSxcblxuXHRcdHB1c2g6IHB1c2gsXG5cdFx0c29ydDogYXJyLnNvcnQsXG5cdFx0c3BsaWNlOiBhcnIuc3BsaWNlXG5cdH07XG5cblx0alF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG9wdGlvbnMsXG5cdFx0ICAgIG5hbWUsXG5cdFx0ICAgIHNyYyxcblx0XHQgICAgY29weSxcblx0XHQgICAgY29weUlzQXJyYXksXG5cdFx0ICAgIGNsb25lLFxuXHRcdCAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0ICAgIGkgPSAxLFxuXHRcdCAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdCAgICBkZWVwID0gZmFsc2U7XG5cblx0XHRpZiAodHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIpIHtcblx0XHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHRcdHRhcmdldCA9IGFyZ3VtZW50c1tpXSB8fCB7fTtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRpZiAoKHR5cGVvZiB0YXJnZXQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0YXJnZXQpKSAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSkge1xuXHRcdFx0dGFyZ2V0ID0ge307XG5cdFx0fVxuXG5cdFx0aWYgKGkgPT09IGxlbmd0aCkge1xuXHRcdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRcdGktLTtcblx0XHR9XG5cblx0XHRmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cblx0XHRcdGlmICgob3B0aW9ucyA9IGFyZ3VtZW50c1tpXSkgIT0gbnVsbCkge1xuXG5cdFx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHRcdGNvcHkgPSBvcHRpb25zW25hbWVdO1xuXG5cdFx0XHRcdFx0aWYgKHRhcmdldCA9PT0gY29weSkge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGRlZXAgJiYgY29weSAmJiAoalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheShjb3B5KSkpKSB7XG5cblx0XHRcdFx0XHRcdGlmIChjb3B5SXNBcnJheSkge1xuXHRcdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0galF1ZXJ5LmV4dGVuZChkZWVwLCBjbG9uZSwgY29weSk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNvcHkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0gY29weTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9O1xuXG5cdGpRdWVyeS5leHRlbmQoe1xuXG5cdFx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICh2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXFxEL2csIFwiXCIpLFxuXG5cdFx0aXNSZWFkeTogdHJ1ZSxcblxuXHRcdGVycm9yOiBmdW5jdGlvbiBlcnJvcihtc2cpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihtc2cpO1xuXHRcdH0sXG5cblx0XHRub29wOiBmdW5jdGlvbiBub29wKCkge30sXG5cblx0XHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiBpc0Z1bmN0aW9uKG9iaikge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS50eXBlKG9iaikgPT09IFwiZnVuY3Rpb25cIjtcblx0XHR9LFxuXG5cdFx0aXNXaW5kb3c6IGZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuXHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0XHR9LFxuXG5cdFx0aXNOdW1lcmljOiBmdW5jdGlvbiBpc051bWVyaWMob2JqKSB7XG5cblx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUob2JqKTtcblx0XHRcdHJldHVybiAodHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiKSAmJlxuXG5cdFx0XHQhaXNOYU4ob2JqIC0gcGFyc2VGbG9hdChvYmopKTtcblx0XHR9LFxuXG5cdFx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcblx0XHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdFx0aWYgKCFvYmogfHwgdG9TdHJpbmcuY2FsbChvYmopICE9PSBcIltvYmplY3QgT2JqZWN0XVwiKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cHJvdG8gPSBnZXRQcm90byhvYmopO1xuXG5cdFx0XHRpZiAoIXByb3RvKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRDdG9yID0gaGFzT3duLmNhbGwocHJvdG8sIFwiY29uc3RydWN0b3JcIikgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoQ3RvcikgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHRcdH0sXG5cblx0XHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiBpc0VtcHR5T2JqZWN0KG9iaikge1xuXG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0Zm9yIChuYW1lIGluIG9iaikge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0dHlwZTogZnVuY3Rpb24gdHlwZShvYmopIHtcblx0XHRcdGlmIChvYmogPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICh0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID8gY2xhc3MydHlwZVt0b1N0cmluZy5jYWxsKG9iaildIHx8IFwib2JqZWN0XCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcblx0XHR9LFxuXG5cdFx0Z2xvYmFsRXZhbDogZnVuY3Rpb24gZ2xvYmFsRXZhbChjb2RlKSB7XG5cdFx0XHRET01FdmFsKGNvZGUpO1xuXHRcdH0sXG5cblx0XHRjYW1lbENhc2U6IGZ1bmN0aW9uIGNhbWVsQ2FzZShzdHJpbmcpIHtcblx0XHRcdHJldHVybiBzdHJpbmcucmVwbGFjZShybXNQcmVmaXgsIFwibXMtXCIpLnJlcGxhY2UocmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSk7XG5cdFx0fSxcblxuXHRcdGVhY2g6IGZ1bmN0aW9uIGVhY2gob2JqLCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGxlbmd0aCxcblx0XHRcdCAgICBpID0gMDtcblxuXHRcdFx0aWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcblx0XHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdFx0Zm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmIChjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yIChpIGluIG9iaikge1xuXHRcdFx0XHRcdGlmIChjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH0sXG5cblx0XHR0cmltOiBmdW5jdGlvbiB0cmltKHRleHQpIHtcblx0XHRcdHJldHVybiB0ZXh0ID09IG51bGwgPyBcIlwiIDogKHRleHQgKyBcIlwiKS5yZXBsYWNlKHJ0cmltLCBcIlwiKTtcblx0XHR9LFxuXG5cdFx0bWFrZUFycmF5OiBmdW5jdGlvbiBtYWtlQXJyYXkoYXJyLCByZXN1bHRzKSB7XG5cdFx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdFx0aWYgKGFyciAhPSBudWxsKSB7XG5cdFx0XHRcdGlmIChpc0FycmF5TGlrZShPYmplY3QoYXJyKSkpIHtcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UocmV0LCB0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID8gW2Fycl0gOiBhcnIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHB1c2guY2FsbChyZXQsIGFycik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9LFxuXG5cdFx0aW5BcnJheTogZnVuY3Rpb24gaW5BcnJheShlbGVtLCBhcnIsIGkpIHtcblx0XHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKGFyciwgZWxlbSwgaSk7XG5cdFx0fSxcblxuXHRcdG1lcmdlOiBmdW5jdGlvbiBtZXJnZShmaXJzdCwgc2Vjb25kKSB7XG5cdFx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHQgICAgaiA9IDAsXG5cdFx0XHQgICAgaSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdFx0Zm9yICg7IGogPCBsZW47IGorKykge1xuXHRcdFx0XHRmaXJzdFtpKytdID0gc2Vjb25kW2pdO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3Q7XG5cdFx0fSxcblxuXHRcdGdyZXA6IGZ1bmN0aW9uIGdyZXAoZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQpIHtcblx0XHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHQgICAgbWF0Y2hlcyA9IFtdLFxuXHRcdFx0ICAgIGkgPSAwLFxuXHRcdFx0ICAgIGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdCAgICBjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHRcdGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKGVsZW1zW2ldLCBpKTtcblx0XHRcdFx0aWYgKGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QpIHtcblx0XHRcdFx0XHRtYXRjaGVzLnB1c2goZWxlbXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaGVzO1xuXHRcdH0sXG5cblx0XHRtYXA6IGZ1bmN0aW9uIG1hcChlbGVtcywgY2FsbGJhY2ssIGFyZykge1xuXHRcdFx0dmFyIGxlbmd0aCxcblx0XHRcdCAgICB2YWx1ZSxcblx0XHRcdCAgICBpID0gMCxcblx0XHRcdCAgICByZXQgPSBbXTtcblxuXHRcdFx0aWYgKGlzQXJyYXlMaWtlKGVsZW1zKSkge1xuXHRcdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRcdGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKGVsZW1zW2ldLCBpLCBhcmcpO1xuXG5cdFx0XHRcdFx0aWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdHJldC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yIChpIGluIGVsZW1zKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayhlbGVtc1tpXSwgaSwgYXJnKTtcblxuXHRcdFx0XHRcdGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRyZXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjb25jYXQuYXBwbHkoW10sIHJldCk7XG5cdFx0fSxcblxuXHRcdGd1aWQ6IDEsXG5cblx0XHRwcm94eTogZnVuY3Rpb24gcHJveHkoZm4sIGNvbnRleHQpIHtcblx0XHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0XHRpZiAodHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dG1wID0gZm5bY29udGV4dF07XG5cdFx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdFx0Zm4gPSB0bXA7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghalF1ZXJ5LmlzRnVuY3Rpb24oZm4pKSB7XG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cblx0XHRcdGFyZ3MgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuXHRcdFx0cHJveHkgPSBmdW5jdGlvbiBwcm94eSgpIHtcblx0XHRcdFx0cmV0dXJuIGZuLmFwcGx5KGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoX3NsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuXHRcdFx0fTtcblxuXHRcdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRcdHJldHVybiBwcm94eTtcblx0XHR9LFxuXG5cdFx0bm93OiBEYXRlLm5vdyxcblxuXHRcdHN1cHBvcnQ6IHN1cHBvcnRcblx0fSk7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdGpRdWVyeS5mbltTeW1ib2wuaXRlcmF0b3JdID0gYXJyW1N5bWJvbC5pdGVyYXRvcl07XG5cdH1cblxuXHRqUXVlcnkuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAoaSwgbmFtZSkge1xuXHRcdGNsYXNzMnR5cGVbXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSk7XG5cblx0ZnVuY3Rpb24gaXNBcnJheUxpa2Uob2JqKSB7XG5cblx0XHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHQgICAgdHlwZSA9IGpRdWVyeS50eXBlKG9iaik7XG5cblx0XHRpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyhvYmopKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHwgdHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmIGxlbmd0aCAtIDEgaW4gb2JqO1xuXHR9XG5cdHZhciBTaXp6bGUgPVxuXHRmdW5jdGlvbiAod2luZG93KSB7XG5cblx0XHR2YXIgaSxcblx0XHQgICAgc3VwcG9ydCxcblx0XHQgICAgRXhwcixcblx0XHQgICAgZ2V0VGV4dCxcblx0XHQgICAgaXNYTUwsXG5cdFx0ICAgIHRva2VuaXplLFxuXHRcdCAgICBjb21waWxlLFxuXHRcdCAgICBzZWxlY3QsXG5cdFx0ICAgIG91dGVybW9zdENvbnRleHQsXG5cdFx0ICAgIHNvcnRJbnB1dCxcblx0XHQgICAgaGFzRHVwbGljYXRlLFxuXG5cblx0XHRzZXREb2N1bWVudCxcblx0XHQgICAgZG9jdW1lbnQsXG5cdFx0ICAgIGRvY0VsZW0sXG5cdFx0ICAgIGRvY3VtZW50SXNIVE1MLFxuXHRcdCAgICByYnVnZ3lRU0EsXG5cdFx0ICAgIHJidWdneU1hdGNoZXMsXG5cdFx0ICAgIG1hdGNoZXMsXG5cdFx0ICAgIGNvbnRhaW5zLFxuXG5cblx0XHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRcdCAgICBwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdFx0ICAgIGRpcnJ1bnMgPSAwLFxuXHRcdCAgICBkb25lID0gMCxcblx0XHQgICAgY2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdFx0ICAgIHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRcdCAgICBjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0XHQgICAgc29ydE9yZGVyID0gZnVuY3Rpb24gc29ydE9yZGVyKGEsIGIpIHtcblx0XHRcdGlmIChhID09PSBiKSB7XG5cdFx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9LFxuXG5cblx0XHRoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eSxcblx0XHQgICAgYXJyID0gW10sXG5cdFx0ICAgIHBvcCA9IGFyci5wb3AsXG5cdFx0ICAgIHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdFx0ICAgIHB1c2ggPSBhcnIucHVzaCxcblx0XHQgICAgc2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0XHRpbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihsaXN0LCBlbGVtKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHQgICAgbGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGlmIChsaXN0W2ldID09PSBlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiAtMTtcblx0XHR9LFxuXHRcdCAgICBib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXG5cblx0XHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cblx0XHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cblx0XHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXHRcdCAgICBwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0XCIuKlwiICsgXCIpXFxcXCl8KVwiLFxuXG5cblx0XHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAod2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiksXG5cdFx0ICAgIHJ0cmltID0gbmV3IFJlZ0V4cChcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiksXG5cdFx0ICAgIHJjb21tYSA9IG5ldyBSZWdFeHAoXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiKSxcblx0XHQgICAgcmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cChcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIpLFxuXHRcdCAgICByYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cChcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiKSxcblx0XHQgICAgcnBzZXVkbyA9IG5ldyBSZWdFeHAocHNldWRvcyksXG5cdFx0ICAgIHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cChcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiksXG5cdFx0ICAgIG1hdGNoRXhwciA9IHtcblx0XHRcdFwiSURcIjogbmV3IFJlZ0V4cChcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiKSxcblx0XHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cChcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiksXG5cdFx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIpLFxuXHRcdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoXCJeXCIgKyBhdHRyaWJ1dGVzKSxcblx0XHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoXCJeXCIgKyBwc2V1ZG9zKSxcblx0XHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cChcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiKSxcblx0XHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiKSxcblx0XHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIilcblx0XHR9LFxuXHRcdCAgICByaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0XHQgICAgcmhlYWRlciA9IC9eaFxcZCQvaSxcblx0XHQgICAgcm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblxuXHRcdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblx0XHQgICAgcnNpYmxpbmcgPSAvWyt+XS8sXG5cblxuXHRcdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIpLFxuXHRcdCAgICBmdW5lc2NhcGUgPSBmdW5jdGlvbiBmdW5lc2NhcGUoXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UpIHtcblx0XHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/IGVzY2FwZWQgOiBoaWdoIDwgMCA/XG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKGhpZ2ggKyAweDEwMDAwKSA6XG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCk7XG5cdFx0fSxcblxuXG5cdFx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRcdCAgICBmY3NzZXNjYXBlID0gZnVuY3Rpb24gZmNzc2VzY2FwZShjaCwgYXNDb2RlUG9pbnQpIHtcblx0XHRcdGlmIChhc0NvZGVQb2ludCkge1xuXG5cdFx0XHRcdGlmIChjaCA9PT0gXCJcXDBcIikge1xuXHRcdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBjaC5zbGljZSgwLCAtMSkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoY2gubGVuZ3RoIC0gMSkudG9TdHJpbmcoMTYpICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHRcdH0sXG5cblxuXHRcdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbiB1bmxvYWRIYW5kbGVyKCkge1xuXHRcdFx0c2V0RG9jdW1lbnQoKTtcblx0XHR9LFxuXHRcdCAgICBkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sIHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRwdXNoLmFwcGx5KGFyciA9IHNsaWNlLmNhbGwocHJlZmVycmVkRG9jLmNoaWxkTm9kZXMpLCBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcyk7XG5cdFx0XHRhcnJbcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHRcdFx0ZnVuY3Rpb24gKHRhcmdldCwgZWxzKSB7XG5cdFx0XHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkodGFyZ2V0LCBzbGljZS5jYWxsKGVscykpO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiAodGFyZ2V0LCBlbHMpIHtcblx0XHRcdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdFx0ICAgIGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSB7fVxuXHRcdFx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBTaXp6bGUoc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQpIHtcblx0XHRcdHZhciBtLFxuXHRcdFx0ICAgIGksXG5cdFx0XHQgICAgZWxlbSxcblx0XHRcdCAgICBuaWQsXG5cdFx0XHQgICAgbWF0Y2gsXG5cdFx0XHQgICAgZ3JvdXBzLFxuXHRcdFx0ICAgIG5ld1NlbGVjdG9yLFxuXHRcdFx0ICAgIG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXG5cdFx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRcdFx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRcdGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8IG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSkge1xuXG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXNlZWQpIHtcblxuXHRcdFx0XHRpZiAoKGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYykgIT09IGRvY3VtZW50KSB7XG5cdFx0XHRcdFx0c2V0RG9jdW1lbnQoY29udGV4dCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRcdFx0aWYgKGRvY3VtZW50SXNIVE1MKSB7XG5cblx0XHRcdFx0XHRpZiAobm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyhzZWxlY3RvcikpKSB7XG5cblx0XHRcdFx0XHRcdGlmIChtID0gbWF0Y2hbMV0pIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAobm9kZVR5cGUgPT09IDkpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQobSkpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGVsZW0uaWQgPT09IG0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKGVsZW0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAobmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQobSkpICYmIGNvbnRhaW5zKGNvbnRleHQsIGVsZW0pICYmIGVsZW0uaWQgPT09IG0pIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKGVsZW0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAobWF0Y2hbMl0pIHtcblx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseShyZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKSk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUpIHtcblxuXHRcdFx0XHRcdFx0XHRwdXNoLmFwcGx5KHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShtKSk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChzdXBwb3J0LnFzYSAmJiAhY29tcGlsZXJDYWNoZVtzZWxlY3RvciArIFwiIFwiXSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3Qoc2VsZWN0b3IpKSkge1xuXG5cdFx0XHRcdFx0XHRpZiAobm9kZVR5cGUgIT09IDEpIHtcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKFwiaWRcIikpIHtcblx0XHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZShyY3NzZXNjYXBlLCBmY3NzZXNjYXBlKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZShcImlkXCIsIG5pZCA9IGV4cGFuZG8pO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoc2VsZWN0b3IpO1xuXHRcdFx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKGdyb3Vwc1tpXSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbihcIixcIik7XG5cblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3Qoc2VsZWN0b3IpICYmIHRlc3RDb250ZXh0KGNvbnRleHQucGFyZW50Tm9kZSkgfHwgY29udGV4dDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKG5ld1NlbGVjdG9yKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseShyZXN1bHRzLCBuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwobmV3U2VsZWN0b3IpKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAocXNhRXJyb3IpIHt9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChuaWQgPT09IGV4cGFuZG8pIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZWxlY3Qoc2VsZWN0b3IucmVwbGFjZShydHJpbSwgXCIkMVwiKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdFx0XHR2YXIga2V5cyA9IFtdO1xuXG5cdFx0XHRmdW5jdGlvbiBjYWNoZShrZXksIHZhbHVlKSB7XG5cdFx0XHRcdGlmIChrZXlzLnB1c2goa2V5ICsgXCIgXCIpID4gRXhwci5jYWNoZUxlbmd0aCkge1xuXHRcdFx0XHRcdGRlbGV0ZSBjYWNoZVtrZXlzLnNoaWZ0KCldO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBjYWNoZVtrZXkgKyBcIiBcIl0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjYWNoZTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtYXJrRnVuY3Rpb24oZm4pIHtcblx0XHRcdGZuW2V4cGFuZG9dID0gdHJ1ZTtcblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhc3NlcnQoZm4pIHtcblx0XHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmV0dXJuICEhZm4oZWwpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRpZiAoZWwucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRIYW5kbGUoYXR0cnMsIGhhbmRsZXIpIHtcblx0XHRcdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0XHQgICAgaSA9IGFyci5sZW5ndGg7XG5cblx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0RXhwci5hdHRySGFuZGxlW2FycltpXV0gPSBoYW5kbGVyO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNpYmxpbmdDaGVjayhhLCBiKSB7XG5cdFx0XHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdFx0ICAgIGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmIGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdFx0XHRpZiAoZGlmZikge1xuXHRcdFx0XHRyZXR1cm4gZGlmZjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGN1cikge1xuXHRcdFx0XHR3aGlsZSAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSB7XG5cdFx0XHRcdFx0aWYgKGN1ciA9PT0gYikge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYSA/IDEgOiAtMTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyh0eXBlKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8odHlwZSkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKGRpc2FibGVkKSB7XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuXG5cdFx0XHRcdGlmIChcImZvcm1cIiBpbiBlbGVtKSB7XG5cblx0XHRcdFx0XHRpZiAoZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0XHRcdGlmIChcImxhYmVsXCIgaW4gZWxlbSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJiBkaXNhYmxlZEFuY2VzdG9yKGVsZW0pID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHRcdFx0fSBlbHNlIGlmIChcImxhYmVsXCIgaW4gZWxlbSkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmbikge1xuXHRcdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiAoYXJndW1lbnQpIHtcblx0XHRcdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0XHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24gKHNlZWQsIG1hdGNoZXMpIHtcblx0XHRcdFx0XHR2YXIgaixcblx0XHRcdFx0XHQgICAgbWF0Y2hJbmRleGVzID0gZm4oW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCksXG5cdFx0XHRcdFx0ICAgIGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdFx0aWYgKHNlZWRbaiA9IG1hdGNoSW5kZXhlc1tpXV0pIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB0ZXN0Q29udGV4dChjb250ZXh0KSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xuXHRcdH1cblxuXHRcdHN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG5cdFx0aXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xuXHRcdH07XG5cblx0XHRzZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uIChub2RlKSB7XG5cdFx0XHR2YXIgaGFzQ29tcGFyZSxcblx0XHRcdCAgICBzdWJXaW5kb3csXG5cdFx0XHQgICAgZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdFx0XHRpZiAoZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQpIHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRkb2N1bWVudCA9IGRvYztcblx0XHRcdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTChkb2N1bWVudCk7XG5cblx0XHRcdGlmIChwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmIChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93KSB7XG5cblx0XHRcdFx0aWYgKHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG5cdFx0XHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UpO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoc3ViV2luZG93LmF0dGFjaEV2ZW50KSB7XG5cdFx0XHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXG5cdFx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdFx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0XHRcdH0pO1xuXG5cblx0XHRcdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdGVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikpO1xuXHRcdFx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdFx0XHR9KTtcblxuXHRcdFx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUpO1xuXG5cdFx0XHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoZWwpLmlkID0gZXhwYW5kbztcblx0XHRcdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoZXhwYW5kbykubGVuZ3RoO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChzdXBwb3J0LmdldEJ5SWQpIHtcblx0XHRcdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKTtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblx0XHRcdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiAoaWQsIGNvbnRleHQpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwpIHtcblx0XHRcdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZChpZCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbSA/IFtlbGVtXSA6IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiAoaWQpIHtcblx0XHRcdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSk7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uIChpZCwgY29udGV4dCkge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCkge1xuXHRcdFx0XHRcdFx0dmFyIG5vZGUsXG5cdFx0XHRcdFx0XHQgICAgaSxcblx0XHRcdFx0XHRcdCAgICBlbGVtcyxcblx0XHRcdFx0XHRcdCAgICBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZChpZCk7XG5cblx0XHRcdFx0XHRcdGlmIChlbGVtKSB7XG5cblx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0XHRpZiAobm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBbZWxlbV07XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoaWQpO1xuXHRcdFx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKGVsZW0gPSBlbGVtc1tpKytdKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChub2RlICYmIG5vZGUudmFsdWUgPT09IGlkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gW2VsZW1dO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID8gZnVuY3Rpb24gKHRhZywgY29udGV4dCkge1xuXHRcdFx0XHRpZiAodHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWcpO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoc3VwcG9ydC5xc2EpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHRhZyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gOiBmdW5jdGlvbiAodGFnLCBjb250ZXh0KSB7XG5cdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHQgICAgdG1wID0gW10sXG5cdFx0XHRcdCAgICBpID0gMCxcblxuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWcpO1xuXG5cdFx0XHRcdGlmICh0YWcgPT09IFwiKlwiKSB7XG5cdFx0XHRcdFx0d2hpbGUgKGVsZW0gPSByZXN1bHRzW2krK10pIHtcblx0XHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdHRtcC5wdXNoKGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHR9O1xuXG5cdFx0XHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiAoY2xhc3NOYW1lLCBjb250ZXh0KSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cblxuXHRcdFx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdFx0XHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRcdFx0aWYgKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpKSB7XG5cdFx0XHRcdGFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKGVsKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICsgXCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArIFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0XHRcdGlmIChlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgKyBcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiaGlkZGVuXCIpO1xuXHRcdFx0XHRcdGVsLmFwcGVuZENoaWxkKGlucHV0KS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwiRFwiKTtcblxuXHRcdFx0XHRcdGlmIChlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyKSB7XG5cdFx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoZWwpLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRpZiAoZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIpIHtcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHwgZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8IGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpKSB7XG5cblx0XHRcdFx0YXNzZXJ0KGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoZWwsIFwiKlwiKTtcblxuXHRcdFx0XHRcdG1hdGNoZXMuY2FsbChlbCwgXCJbcyE9JyddOnhcIik7XG5cdFx0XHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKFwiIT1cIiwgcHNldWRvcyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAocmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpKTtcblx0XHRcdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKHJidWdneU1hdGNoZXMuam9pbihcInxcIikpO1xuXG5cdFx0XHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24pO1xuXG5cdFx0XHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KGRvY0VsZW0uY29udGFpbnMpID8gZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0ICAgIGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKGFkb3duLmNvbnRhaW5zID8gYWRvd24uY29udGFpbnMoYnVwKSA6IGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihidXApICYgMTYpKTtcblx0XHRcdH0gOiBmdW5jdGlvbiAoYSwgYikge1xuXHRcdFx0XHRpZiAoYikge1xuXHRcdFx0XHRcdHdoaWxlIChiID0gYi5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0XHRpZiAoYiA9PT0gYSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblxuXG5cdFx0XHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID8gZnVuY3Rpb24gKGEsIGIpIHtcblxuXHRcdFx0XHRpZiAoYSA9PT0gYikge1xuXHRcdFx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0XHRcdGlmIChjb21wYXJlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb21wYXJlID0gKGEub3duZXJEb2N1bWVudCB8fCBhKSA9PT0gKGIub3duZXJEb2N1bWVudCB8fCBiKSA/IGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgOlxuXG5cdFx0XHRcdDE7XG5cblx0XHRcdFx0aWYgKGNvbXBhcmUgJiAxIHx8ICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGEpID09PSBjb21wYXJlKSB7XG5cblx0XHRcdFx0XHRpZiAoYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/IGluZGV4T2Yoc29ydElucHV0LCBhKSAtIGluZGV4T2Yoc29ydElucHV0LCBiKSA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdFx0XHR9IDogZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdFx0aWYgKGEgPT09IGIpIHtcblx0XHRcdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGN1cixcblx0XHRcdFx0ICAgIGkgPSAwLFxuXHRcdFx0XHQgICAgYXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0XHQgICAgYnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0XHQgICAgYXAgPSBbYV0sXG5cdFx0XHRcdCAgICBicCA9IFtiXTtcblxuXHRcdFx0XHRpZiAoIWF1cCB8fCAhYnVwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOiBiID09PSBkb2N1bWVudCA/IDEgOiBhdXAgPyAtMSA6IGJ1cCA/IDEgOiBzb3J0SW5wdXQgPyBpbmRleE9mKHNvcnRJbnB1dCwgYSkgLSBpbmRleE9mKHNvcnRJbnB1dCwgYikgOiAwO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoYXVwID09PSBidXApIHtcblx0XHRcdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKGEsIGIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VyID0gYTtcblx0XHRcdFx0d2hpbGUgKGN1ciA9IGN1ci5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0YXAudW5zaGlmdChjdXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1ciA9IGI7XG5cdFx0XHRcdHdoaWxlIChjdXIgPSBjdXIucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdGJwLnVuc2hpZnQoY3VyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHdoaWxlIChhcFtpXSA9PT0gYnBbaV0pIHtcblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gaSA/XG5cdFx0XHRcdHNpYmxpbmdDaGVjayhhcFtpXSwgYnBbaV0pIDpcblxuXHRcdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOiBicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6IDA7XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdFx0fTtcblxuXHRcdFNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24gKGV4cHIsIGVsZW1lbnRzKSB7XG5cdFx0XHRyZXR1cm4gU2l6emxlKGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzKTtcblx0XHR9O1xuXG5cdFx0U2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uIChlbGVtLCBleHByKSB7XG5cdFx0XHRpZiAoKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKSAhPT0gZG9jdW1lbnQpIHtcblx0XHRcdFx0c2V0RG9jdW1lbnQoZWxlbSk7XG5cdFx0XHR9XG5cblx0XHRcdGV4cHIgPSBleHByLnJlcGxhY2UocmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIik7XG5cblx0XHRcdGlmIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJiAhY29tcGlsZXJDYWNoZVtleHByICsgXCIgXCJdICYmICghcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KGV4cHIpKSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoZXhwcikpKSB7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKGVsZW0sIGV4cHIpO1xuXG5cdFx0XHRcdFx0aWYgKHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBTaXp6bGUoZXhwciwgZG9jdW1lbnQsIG51bGwsIFtlbGVtXSkubGVuZ3RoID4gMDtcblx0XHR9O1xuXG5cdFx0U2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24gKGNvbnRleHQsIGVsZW0pIHtcblx0XHRcdGlmICgoY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQpICE9PSBkb2N1bWVudCkge1xuXHRcdFx0XHRzZXREb2N1bWVudChjb250ZXh0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjb250YWlucyhjb250ZXh0LCBlbGVtKTtcblx0XHR9O1xuXG5cdFx0U2l6emxlLmF0dHIgPSBmdW5jdGlvbiAoZWxlbSwgbmFtZSkge1xuXHRcdFx0aWYgKChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkgIT09IGRvY3VtZW50KSB7XG5cdFx0XHRcdHNldERvY3VtZW50KGVsZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbbmFtZS50b0xvd2VyQ2FzZSgpXSxcblxuXHRcdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkpID8gZm4oZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MKSA6IHVuZGVmaW5lZDtcblxuXHRcdFx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID8gdmFsIDogc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/IGVsZW0uZ2V0QXR0cmlidXRlKG5hbWUpIDogKHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/IHZhbC52YWx1ZSA6IG51bGw7XG5cdFx0fTtcblxuXHRcdFNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiAoc2VsKSB7XG5cdFx0XHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UocmNzc2VzY2FwZSwgZmNzc2VzY2FwZSk7XG5cdFx0fTtcblxuXHRcdFNpenpsZS5lcnJvciA9IGZ1bmN0aW9uIChtc2cpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnKTtcblx0XHR9O1xuXG5cdFx0U2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiAocmVzdWx0cykge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHQgICAgZHVwbGljYXRlcyA9IFtdLFxuXHRcdFx0ICAgIGogPSAwLFxuXHRcdFx0ICAgIGkgPSAwO1xuXG5cdFx0XHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRcdFx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKDApO1xuXHRcdFx0cmVzdWx0cy5zb3J0KHNvcnRPcmRlcik7XG5cblx0XHRcdGlmIChoYXNEdXBsaWNhdGUpIHtcblx0XHRcdFx0d2hpbGUgKGVsZW0gPSByZXN1bHRzW2krK10pIHtcblx0XHRcdFx0XHRpZiAoZWxlbSA9PT0gcmVzdWx0c1tpXSkge1xuXHRcdFx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaChpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0d2hpbGUgKGotLSkge1xuXHRcdFx0XHRcdHJlc3VsdHMuc3BsaWNlKGR1cGxpY2F0ZXNbal0sIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0XHRnZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0dmFyIG5vZGUsXG5cdFx0XHQgICAgcmV0ID0gXCJcIixcblx0XHRcdCAgICBpID0gMCxcblx0XHRcdCAgICBub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHRcdGlmICghbm9kZVR5cGUpIHtcblx0XHRcdFx0d2hpbGUgKG5vZGUgPSBlbGVtW2krK10pIHtcblx0XHRcdFx0XHRyZXQgKz0gZ2V0VGV4dChub2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm9yIChlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZykge1xuXHRcdFx0XHRcdFx0cmV0ICs9IGdldFRleHQoZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0KSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9O1xuXG5cdFx0RXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0XHRcdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRcdFx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0XHRcdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0XHRcdGF0dHJIYW5kbGU6IHt9LFxuXG5cdFx0XHRmaW5kOiB7fSxcblxuXHRcdFx0cmVsYXRpdmU6IHtcblx0XHRcdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdFx0XHR9LFxuXG5cdFx0XHRwcmVGaWx0ZXI6IHtcblx0XHRcdFx0XCJBVFRSXCI6IGZ1bmN0aW9uIEFUVFIobWF0Y2gpIHtcblx0XHRcdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpO1xuXG5cdFx0XHRcdFx0bWF0Y2hbM10gPSAobWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIikucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSk7XG5cblx0XHRcdFx0XHRpZiAobWF0Y2hbMl0gPT09IFwifj1cIikge1xuXHRcdFx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKDAsIDQpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiQ0hJTERcIjogZnVuY3Rpb24gQ0hJTEQobWF0Y2gpIHtcblx0XHRcdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdFx0XHRpZiAobWF0Y2hbMV0uc2xpY2UoMCwgMykgPT09IFwibnRoXCIpIHtcblx0XHRcdFx0XHRcdGlmICghbWF0Y2hbM10pIHtcblx0XHRcdFx0XHRcdFx0U2l6emxlLmVycm9yKG1hdGNoWzBdKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWF0Y2hbNF0gPSArKG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIikpO1xuXHRcdFx0XHRcdFx0bWF0Y2hbNV0gPSArKG1hdGNoWzddICsgbWF0Y2hbOF0gfHwgbWF0Y2hbM10gPT09IFwib2RkXCIpO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChtYXRjaFszXSkge1xuXHRcdFx0XHRcdFx0U2l6emxlLmVycm9yKG1hdGNoWzBdKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24gUFNFVURPKG1hdGNoKSB7XG5cdFx0XHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0XHQgICAgdW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdFx0XHRpZiAobWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdChtYXRjaFswXSkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChtYXRjaFszXSkge1xuXHRcdFx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QodW5xdW90ZWQpICYmIChcblx0XHRcdFx0XHRleGNlc3MgPSB0b2tlbml6ZSh1bnF1b3RlZCwgdHJ1ZSkpICYmIChcblx0XHRcdFx0XHRleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MpIC0gdW5xdW90ZWQubGVuZ3RoKSkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKDAsIGV4Y2Vzcyk7XG5cdFx0XHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKDAsIGV4Y2Vzcyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKDAsIDMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRmaWx0ZXI6IHtcblxuXHRcdFx0XHRcIlRBR1wiOiBmdW5jdGlvbiBUQUcobm9kZU5hbWVTZWxlY3Rvcikge1xuXHRcdFx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSkudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgPyBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9IDogZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uIENMQVNTKGNsYXNzTmFtZSkge1xuXHRcdFx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVtjbGFzc05hbWUgKyBcIiBcIl07XG5cblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybiB8fCAocGF0dGVybiA9IG5ldyBSZWdFeHAoXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIpKSAmJiBjbGFzc0NhY2hlKGNsYXNzTmFtZSwgZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QodHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiQVRUUlwiOiBmdW5jdGlvbiBBVFRSKG5hbWUsIG9wZXJhdG9yLCBjaGVjaykge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKGVsZW0sIG5hbWUpO1xuXG5cdFx0XHRcdFx0XHRpZiAocmVzdWx0ID09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wZXJhdG9yKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOiBvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6IG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZihjaGVjaykgPT09IDAgOiBvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoY2hlY2spID4gLTEgOiBvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKC1jaGVjay5sZW5ndGgpID09PSBjaGVjayA6IG9wZXJhdG9yID09PSBcIn49XCIgPyAoXCIgXCIgKyByZXN1bHQucmVwbGFjZShyd2hpdGVzcGFjZSwgXCIgXCIpICsgXCIgXCIpLmluZGV4T2YoY2hlY2spID4gLTEgOiBvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoMCwgY2hlY2subGVuZ3RoICsgMSkgPT09IGNoZWNrICsgXCItXCIgOiBmYWxzZTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiQ0hJTERcIjogZnVuY3Rpb24gQ0hJTEQodHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0KSB7XG5cdFx0XHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoMCwgMykgIT09IFwibnRoXCIsXG5cdFx0XHRcdFx0ICAgIGZvcndhcmQgPSB0eXBlLnNsaWNlKC00KSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdFx0ICAgIG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdFx0ZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHR9IDogZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHRcdFx0dmFyIGNhY2hlLFxuXHRcdFx0XHRcdFx0ICAgIHVuaXF1ZUNhY2hlLFxuXHRcdFx0XHRcdFx0ICAgIG91dGVyQ2FjaGUsXG5cdFx0XHRcdFx0XHQgICAgbm9kZSxcblx0XHRcdFx0XHRcdCAgICBub2RlSW5kZXgsXG5cdFx0XHRcdFx0XHQgICAgc3RhcnQsXG5cdFx0XHRcdFx0XHQgICAgZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdCAgICBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHQgICAgbmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHQgICAgdXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHQgICAgZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0XHRpZiAocGFyZW50KSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKHNpbXBsZSkge1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlIChkaXIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUgKG5vZGUgPSBub2RlW2Rpcl0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHN0YXJ0ID0gW2ZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGRdO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChmb3J3YXJkICYmIHVzZUNhY2hlKSB7XG5cblxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbZXhwYW5kb10gfHwgKG5vZGVbZXhwYW5kb10gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gfHwgKG91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlW3R5cGVdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzFdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbMl07XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1tub2RlSW5kZXhdO1xuXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbZGlyXSB8fCAoXG5cblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbdHlwZV0gPSBbZGlycnVucywgbm9kZUluZGV4LCBkaWZmXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGlmICh1c2VDYWNoZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVtleHBhbmRvXSB8fCAobm9kZVtleHBhbmRvXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlW25vZGUudW5pcXVlSURdIHx8IChvdXRlckNhY2hlW25vZGUudW5pcXVlSURdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlW3R5cGVdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07XG5cdFx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGlmIChkaWZmID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUgKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbZGlyXSB8fCAoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKChvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxKSAmJiArK2RpZmYpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICh1c2VDYWNoZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbZXhwYW5kb10gfHwgKG5vZGVbZXhwYW5kb10gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVtub2RlLnVuaXF1ZUlEXSB8fCAob3V0ZXJDYWNoZVtub2RlLnVuaXF1ZUlEXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbdHlwZV0gPSBbZGlycnVucywgZGlmZl07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKG5vZGUgPT09IGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8IGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uIFBTRVVETyhwc2V1ZG8sIGFyZ3VtZW50KSB7XG5cdFx0XHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdFx0ICAgIGZuID0gRXhwci5wc2V1ZG9zW3BzZXVkb10gfHwgRXhwci5zZXRGaWx0ZXJzW3BzZXVkby50b0xvd2VyQ2FzZSgpXSB8fCBTaXp6bGUuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvKTtcblxuXHRcdFx0XHRcdGlmIChmbltleHBhbmRvXSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKGFyZ3VtZW50KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoZm4ubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0YXJncyA9IFtwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnRdO1xuXHRcdFx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShwc2V1ZG8udG9Mb3dlckNhc2UoKSkgPyBtYXJrRnVuY3Rpb24oZnVuY3Rpb24gKHNlZWQsIG1hdGNoZXMpIHtcblx0XHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0ICAgIG1hdGNoZWQgPSBmbihzZWVkLCBhcmd1bWVudCksXG5cdFx0XHRcdFx0XHRcdCAgICBpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKHNlZWQsIG1hdGNoZWRbaV0pO1xuXHRcdFx0XHRcdFx0XHRcdHNlZWRbaWR4XSA9ICEobWF0Y2hlc1tpZHhdID0gbWF0Y2hlZFtpXSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pIDogZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZuKGVsZW0sIDAsIGFyZ3MpO1xuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gZm47XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdHBzZXVkb3M6IHtcblx0XHRcdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuXHRcdFx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRcdCAgICByZXN1bHRzID0gW10sXG5cdFx0XHRcdFx0ICAgIG1hdGNoZXIgPSBjb21waWxlKHNlbGVjdG9yLnJlcGxhY2UocnRyaW0sIFwiJDFcIikpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXJbZXhwYW5kb10gPyBtYXJrRnVuY3Rpb24oZnVuY3Rpb24gKHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHQgICAgdW5tYXRjaGVkID0gbWF0Y2hlcihzZWVkLCBudWxsLCB4bWwsIFtdKSxcblx0XHRcdFx0XHRcdCAgICBpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHRcdFx0aWYgKGVsZW0gPSB1bm1hdGNoZWRbaV0pIHtcblx0XHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6IGZ1bmN0aW9uIChlbGVtLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRcdG1hdGNoZXIoaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyk7XG5cdFx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFNpenpsZShzZWxlY3RvciwgZWxlbSkubGVuZ3RoID4gMDtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiAodGV4dCkge1xuXHRcdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpO1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIChlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoZWxlbSkpLmluZGV4T2YodGV4dCkgPiAtMTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChsYW5nKSB7XG5cdFx0XHRcdFx0aWYgKCFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikpIHtcblx0XHRcdFx0XHRcdFNpenpsZS5lcnJvcihcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0XHRcdGlmIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID8gZWxlbS5sYW5nIDogZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpIHtcblxuXHRcdFx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZihsYW5nICsgXCItXCIpID09PSAwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IHdoaWxlICgoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24gdGFyZ2V0KGVsZW0pIHtcblx0XHRcdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKDEpID09PSBlbGVtLmlkO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwicm9vdFwiOiBmdW5jdGlvbiByb290KGVsZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uIGZvY3VzKGVsZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyhmYWxzZSksXG5cdFx0XHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8odHJ1ZSksXG5cblx0XHRcdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uIGNoZWNrZWQoZWxlbSkge1xuXHRcdFx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCB8fCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQ7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiBzZWxlY3RlZChlbGVtKSB7XG5cdFx0XHRcdFx0aWYgKGVsZW0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiBlbXB0eShlbGVtKSB7XG5cdFx0XHRcdFx0Zm9yIChlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZykge1xuXHRcdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPCA2KSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24gcGFyZW50KGVsZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKGVsZW0pO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uIGhlYWRlcihlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdChlbGVtLm5vZGVOYW1lKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcImlucHV0XCI6IGZ1bmN0aW9uIGlucHV0KGVsZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KGVsZW0ubm9kZU5hbWUpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uIGJ1dHRvbihlbGVtKSB7XG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRcInRleHRcIjogZnVuY3Rpb24gdGV4dChlbGVtKSB7XG5cdFx0XHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiYgKFxuXG5cdFx0XHRcdFx0KGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIik7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gWzBdO1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiAobWF0Y2hJbmRleGVzLCBsZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gW2xlbmd0aCAtIDFdO1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24gKG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCkge1xuXHRcdFx0XHRcdHJldHVybiBbYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudF07XG5cdFx0XHRcdH0pLFxuXG5cdFx0XHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uIChtYXRjaEluZGV4ZXMsIGxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpID0gMDtcblx0XHRcdFx0XHRmb3IgKDsgaSA8IGxlbmd0aDsgaSArPSAyKSB7XG5cdFx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaChpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiAobWF0Y2hJbmRleGVzLCBsZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRcdFx0Zm9yICg7IGkgPCBsZW5ndGg7IGkgKz0gMikge1xuXHRcdFx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0XHRcdH0pLFxuXG5cdFx0XHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiAobWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50KSB7XG5cdFx0XHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0XHRcdGZvciAoOyAtLWkgPj0gMDspIHtcblx0XHRcdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKGkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdFx0XHR9KSxcblxuXHRcdFx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24gKG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCkge1xuXHRcdFx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdFx0XHRmb3IgKDsgKytpIDwgbGVuZ3RoOykge1xuXHRcdFx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdEV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG5cdFx0Zm9yIChpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSkge1xuXHRcdFx0RXhwci5wc2V1ZG9zW2ldID0gY3JlYXRlSW5wdXRQc2V1ZG8oaSk7XG5cdFx0fVxuXHRcdGZvciAoaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSkge1xuXHRcdFx0RXhwci5wc2V1ZG9zW2ldID0gY3JlYXRlQnV0dG9uUHNldWRvKGkpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuXHRcdHNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuXHRcdEV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cblx0XHR0b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChzZWxlY3RvciwgcGFyc2VPbmx5KSB7XG5cdFx0XHR2YXIgbWF0Y2hlZCxcblx0XHRcdCAgICBtYXRjaCxcblx0XHRcdCAgICB0b2tlbnMsXG5cdFx0XHQgICAgdHlwZSxcblx0XHRcdCAgICBzb0Zhcixcblx0XHRcdCAgICBncm91cHMsXG5cdFx0XHQgICAgcHJlRmlsdGVycyxcblx0XHRcdCAgICBjYWNoZWQgPSB0b2tlbkNhY2hlW3NlbGVjdG9yICsgXCIgXCJdO1xuXG5cdFx0XHRpZiAoY2FjaGVkKSB7XG5cdFx0XHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKDApO1xuXHRcdFx0fVxuXG5cdFx0XHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRcdFx0Z3JvdXBzID0gW107XG5cdFx0XHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0XHRcdHdoaWxlIChzb0Zhcikge1xuXG5cdFx0XHRcdGlmICghbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyhzb0ZhcikpKSB7XG5cdFx0XHRcdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKG1hdGNoWzBdLmxlbmd0aCkgfHwgc29GYXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGdyb3Vwcy5wdXNoKHRva2VucyA9IFtdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRpZiAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyhzb0ZhcikpIHtcblx0XHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UocnRyaW0sIFwiIFwiKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UobWF0Y2hlZC5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh0eXBlIGluIEV4cHIuZmlsdGVyKSB7XG5cdFx0XHRcdFx0aWYgKChtYXRjaCA9IG1hdGNoRXhwclt0eXBlXS5leGVjKHNvRmFyKSkgJiYgKCFwcmVGaWx0ZXJzW3R5cGVdIHx8IChtYXRjaCA9IHByZUZpbHRlcnNbdHlwZV0obWF0Y2gpKSkpIHtcblx0XHRcdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZShtYXRjaGVkLmxlbmd0aCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFtYXRjaGVkKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHBhcnNlT25seSA/IHNvRmFyLmxlbmd0aCA6IHNvRmFyID8gU2l6emxlLmVycm9yKHNlbGVjdG9yKSA6XG5cdFx0XHR0b2tlbkNhY2hlKHNlbGVjdG9yLCBncm91cHMpLnNsaWNlKDApO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiB0b1NlbGVjdG9yKHRva2Vucykge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0ICAgIGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0XHQgICAgc2VsZWN0b3IgPSBcIlwiO1xuXHRcdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYWRkQ29tYmluYXRvcihtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlKSB7XG5cdFx0XHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0XHQgICAgc2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRcdCAgICBrZXkgPSBza2lwIHx8IGRpcixcblx0XHRcdCAgICBjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdFx0ICAgIGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdFx0XHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0XHRmdW5jdGlvbiAoZWxlbSwgY29udGV4dCwgeG1sKSB7XG5cdFx0XHRcdHdoaWxlIChlbGVtID0gZWxlbVtkaXJdKSB7XG5cdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cykge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoZWxlbSwgY29udGV4dCwgeG1sKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSA6XG5cblx0XHRcdGZ1bmN0aW9uIChlbGVtLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdFx0dmFyIG9sZENhY2hlLFxuXHRcdFx0XHQgICAgdW5pcXVlQ2FjaGUsXG5cdFx0XHRcdCAgICBvdXRlckNhY2hlLFxuXHRcdFx0XHQgICAgbmV3Q2FjaGUgPSBbZGlycnVucywgZG9uZU5hbWVdO1xuXG5cdFx0XHRcdGlmICh4bWwpIHtcblx0XHRcdFx0XHR3aGlsZSAoZWxlbSA9IGVsZW1bZGlyXSkge1xuXHRcdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cykge1xuXHRcdFx0XHRcdFx0XHRpZiAobWF0Y2hlcihlbGVtLCBjb250ZXh0LCB4bWwpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2hpbGUgKGVsZW0gPSBlbGVtW2Rpcl0pIHtcblx0XHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMpIHtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bZXhwYW5kb10gfHwgKGVsZW1bZXhwYW5kb10gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlW2VsZW0udW5pcXVlSURdIHx8IChvdXRlckNhY2hlW2VsZW0udW5pcXVlSURdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkge1xuXHRcdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtW2Rpcl0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICgob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVtrZXldKSAmJiBvbGRDYWNoZVswXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsxXSA9PT0gZG9uZU5hbWUpIHtcblxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBuZXdDYWNoZVsyXSA9IG9sZENhY2hlWzJdO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlW2tleV0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmIChuZXdDYWNoZVsyXSA9IG1hdGNoZXIoZWxlbSwgY29udGV4dCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIobWF0Y2hlcnMpIHtcblx0XHRcdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID8gZnVuY3Rpb24gKGVsZW0sIGNvbnRleHQsIHhtbCkge1xuXHRcdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdGlmICghbWF0Y2hlcnNbaV0oZWxlbSwgY29udGV4dCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gOiBtYXRjaGVyc1swXTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cykge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0ICAgIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0U2l6emxlKHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjb25kZW5zZSh1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0ICAgIG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdFx0ICAgIGkgPSAwLFxuXHRcdFx0ICAgIGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0XHQgICAgbWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW0gPSB1bm1hdGNoZWRbaV0pIHtcblx0XHRcdFx0XHRpZiAoIWZpbHRlciB8fCBmaWx0ZXIoZWxlbSwgY29udGV4dCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goZWxlbSk7XG5cdFx0XHRcdFx0XHRpZiAobWFwcGVkKSB7XG5cdFx0XHRcdFx0XHRcdG1hcC5wdXNoKGkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNldE1hdGNoZXIocHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yKSB7XG5cdFx0XHRpZiAocG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlcltleHBhbmRvXSkge1xuXHRcdFx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlcihwb3N0RmlsdGVyKTtcblx0XHRcdH1cblx0XHRcdGlmIChwb3N0RmluZGVyICYmICFwb3N0RmluZGVyW2V4cGFuZG9dKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKHBvc3RGaW5kZXIsIHBvc3RTZWxlY3Rvcik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uIChzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwpIHtcblx0XHRcdFx0dmFyIHRlbXAsXG5cdFx0XHRcdCAgICBpLFxuXHRcdFx0XHQgICAgZWxlbSxcblx0XHRcdFx0ICAgIHByZU1hcCA9IFtdLFxuXHRcdFx0XHQgICAgcG9zdE1hcCA9IFtdLFxuXHRcdFx0XHQgICAgcHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gW2NvbnRleHRdIDogY29udGV4dCwgW10pLFxuXG5cblx0XHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmIChzZWVkIHx8ICFzZWxlY3RvcikgPyBjb25kZW5zZShlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCkgOiBlbGVtcyxcblx0XHRcdFx0ICAgIG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIpID9cblxuXHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0cmVzdWx0cyA6IG1hdGNoZXJJbjtcblxuXHRcdFx0XHRpZiAobWF0Y2hlcikge1xuXHRcdFx0XHRcdG1hdGNoZXIobWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHBvc3RGaWx0ZXIpIHtcblx0XHRcdFx0XHR0ZW1wID0gY29uZGVuc2UobWF0Y2hlck91dCwgcG9zdE1hcCk7XG5cdFx0XHRcdFx0cG9zdEZpbHRlcih0ZW1wLCBbXSwgY29udGV4dCwgeG1sKTtcblxuXHRcdFx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRpZiAoZWxlbSA9IHRlbXBbaV0pIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlck91dFtwb3N0TWFwW2ldXSA9ICEobWF0Y2hlckluW3Bvc3RNYXBbaV1dID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHNlZWQpIHtcblx0XHRcdFx0XHRpZiAocG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIpIHtcblx0XHRcdFx0XHRcdGlmIChwb3N0RmluZGVyKSB7XG5cdFx0XHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2gobWF0Y2hlckluW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHBvc3RGaW5kZXIobnVsbCwgbWF0Y2hlck91dCA9IFtdLCB0ZW1wLCB4bWwpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdGlmICgoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmICh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2Yoc2VlZCwgZWxlbSkgOiBwcmVNYXBbaV0pID4gLTEpIHtcblxuXHRcdFx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShtYXRjaGVyT3V0ID09PSByZXN1bHRzID8gbWF0Y2hlck91dC5zcGxpY2UocHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoKSA6IG1hdGNoZXJPdXQpO1xuXHRcdFx0XHRcdGlmIChwb3N0RmluZGVyKSB7XG5cdFx0XHRcdFx0XHRwb3N0RmluZGVyKG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkocmVzdWx0cywgbWF0Y2hlck91dCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtYXRjaGVyRnJvbVRva2Vucyh0b2tlbnMpIHtcblx0XHRcdHZhciBjaGVja0NvbnRleHQsXG5cdFx0XHQgICAgbWF0Y2hlcixcblx0XHRcdCAgICBqLFxuXHRcdFx0ICAgIGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0XHQgICAgbGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVt0b2tlbnNbMF0udHlwZV0sXG5cdFx0XHQgICAgaW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRcdCAgICBpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblxuXHRcdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvcihmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSksXG5cdFx0XHQgICAgbWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvcihmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRyZXR1cm4gaW5kZXhPZihjaGVja0NvbnRleHQsIGVsZW0pID4gLTE7XG5cdFx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlKSxcblx0XHRcdCAgICBtYXRjaGVycyA9IFtmdW5jdGlvbiAoZWxlbSwgY29udGV4dCwgeG1sKSB7XG5cdFx0XHRcdHZhciByZXQgPSAhbGVhZGluZ1JlbGF0aXZlICYmICh4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCkgfHwgKChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/IG1hdGNoQ29udGV4dChlbGVtLCBjb250ZXh0LCB4bWwpIDogbWF0Y2hBbnlDb250ZXh0KGVsZW0sIGNvbnRleHQsIHhtbCkpO1xuXHRcdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fV07XG5cblx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0aWYgKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlW3Rva2Vuc1tpXS50eXBlXSkge1xuXHRcdFx0XHRcdG1hdGNoZXJzID0gW2FkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIobWF0Y2hlcnMpLCBtYXRjaGVyKV07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyW3Rva2Vuc1tpXS50eXBlXS5hcHBseShudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyk7XG5cblx0XHRcdFx0XHRpZiAobWF0Y2hlcltleHBhbmRvXSkge1xuXHRcdFx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0XHRcdGZvciAoOyBqIDwgbGVuOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKEV4cHIucmVsYXRpdmVbdG9rZW5zW2pdLnR5cGVdKSB7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKG1hdGNoZXJzKSwgaSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSgwLCBpIC0gMSkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1tpIC0gMl0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSkpLnJlcGxhY2UocnRyaW0sIFwiJDFcIiksIG1hdGNoZXIsIGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKHRva2Vucy5zbGljZShpLCBqKSksIGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnModG9rZW5zID0gdG9rZW5zLnNsaWNlKGopKSwgaiA8IGxlbiAmJiB0b1NlbGVjdG9yKHRva2VucykpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtZW50TWF0Y2hlcihtYXRjaGVycyk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMpIHtcblx0XHRcdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0XHQgICAgYnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0XHQgICAgc3VwZXJNYXRjaGVyID0gZnVuY3Rpb24gc3VwZXJNYXRjaGVyKHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0KSB7XG5cdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHQgICAgaixcblx0XHRcdFx0ICAgIG1hdGNoZXIsXG5cdFx0XHRcdCAgICBtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHQgICAgaSA9IFwiMFwiLFxuXHRcdFx0XHQgICAgdW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0ICAgIHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0ICAgIGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKFwiKlwiLCBvdXRlcm1vc3QpLFxuXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSxcblx0XHRcdFx0ICAgIGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAob3V0ZXJtb3N0KSB7XG5cdFx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICg7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoYnlFbGVtZW50ICYmIGVsZW0pIHtcblx0XHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdFx0aWYgKCFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHtcblx0XHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoZWxlbSk7XG5cdFx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHdoaWxlIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pIHtcblx0XHRcdFx0XHRcdFx0aWYgKG1hdGNoZXIoZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaChlbGVtKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKG91dGVybW9zdCkge1xuXHRcdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoYnlTZXQpIHtcblx0XHRcdFx0XHRcdGlmIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHNlZWQpIHtcblx0XHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdFx0aWYgKGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlcih1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHNlZWQpIHtcblx0XHRcdFx0XHRcdGlmIChtYXRjaGVkQ291bnQgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbChyZXN1bHRzKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKHNldE1hdGNoZWQpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHB1c2guYXBwbHkocmVzdWx0cywgc2V0TWF0Y2hlZCk7XG5cblx0XHRcdFx0XHRpZiAob3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJiBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggPiAxKSB7XG5cblx0XHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KHJlc3VsdHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChvdXRlcm1vc3QpIHtcblx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gYnlTZXQgPyBtYXJrRnVuY3Rpb24oc3VwZXJNYXRjaGVyKSA6IHN1cGVyTWF0Y2hlcjtcblx0XHR9XG5cblx0XHRjb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIG1hdGNoICkge1xuXHRcdFx0dmFyIGksXG5cdFx0XHQgICAgc2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRcdCAgICBlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRcdCAgICBjYWNoZWQgPSBjb21waWxlckNhY2hlW3NlbGVjdG9yICsgXCIgXCJdO1xuXG5cdFx0XHRpZiAoIWNhY2hlZCkge1xuXHRcdFx0XHRpZiAoIW1hdGNoKSB7XG5cdFx0XHRcdFx0bWF0Y2ggPSB0b2tlbml6ZShzZWxlY3Rvcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKG1hdGNoW2ldKTtcblx0XHRcdFx0XHRpZiAoY2FjaGVkW2V4cGFuZG9dKSB7XG5cdFx0XHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKGNhY2hlZCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKGNhY2hlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMpKTtcblxuXHRcdFx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cdFx0fTtcblxuXHRcdHNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQpIHtcblx0XHRcdHZhciBpLFxuXHRcdFx0ICAgIHRva2Vucyxcblx0XHRcdCAgICB0b2tlbixcblx0XHRcdCAgICB0eXBlLFxuXHRcdFx0ICAgIGZpbmQsXG5cdFx0XHQgICAgY29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRcdCAgICBtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpO1xuXG5cdFx0XHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdFx0aWYgKG1hdGNoLmxlbmd0aCA9PT0gMSkge1xuXG5cdFx0XHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoMCk7XG5cdFx0XHRcdGlmICh0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbdG9rZW5zWzFdLnR5cGVdKSB7XG5cblx0XHRcdFx0XHRjb250ZXh0ID0gKEV4cHIuZmluZFtcIklEXCJdKHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQpIHx8IFtdKVswXTtcblx0XHRcdFx0XHRpZiAoIWNvbnRleHQpIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChjb21waWxlZCkge1xuXHRcdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3Qoc2VsZWN0b3IpID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0XHRcdGlmIChFeHByLnJlbGF0aXZlW3R5cGUgPSB0b2tlbi50eXBlXSkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChmaW5kID0gRXhwci5maW5kW3R5cGVdKSB7XG5cdFx0XHRcdFx0XHRpZiAoc2VlZCA9IGZpbmQodG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgcnNpYmxpbmcudGVzdCh0b2tlbnNbMF0udHlwZSkgJiYgdGVzdENvbnRleHQoY29udGV4dC5wYXJlbnROb2RlKSB8fCBjb250ZXh0KSkge1xuXG5cdFx0XHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3Rvcih0b2tlbnMpO1xuXHRcdFx0XHRcdFx0XHRpZiAoIXNlbGVjdG9yKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseShyZXN1bHRzLCBzZWVkKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQoY29tcGlsZWQgfHwgY29tcGlsZShzZWxlY3RvciwgbWF0Y2gpKShzZWVkLCBjb250ZXh0LCAhZG9jdW1lbnRJc0hUTUwsIHJlc3VsdHMsICFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3Qoc2VsZWN0b3IpICYmIHRlc3RDb250ZXh0KGNvbnRleHQucGFyZW50Tm9kZSkgfHwgY29udGV4dCk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cblx0XHRzdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoc29ydE9yZGVyKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG5cdFx0c3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cblx0XHRzZXREb2N1bWVudCgpO1xuXG5cdFx0c3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpKSAmIDE7XG5cdFx0fSk7XG5cblx0XHRpZiAoIWFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRcdFx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCI7XG5cdFx0fSkpIHtcblx0XHRcdGFkZEhhbmRsZShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24gKGVsZW0sIG5hbWUsIGlzWE1MKSB7XG5cdFx0XHRcdGlmICghaXNYTUwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUobmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0XHRcdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJcIik7XG5cdFx0XHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA9PT0gXCJcIjtcblx0XHR9KSkge1xuXHRcdFx0YWRkSGFuZGxlKFwidmFsdWVcIiwgZnVuY3Rpb24gKGVsZW0sIG5hbWUsIGlzWE1MKSB7XG5cdFx0XHRcdGlmICghaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICghYXNzZXJ0KGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG5cdFx0fSkpIHtcblx0XHRcdGFkZEhhbmRsZShib29sZWFucywgZnVuY3Rpb24gKGVsZW0sIG5hbWUsIGlzWE1MKSB7XG5cdFx0XHRcdHZhciB2YWw7XG5cdFx0XHRcdGlmICghaXNYTUwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbVtuYW1lXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6ICh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgPyB2YWwudmFsdWUgOiBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gU2l6emxlO1xuXHR9KHdpbmRvdyk7XG5cblx0alF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5cdGpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuXHRqUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xuXHRqUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcblx0alF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcblx0alF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xuXHRqUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5cdGpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblx0dmFyIGRpciA9IGZ1bmN0aW9uIGRpcihlbGVtLCBfZGlyLCB1bnRpbCkge1xuXHRcdHZhciBtYXRjaGVkID0gW10sXG5cdFx0ICAgIHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHRcdHdoaWxlICgoZWxlbSA9IGVsZW1bX2Rpcl0pICYmIGVsZW0ubm9kZVR5cGUgIT09IDkpIHtcblx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdGlmICh0cnVuY2F0ZSAmJiBqUXVlcnkoZWxlbSkuaXModW50aWwpKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF0Y2hlZC5wdXNoKGVsZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fTtcblxuXHR2YXIgX3NpYmxpbmdzID0gZnVuY3Rpb24gX3NpYmxpbmdzKG4sIGVsZW0pIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdFx0Zm9yICg7IG47IG4gPSBuLm5leHRTaWJsaW5nKSB7XG5cdFx0XHRpZiAobi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtKSB7XG5cdFx0XHRcdG1hdGNoZWQucHVzaChuKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fTtcblxuXHR2YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXHRmdW5jdGlvbiBub2RlTmFtZShlbGVtLCBuYW1lKSB7XG5cblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fTtcblx0dmFyIHJzaW5nbGVUYWcgPSAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaTtcblxuXHR2YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG5cdGZ1bmN0aW9uIHdpbm5vdyhlbGVtZW50cywgcXVhbGlmaWVyLCBub3QpIHtcblx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24ocXVhbGlmaWVyKSkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbSwgaSkge1xuXHRcdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbChlbGVtLCBpLCBlbGVtKSAhPT0gbm90O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHF1YWxpZmllci5ub2RlVHlwZSkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA9PT0gcXVhbGlmaWVyICE9PSBub3Q7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKHF1YWxpZmllciwgZWxlbSkgPiAtMSAhPT0gbm90O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHJpc1NpbXBsZS50ZXN0KHF1YWxpZmllcikpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCk7XG5cdFx0fVxuXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlcihxdWFsaWZpZXIsIGVsZW1lbnRzKTtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKHF1YWxpZmllciwgZWxlbSkgPiAtMSAhPT0gbm90ICYmIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSk7XG5cdH1cblxuXHRqUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24gKGV4cHIsIGVsZW1zLCBub3QpIHtcblx0XHR2YXIgZWxlbSA9IGVsZW1zWzBdO1xuXG5cdFx0aWYgKG5vdCkge1xuXHRcdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0XHR9XG5cblx0XHRpZiAoZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoZWxlbSwgZXhwcikgPyBbZWxlbV0gOiBbXTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyhleHByLCBqUXVlcnkuZ3JlcChlbGVtcywgZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHRcdH0pKTtcblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRmaW5kOiBmdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICByZXQsXG5cdFx0XHQgICAgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHQgICAgc2VsZiA9IHRoaXM7XG5cblx0XHRcdGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKGpRdWVyeShzZWxlY3RvcikuZmlsdGVyKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0XHRcdGlmIChqUXVlcnkuY29udGFpbnMoc2VsZltpXSwgdGhpcykpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKFtdKTtcblxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGpRdWVyeS5maW5kKHNlbGVjdG9yLCBzZWxmW2ldLCByZXQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KHJldCkgOiByZXQ7XG5cdFx0fSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihzZWxlY3Rvcikge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UpKTtcblx0XHR9LFxuXHRcdG5vdDogZnVuY3Rpb24gbm90KHNlbGVjdG9yKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2sod2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlKSk7XG5cdFx0fSxcblx0XHRpczogZnVuY3Rpb24gaXMoc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiAhIXdpbm5vdyh0aGlzLFxuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KHNlbGVjdG9yKSA/IGpRdWVyeShzZWxlY3RvcikgOiBzZWxlY3RvciB8fCBbXSwgZmFsc2UpLmxlbmd0aDtcblx0XHR9XG5cdH0pO1xuXG5cblxuXHR2YXIgcm9vdGpRdWVyeSxcblxuXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblx0ICAgIGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgY29udGV4dCwgcm9vdCkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdGlmICghc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHRpZiAodHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRpZiAoc2VsZWN0b3JbMF0gPT09IFwiPFwiICYmIHNlbGVjdG9yW3NlbGVjdG9yLmxlbmd0aCAtIDFdID09PSBcIj5cIiAmJiBzZWxlY3Rvci5sZW5ndGggPj0gMykge1xuXG5cdFx0XHRcdG1hdGNoID0gW251bGwsIHNlbGVjdG9yLCBudWxsXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKHNlbGVjdG9yKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG1hdGNoICYmIChtYXRjaFsxXSB8fCAhY29udGV4dCkpIHtcblxuXHRcdFx0XHRpZiAobWF0Y2hbMV0pIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbMF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwobWF0Y2hbMV0sIGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsIHRydWUpKTtcblxuXHRcdFx0XHRcdGlmIChyc2luZ2xlVGFnLnRlc3QobWF0Y2hbMV0pICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KGNvbnRleHQpKSB7XG5cdFx0XHRcdFx0XHRmb3IgKG1hdGNoIGluIGNvbnRleHQpIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24odGhpc1ttYXRjaF0pKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1ttYXRjaF0oY29udGV4dFttYXRjaF0pO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKG1hdGNoLCBjb250ZXh0W21hdGNoXSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXRjaFsyXSk7XG5cblx0XHRcdFx0XHRpZiAoZWxlbSkge1xuXG5cdFx0XHRcdFx0XHR0aGlzWzBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICghY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSkge1xuXHRcdFx0XHRyZXR1cm4gKGNvbnRleHQgfHwgcm9vdCkuZmluZChzZWxlY3Rvcik7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKGNvbnRleHQpLmZpbmQoc2VsZWN0b3IpO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSkge1xuXHRcdFx0dGhpc1swXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9IGVsc2UgaWYgKGpRdWVyeS5pc0Z1bmN0aW9uKHNlbGVjdG9yKSkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/IHJvb3QucmVhZHkoc2VsZWN0b3IpIDpcblxuXHRcdFx0c2VsZWN0b3IoalF1ZXJ5KTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheShzZWxlY3RvciwgdGhpcyk7XG5cdH07XG5cblx0aW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cblx0cm9vdGpRdWVyeSA9IGpRdWVyeShkb2N1bWVudCk7XG5cblx0dmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQpIHtcblx0XHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KHRhcmdldCwgdGhpcyksXG5cdFx0XHQgICAgbCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRcdGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKGpRdWVyeS5jb250YWlucyh0aGlzLCB0YXJnZXRzW2ldKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Y2xvc2VzdDogZnVuY3Rpb24gY2xvc2VzdChzZWxlY3RvcnMsIGNvbnRleHQpIHtcblx0XHRcdHZhciBjdXIsXG5cdFx0XHQgICAgaSA9IDAsXG5cdFx0XHQgICAgbCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0ICAgIG1hdGNoZWQgPSBbXSxcblx0XHRcdCAgICB0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoc2VsZWN0b3JzKTtcblxuXHRcdFx0aWYgKCFybmVlZHNDb250ZXh0LnRlc3Qoc2VsZWN0b3JzKSkge1xuXHRcdFx0XHRmb3IgKDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdGZvciAoY3VyID0gdGhpc1tpXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUpIHtcblxuXHRcdFx0XHRcdFx0aWYgKGN1ci5ub2RlVHlwZSA8IDExICYmICh0YXJnZXRzID8gdGFyZ2V0cy5pbmRleChjdXIpID4gLTEgOlxuXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiYgalF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGN1ciwgc2VsZWN0b3JzKSkpIHtcblxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goY3VyKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydChtYXRjaGVkKSA6IG1hdGNoZWQpO1xuXHRcdH0sXG5cblx0XHRpbmRleDogZnVuY3Rpb24gaW5kZXgoZWxlbSkge1xuXG5cdFx0XHRpZiAoIWVsZW0pIHtcblx0XHRcdFx0cmV0dXJuIHRoaXNbMF0gJiYgdGhpc1swXS5wYXJlbnROb2RlID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoalF1ZXJ5KGVsZW0pLCB0aGlzWzBdKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCh0aGlzLFxuXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bMF0gOiBlbGVtKTtcblx0XHR9LFxuXG5cdFx0YWRkOiBmdW5jdGlvbiBhZGQoc2VsZWN0b3IsIGNvbnRleHQpIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhqUXVlcnkudW5pcXVlU29ydChqUXVlcnkubWVyZ2UodGhpcy5nZXQoKSwgalF1ZXJ5KHNlbGVjdG9yLCBjb250ZXh0KSkpKTtcblx0XHR9LFxuXG5cdFx0YWRkQmFjazogZnVuY3Rpb24gYWRkQmFjayhzZWxlY3Rvcikge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKHNlbGVjdG9yID09IG51bGwgPyB0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHNlbGVjdG9yKSk7XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBzaWJsaW5nKGN1ciwgZGlyKSB7XG5cdFx0d2hpbGUgKChjdXIgPSBjdXJbZGlyXSkgJiYgY3VyLm5vZGVUeXBlICE9PSAxKSB7fVxuXHRcdHJldHVybiBjdXI7XG5cdH1cblxuXHRqUXVlcnkuZWFjaCh7XG5cdFx0cGFyZW50OiBmdW5jdGlvbiBwYXJlbnQoZWxlbSkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdFx0fSxcblx0XHRwYXJlbnRzOiBmdW5jdGlvbiBwYXJlbnRzKGVsZW0pIHtcblx0XHRcdHJldHVybiBkaXIoZWxlbSwgXCJwYXJlbnROb2RlXCIpO1xuXHRcdH0sXG5cdFx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiBwYXJlbnRzVW50aWwoZWxlbSwgaSwgdW50aWwpIHtcblx0XHRcdHJldHVybiBkaXIoZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsKTtcblx0XHR9LFxuXHRcdG5leHQ6IGZ1bmN0aW9uIG5leHQoZWxlbSkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmcoZWxlbSwgXCJuZXh0U2libGluZ1wiKTtcblx0XHR9LFxuXHRcdHByZXY6IGZ1bmN0aW9uIHByZXYoZWxlbSkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmcoZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIik7XG5cdFx0fSxcblx0XHRuZXh0QWxsOiBmdW5jdGlvbiBuZXh0QWxsKGVsZW0pIHtcblx0XHRcdHJldHVybiBkaXIoZWxlbSwgXCJuZXh0U2libGluZ1wiKTtcblx0XHR9LFxuXHRcdHByZXZBbGw6IGZ1bmN0aW9uIHByZXZBbGwoZWxlbSkge1xuXHRcdFx0cmV0dXJuIGRpcihlbGVtLCBcInByZXZpb3VzU2libGluZ1wiKTtcblx0XHR9LFxuXHRcdG5leHRVbnRpbDogZnVuY3Rpb24gbmV4dFVudGlsKGVsZW0sIGksIHVudGlsKSB7XG5cdFx0XHRyZXR1cm4gZGlyKGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwpO1xuXHRcdH0sXG5cdFx0cHJldlVudGlsOiBmdW5jdGlvbiBwcmV2VW50aWwoZWxlbSwgaSwgdW50aWwpIHtcblx0XHRcdHJldHVybiBkaXIoZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwpO1xuXHRcdH0sXG5cdFx0c2libGluZ3M6IGZ1bmN0aW9uIHNpYmxpbmdzKGVsZW0pIHtcblx0XHRcdHJldHVybiBfc2libGluZ3MoKGVsZW0ucGFyZW50Tm9kZSB8fCB7fSkuZmlyc3RDaGlsZCwgZWxlbSk7XG5cdFx0fSxcblx0XHRjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oZWxlbSkge1xuXHRcdFx0cmV0dXJuIF9zaWJsaW5ncyhlbGVtLmZpcnN0Q2hpbGQpO1xuXHRcdH0sXG5cdFx0Y29udGVudHM6IGZ1bmN0aW9uIGNvbnRlbnRzKGVsZW0pIHtcblx0XHRcdGlmIChub2RlTmFtZShlbGVtLCBcImlmcmFtZVwiKSkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChub2RlTmFtZShlbGVtLCBcInRlbXBsYXRlXCIpKSB7XG5cdFx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGpRdWVyeS5tZXJnZShbXSwgZWxlbS5jaGlsZE5vZGVzKTtcblx0XHR9XG5cdH0sIGZ1bmN0aW9uIChuYW1lLCBmbikge1xuXHRcdGpRdWVyeS5mbltuYW1lXSA9IGZ1bmN0aW9uICh1bnRpbCwgc2VsZWN0b3IpIHtcblx0XHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCh0aGlzLCBmbiwgdW50aWwpO1xuXG5cdFx0XHRpZiAobmFtZS5zbGljZSgtNSkgIT09IFwiVW50aWxcIikge1xuXHRcdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKHNlbGVjdG9yLCBtYXRjaGVkKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubGVuZ3RoID4gMSkge1xuXG5cdFx0XHRcdGlmICghZ3VhcmFudGVlZFVuaXF1ZVtuYW1lXSkge1xuXHRcdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KG1hdGNoZWQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHJwYXJlbnRzcHJldi50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKG1hdGNoZWQpO1xuXHRcdH07XG5cdH0pO1xuXHR2YXIgcm5vdGh0bWx3aGl0ZSA9IC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztcblxuXHRmdW5jdGlvbiBjcmVhdGVPcHRpb25zKG9wdGlvbnMpIHtcblx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0alF1ZXJ5LmVhY2gob3B0aW9ucy5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXSwgZnVuY3Rpb24gKF8sIGZsYWcpIHtcblx0XHRcdG9iamVjdFtmbGFnXSA9IHRydWU7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG9iamVjdDtcblx0fVxuXG5cdGpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG5cdFx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID8gY3JlYXRlT3B0aW9ucyhvcHRpb25zKSA6IGpRdWVyeS5leHRlbmQoe30sIG9wdGlvbnMpO1xuXG5cdFx0dmFyIFxuXHRcdGZpcmluZyxcblxuXG5cdFx0bWVtb3J5LFxuXG5cblx0XHRfZmlyZWQsXG5cblxuXHRcdF9sb2NrZWQsXG5cblxuXHRcdGxpc3QgPSBbXSxcblxuXG5cdFx0cXVldWUgPSBbXSxcblxuXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uIGZpcmUoKSB7XG5cblx0XHRcdF9sb2NrZWQgPSBfbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0X2ZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEpIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCkge1xuXG5cdFx0XHRcdFx0aWYgKGxpc3RbZmlyaW5nSW5kZXhdLmFwcGx5KG1lbW9yeVswXSwgbWVtb3J5WzFdKSA9PT0gZmFsc2UgJiYgb3B0aW9ucy5zdG9wT25GYWxzZSkge1xuXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICghb3B0aW9ucy5tZW1vcnkpIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoX2xvY2tlZCkge1xuXG5cdFx0XHRcdGlmIChtZW1vcnkpIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdGFkZDogZnVuY3Rpb24gYWRkKCkge1xuXHRcdFx0XHRpZiAobGlzdCkge1xuXG5cdFx0XHRcdFx0aWYgKG1lbW9yeSAmJiAhZmlyaW5nKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2gobWVtb3J5KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoZnVuY3Rpb24gYWRkKGFyZ3MpIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKGFyZ3MsIGZ1bmN0aW9uIChfLCBhcmcpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKGFyZykpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyhhcmcpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goYXJnKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoYXJnKSAhPT0gXCJzdHJpbmdcIikge1xuXG5cdFx0XHRcdFx0XHRcdFx0YWRkKGFyZyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pKGFyZ3VtZW50cyk7XG5cblx0XHRcdFx0XHRpZiAobWVtb3J5ICYmICFmaXJpbmcpIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goYXJndW1lbnRzLCBmdW5jdGlvbiAoXywgYXJnKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICgoaW5kZXggPSBqUXVlcnkuaW5BcnJheShhcmcsIGxpc3QsIGluZGV4KSkgPiAtMSkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuXG5cdFx0XHRcdFx0XHRpZiAoaW5kZXggPD0gZmlyaW5nSW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdGhhczogZnVuY3Rpb24gaGFzKGZuKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/IGpRdWVyeS5pbkFycmF5KGZuLCBsaXN0KSA+IC0xIDogbGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uIGVtcHR5KCkge1xuXHRcdFx0XHRpZiAobGlzdCkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0XHRcdF9sb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uIGRpc2FibGVkKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHRsb2NrOiBmdW5jdGlvbiBsb2NrKCkge1xuXHRcdFx0XHRfbG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCFtZW1vcnkgJiYgIWZpcmluZykge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24gbG9ja2VkKCkge1xuXHRcdFx0XHRyZXR1cm4gISFfbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uIGZpcmVXaXRoKGNvbnRleHQsIGFyZ3MpIHtcblx0XHRcdFx0aWYgKCFfbG9ja2VkKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFtjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJnc107XG5cdFx0XHRcdFx0cXVldWUucHVzaChhcmdzKTtcblx0XHRcdFx0XHRpZiAoIWZpcmluZykge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdGZpcmU6IGZ1bmN0aW9uIGZpcmUoKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24gZmlyZWQoKSB7XG5cdFx0XHRcdHJldHVybiAhIV9maXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHNlbGY7XG5cdH07XG5cblx0ZnVuY3Rpb24gSWRlbnRpdHkodikge1xuXHRcdHJldHVybiB2O1xuXHR9XG5cdGZ1bmN0aW9uIFRocm93ZXIoZXgpIHtcblx0XHR0aHJvdyBleDtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkb3B0VmFsdWUodmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSkge1xuXHRcdHZhciBtZXRob2Q7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRpZiAodmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24obWV0aG9kID0gdmFsdWUucHJvbWlzZSkpIHtcblx0XHRcdFx0bWV0aG9kLmNhbGwodmFsdWUpLmRvbmUocmVzb2x2ZSkuZmFpbChyZWplY3QpO1xuXG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKG1ldGhvZCA9IHZhbHVlLnRoZW4pKSB7XG5cdFx0XHRcdG1ldGhvZC5jYWxsKHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlc29sdmUuYXBwbHkodW5kZWZpbmVkLCBbdmFsdWVdLnNsaWNlKG5vVmFsdWUpKTtcblx0XHRcdH1cblxuXHRcdH0gY2F0Y2ggKHZhbHVlKSB7XG5cblx0XHRcdHJlamVjdC5hcHBseSh1bmRlZmluZWQsIFt2YWx1ZV0pO1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5leHRlbmQoe1xuXG5cdFx0RGVmZXJyZWQ6IGZ1bmN0aW9uIERlZmVycmVkKGZ1bmMpIHtcblx0XHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFtcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIiksIGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIiksIDJdLCBbXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgMCwgXCJyZXNvbHZlZFwiXSwgW1wicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgMSwgXCJyZWplY3RlZFwiXV0sXG5cdFx0XHQgICAgX3N0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHQgICAgX3Byb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbiBzdGF0ZSgpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3N0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uIGFsd2F5cygpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uIF9jYXRjaChmbikge1xuXHRcdFx0XHRcdHJldHVybiBfcHJvbWlzZS50aGVuKG51bGwsIGZuKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiBwaXBlKCkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uIChuZXdEZWZlcikge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2godHVwbGVzLCBmdW5jdGlvbiAoaSwgdHVwbGUpIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbihmbnNbdHVwbGVbNF1dKSAmJiBmbnNbdHVwbGVbNF1dO1xuXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkW3R1cGxlWzFdXShmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAocmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24ocmV0dXJuZWQucHJvbWlzZSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKS5wcm9ncmVzcyhuZXdEZWZlci5ub3RpZnkpLmRvbmUobmV3RGVmZXIucmVzb2x2ZSkuZmFpbChuZXdEZWZlci5yZWplY3QpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclt0dXBsZVswXSArIFwiV2l0aFwiXSh0aGlzLCBmbiA/IFtyZXR1cm5lZF0gOiBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHQgICAgYXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0ICAgIG1pZ2h0VGhyb3cgPSBmdW5jdGlvbiBtaWdodFRocm93KCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdGlmIChkZXB0aCA8IG1heERlcHRoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIik7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmIChcblxuXHRcdFx0XHRcdFx0XHRcdCh0eXBlb2YgcmV0dXJuZWQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihyZXR1cm5lZCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiKSAmJiByZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKHRoZW4pKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChzcGVjaWFsKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChyZXR1cm5lZCwgcmVzb2x2ZShtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsKSwgcmVzb2x2ZShtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwpKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChyZXR1cm5lZCwgcmVzb2x2ZShtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsKSwgcmVzb2x2ZShtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwpLCByZXNvbHZlKG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIGRlZmVycmVkLm5vdGlmeVdpdGgpKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChoYW5kbGVyICE9PSBJZGVudGl0eSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gW3JldHVybmVkXTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0KHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGgpKHRoYXQsIGFyZ3MpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblxuXG5cdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID8gbWlnaHRUaHJvdyA6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKGUsIHByb2Nlc3Muc3RhY2tUcmFjZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChkZXB0aCArIDEgPj0gbWF4RGVwdGgpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoaGFuZGxlciAhPT0gVGhyb3dlcikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFtlXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgodGhhdCwgYXJncyk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdGlmIChkZXB0aCkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmIChqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KHByb2Nlc3MpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24gKG5ld0RlZmVyKSB7XG5cblx0XHRcdFx0XHRcdHR1cGxlc1swXVszXS5hZGQocmVzb2x2ZSgwLCBuZXdEZWZlciwgalF1ZXJ5LmlzRnVuY3Rpb24ob25Qcm9ncmVzcykgPyBvblByb2dyZXNzIDogSWRlbnRpdHksIG5ld0RlZmVyLm5vdGlmeVdpdGgpKTtcblxuXHRcdFx0XHRcdFx0dHVwbGVzWzFdWzNdLmFkZChyZXNvbHZlKDAsIG5ld0RlZmVyLCBqUXVlcnkuaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IElkZW50aXR5KSk7XG5cblx0XHRcdFx0XHRcdHR1cGxlc1syXVszXS5hZGQocmVzb2x2ZSgwLCBuZXdEZWZlciwgalF1ZXJ5LmlzRnVuY3Rpb24ob25SZWplY3RlZCkgPyBvblJlamVjdGVkIDogVGhyb3dlcikpO1xuXHRcdFx0XHRcdH0pLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKG9iaikge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQob2JqLCBfcHJvbWlzZSkgOiBfcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCAgICBkZWZlcnJlZCA9IHt9O1xuXG5cdFx0XHRqUXVlcnkuZWFjaCh0dXBsZXMsIGZ1bmN0aW9uIChpLCB0dXBsZSkge1xuXHRcdFx0XHR2YXIgbGlzdCA9IHR1cGxlWzJdLFxuXHRcdFx0XHQgICAgc3RhdGVTdHJpbmcgPSB0dXBsZVs1XTtcblxuXHRcdFx0XHRfcHJvbWlzZVt0dXBsZVsxXV0gPSBsaXN0LmFkZDtcblxuXHRcdFx0XHRpZiAoc3RhdGVTdHJpbmcpIHtcblx0XHRcdFx0XHRsaXN0LmFkZChmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRcdF9zdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHR0dXBsZXNbMyAtIGldWzJdLmRpc2FibGUsXG5cblx0XHRcdFx0XHR0dXBsZXNbMF1bMl0ubG9jayk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsaXN0LmFkZCh0dXBsZVszXS5maXJlKTtcblxuXHRcdFx0XHRkZWZlcnJlZFt0dXBsZVswXV0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWRbdHVwbGVbMF0gKyBcIldpdGhcIl0odGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGRlZmVycmVkW3R1cGxlWzBdICsgXCJXaXRoXCJdID0gbGlzdC5maXJlV2l0aDtcblx0XHRcdH0pO1xuXG5cdFx0XHRfcHJvbWlzZS5wcm9taXNlKGRlZmVycmVkKTtcblxuXHRcdFx0aWYgKGZ1bmMpIHtcblx0XHRcdFx0ZnVuYy5jYWxsKGRlZmVycmVkLCBkZWZlcnJlZCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkZWZlcnJlZDtcblx0XHR9LFxuXG5cdFx0d2hlbjogZnVuY3Rpb24gd2hlbihzaW5nbGVWYWx1ZSkge1xuXHRcdFx0dmFyXG5cblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblxuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheShpKSxcblx0XHRcdCAgICByZXNvbHZlVmFsdWVzID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzKSxcblxuXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24gdXBkYXRlRnVuYyhpKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbaV0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbaV0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IF9zbGljZS5jYWxsKGFyZ3VtZW50cykgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoISAtLXJlbWFpbmluZykge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHJlbWFpbmluZyA8PSAxKSB7XG5cdFx0XHRcdGFkb3B0VmFsdWUoc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKHVwZGF0ZUZ1bmMoaSkpLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsICFyZW1haW5pbmcpO1xuXG5cdFx0XHRcdGlmIChtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHwgalF1ZXJ5LmlzRnVuY3Rpb24ocmVzb2x2ZVZhbHVlc1tpXSAmJiByZXNvbHZlVmFsdWVzW2ldLnRoZW4pKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdGFkb3B0VmFsdWUocmVzb2x2ZVZhbHVlc1tpXSwgdXBkYXRlRnVuYyhpKSwgbWFzdGVyLnJlamVjdCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cblx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiAoZXJyb3IsIHN0YWNrKSB7XG5cblx0XHRpZiAod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KGVycm9yLm5hbWUpKSB7XG5cdFx0XHR3aW5kb3cuY29uc29sZS53YXJuKFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2spO1xuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9KTtcblx0fTtcblxuXHR2YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cblx0alF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24gKGZuKSB7XG5cblx0XHRyZWFkeUxpc3QudGhlbihmbilcblxuXHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbihlcnJvcik7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRqUXVlcnkuZXh0ZW5kKHtcblxuXHRcdGlzUmVhZHk6IGZhbHNlLFxuXG5cdFx0cmVhZHlXYWl0OiAxLFxuXG5cdFx0cmVhZHk6IGZ1bmN0aW9uIHJlYWR5KHdhaXQpIHtcblxuXHRcdFx0aWYgKHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdFx0aWYgKHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aChkb2N1bWVudCwgW2pRdWVyeV0pO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuXHRmdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgY29tcGxldGVkKTtcblx0XHRqUXVlcnkucmVhZHkoKTtcblx0fVxuXG5cdGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCkge1xuXG5cdFx0d2luZG93LnNldFRpbWVvdXQoalF1ZXJ5LnJlYWR5KTtcblx0fSBlbHNlIHtcblxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCk7XG5cblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgY29tcGxldGVkKTtcblx0fVxuXG5cdHZhciBhY2Nlc3MgPSBmdW5jdGlvbiBhY2Nlc3MoZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcpIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0ICAgIGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHQgICAgYnVsayA9IGtleSA9PSBudWxsO1xuXG5cdFx0aWYgKGpRdWVyeS50eXBlKGtleSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0XHRmb3IgKGkgaW4ga2V5KSB7XG5cdFx0XHRcdGFjY2VzcyhlbGVtcywgZm4sIGksIGtleVtpXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyk7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRcdGlmICghalF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdFx0XHRcdHJhdyA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChidWxrKSB7XG5cblx0XHRcdFx0aWYgKHJhdykge1xuXHRcdFx0XHRcdGZuLmNhbGwoZWxlbXMsIHZhbHVlKTtcblx0XHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdFx0Zm4gPSBmdW5jdGlvbiBmbihlbGVtLCBrZXksIHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKGpRdWVyeShlbGVtKSwgdmFsdWUpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGZuKSB7XG5cdFx0XHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0XHRmbihlbGVtc1tpXSwga2V5LCByYXcgPyB2YWx1ZSA6IHZhbHVlLmNhbGwoZWxlbXNbaV0sIGksIGZuKGVsZW1zW2ldLCBrZXkpKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoY2hhaW5hYmxlKSB7XG5cdFx0XHRyZXR1cm4gZWxlbXM7XG5cdFx0fVxuXG5cdFx0aWYgKGJ1bGspIHtcblx0XHRcdHJldHVybiBmbi5jYWxsKGVsZW1zKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID8gZm4oZWxlbXNbMF0sIGtleSkgOiBlbXB0eUdldDtcblx0fTtcblx0dmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiBhY2NlcHREYXRhKG93bmVyKSB7XG5cblx0XHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgIStvd25lci5ub2RlVHlwZTtcblx0fTtcblxuXHRmdW5jdGlvbiBEYXRhKCkge1xuXHRcdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcblx0fVxuXG5cdERhdGEudWlkID0gMTtcblxuXHREYXRhLnByb3RvdHlwZSA9IHtcblxuXHRcdGNhY2hlOiBmdW5jdGlvbiBjYWNoZShvd25lcikge1xuXG5cdFx0XHR2YXIgdmFsdWUgPSBvd25lclt0aGlzLmV4cGFuZG9dO1xuXG5cdFx0XHRpZiAoIXZhbHVlKSB7XG5cdFx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdFx0aWYgKGFjY2VwdERhdGEob3duZXIpKSB7XG5cblx0XHRcdFx0XHRpZiAob3duZXIubm9kZVR5cGUpIHtcblx0XHRcdFx0XHRcdG93bmVyW3RoaXMuZXhwYW5kb10gPSB2YWx1ZTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gc2V0KG93bmVyLCBkYXRhLCB2YWx1ZSkge1xuXHRcdFx0dmFyIHByb3AsXG5cdFx0XHQgICAgY2FjaGUgPSB0aGlzLmNhY2hlKG93bmVyKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdGNhY2hlW2pRdWVyeS5jYW1lbENhc2UoZGF0YSldID0gdmFsdWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Zm9yIChwcm9wIGluIGRhdGEpIHtcblx0XHRcdFx0XHRjYWNoZVtqUXVlcnkuY2FtZWxDYXNlKHByb3ApXSA9IGRhdGFbcHJvcF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjYWNoZTtcblx0XHR9LFxuXHRcdGdldDogZnVuY3Rpb24gZ2V0KG93bmVyLCBrZXkpIHtcblx0XHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/IHRoaXMuY2FjaGUob3duZXIpIDpcblxuXHRcdFx0b3duZXJbdGhpcy5leHBhbmRvXSAmJiBvd25lclt0aGlzLmV4cGFuZG9dW2pRdWVyeS5jYW1lbENhc2Uoa2V5KV07XG5cdFx0fSxcblx0XHRhY2Nlc3M6IGZ1bmN0aW9uIGFjY2Vzcyhvd25lciwga2V5LCB2YWx1ZSkge1xuXG5cdFx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLmdldChvd25lciwga2V5KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zZXQob3duZXIsIGtleSwgdmFsdWUpO1xuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHRcdH0sXG5cdFx0cmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUob3duZXIsIGtleSkge1xuXHRcdFx0dmFyIGksXG5cdFx0XHQgICAgY2FjaGUgPSBvd25lclt0aGlzLmV4cGFuZG9dO1xuXG5cdFx0XHRpZiAoY2FjaGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGtleSkpIHtcblxuXHRcdFx0XHRcdGtleSA9IGtleS5tYXAoalF1ZXJ5LmNhbWVsQ2FzZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZShrZXkpO1xuXG5cdFx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID8gW2tleV0gOiBrZXkubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIGNhY2hlW2tleVtpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KGNhY2hlKSkge1xuXG5cdFx0XHRcdGlmIChvd25lci5ub2RlVHlwZSkge1xuXHRcdFx0XHRcdG93bmVyW3RoaXMuZXhwYW5kb10gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVsZXRlIG93bmVyW3RoaXMuZXhwYW5kb107XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGhhc0RhdGE6IGZ1bmN0aW9uIGhhc0RhdGEob3duZXIpIHtcblx0XHRcdHZhciBjYWNoZSA9IG93bmVyW3RoaXMuZXhwYW5kb107XG5cdFx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoY2FjaGUpO1xuXHRcdH1cblx0fTtcblx0dmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxuXHR2YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblx0dmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0ICAgIHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuXHRmdW5jdGlvbiBnZXREYXRhKGRhdGEpIHtcblx0XHRpZiAoZGF0YSA9PT0gXCJ0cnVlXCIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChkYXRhID09PSBcImZhbHNlXCIpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoZGF0YSA9PT0gXCJudWxsXCIpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGlmIChkYXRhID09PSArZGF0YSArIFwiXCIpIHtcblx0XHRcdHJldHVybiArZGF0YTtcblx0XHR9XG5cblx0XHRpZiAocmJyYWNlLnRlc3QoZGF0YSkpIHtcblx0XHRcdHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGF0YUF0dHIoZWxlbSwga2V5LCBkYXRhKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRpZiAoZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEpIHtcblx0XHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZShybXVsdGlEYXNoLCBcIi0kJlwiKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG5cdFx0XHRpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRkYXRhID0gZ2V0RGF0YShkYXRhKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblxuXHRcdFx0XHRkYXRhVXNlci5zZXQoZWxlbSwga2V5LCBkYXRhKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cdFx0aGFzRGF0YTogZnVuY3Rpb24gaGFzRGF0YShlbGVtKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YShlbGVtKSB8fCBkYXRhUHJpdi5oYXNEYXRhKGVsZW0pO1xuXHRcdH0sXG5cblx0XHRkYXRhOiBmdW5jdGlvbiBkYXRhKGVsZW0sIG5hbWUsIF9kYXRhKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKGVsZW0sIG5hbWUsIF9kYXRhKTtcblx0XHR9LFxuXG5cdFx0cmVtb3ZlRGF0YTogZnVuY3Rpb24gcmVtb3ZlRGF0YShlbGVtLCBuYW1lKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoZWxlbSwgbmFtZSk7XG5cdFx0fSxcblxuXHRcdF9kYXRhOiBmdW5jdGlvbiBfZGF0YShlbGVtLCBuYW1lLCBkYXRhKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKGVsZW0sIG5hbWUsIGRhdGEpO1xuXHRcdH0sXG5cblx0XHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24gX3JlbW92ZURhdGEoZWxlbSwgbmFtZSkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKGVsZW0sIG5hbWUpO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0ZGF0YTogZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdCAgICBuYW1lLFxuXHRcdFx0ICAgIGRhdGEsXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF0sXG5cdFx0XHQgICAgYXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdFx0aWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGlmICh0aGlzLmxlbmd0aCkge1xuXHRcdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoZWxlbSk7XG5cblx0XHRcdFx0XHRpZiAoZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIpKSB7XG5cdFx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKGktLSkge1xuXG5cdFx0XHRcdFx0XHRcdGlmIChhdHRyc1tpXSkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1tpXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChuYW1lLmluZGV4T2YoXCJkYXRhLVwiKSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UobmFtZS5zbGljZSg1KSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0cihlbGVtLCBuYW1lLCBkYXRhW25hbWVdKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldChlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yoa2V5KSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0ZGF0YVVzZXIuc2V0KHRoaXMsIGtleSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKHRoaXMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0XHRpZiAoZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cblx0XHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KGVsZW0sIGtleSk7XG5cdFx0XHRcdFx0aWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKGVsZW0sIGtleSk7XG5cdFx0XHRcdFx0aWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdGRhdGFVc2VyLnNldCh0aGlzLCBrZXksIHZhbHVlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUpO1xuXHRcdH0sXG5cblx0XHRyZW1vdmVEYXRhOiBmdW5jdGlvbiByZW1vdmVEYXRhKGtleSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnJlbW92ZSh0aGlzLCBrZXkpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZXh0ZW5kKHtcblx0XHRxdWV1ZTogZnVuY3Rpb24gcXVldWUoZWxlbSwgdHlwZSwgZGF0YSkge1xuXHRcdFx0dmFyIHF1ZXVlO1xuXG5cdFx0XHRpZiAoZWxlbSkge1xuXHRcdFx0XHR0eXBlID0gKHR5cGUgfHwgXCJmeFwiKSArIFwicXVldWVcIjtcblx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoZWxlbSwgdHlwZSk7XG5cblx0XHRcdFx0aWYgKGRhdGEpIHtcblx0XHRcdFx0XHRpZiAoIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcblx0XHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoZGF0YSkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKGRhdGEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGRlcXVldWU6IGZ1bmN0aW9uIGRlcXVldWUoZWxlbSwgdHlwZSkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoZWxlbSwgdHlwZSksXG5cdFx0XHQgICAgc3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHQgICAgZm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0ICAgIGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKGVsZW0sIHR5cGUpLFxuXHRcdFx0ICAgIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZShlbGVtLCB0eXBlKTtcblx0XHRcdH07XG5cblx0XHRcdGlmIChmbiA9PT0gXCJpbnByb2dyZXNzXCIpIHtcblx0XHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZm4pIHtcblxuXHRcdFx0XHRpZiAodHlwZSA9PT0gXCJmeFwiKSB7XG5cdFx0XHRcdFx0cXVldWUudW5zaGlmdChcImlucHJvZ3Jlc3NcIik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdFx0Zm4uY2FsbChlbGVtLCBuZXh0LCBob29rcyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghc3RhcnRMZW5ndGggJiYgaG9va3MpIHtcblx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfcXVldWVIb29rczogZnVuY3Rpb24gX3F1ZXVlSG9va3MoZWxlbSwgdHlwZSkge1xuXHRcdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRcdHJldHVybiBkYXRhUHJpdi5nZXQoZWxlbSwga2V5KSB8fCBkYXRhUHJpdi5hY2Nlc3MoZWxlbSwga2V5LCB7XG5cdFx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoZWxlbSwgW3R5cGUgKyBcInF1ZXVlXCIsIGtleV0pO1xuXHRcdFx0XHR9KVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRxdWV1ZTogZnVuY3Rpb24gcXVldWUodHlwZSwgZGF0YSkge1xuXHRcdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRcdGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdFx0c2V0dGVyLS07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkucXVldWUodGhpc1swXSwgdHlwZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKHRoaXMsIHR5cGUsIGRhdGEpO1xuXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyh0aGlzLCB0eXBlKTtcblxuXHRcdFx0XHRpZiAodHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWzBdICE9PSBcImlucHJvZ3Jlc3NcIikge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKHRoaXMsIHR5cGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdGRlcXVldWU6IGZ1bmN0aW9uIGRlcXVldWUodHlwZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKHRoaXMsIHR5cGUpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRjbGVhclF1ZXVlOiBmdW5jdGlvbiBjbGVhclF1ZXVlKHR5cGUpIHtcblx0XHRcdHJldHVybiB0aGlzLnF1ZXVlKHR5cGUgfHwgXCJmeFwiLCBbXSk7XG5cdFx0fSxcblxuXHRcdHByb21pc2U6IGZ1bmN0aW9uIHByb21pc2UodHlwZSwgb2JqKSB7XG5cdFx0XHR2YXIgdG1wLFxuXHRcdFx0ICAgIGNvdW50ID0gMSxcblx0XHRcdCAgICBkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ICAgIGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdCAgICBpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHQgICAgcmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG5cdFx0XHRcdGlmICghIC0tY291bnQpIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aChlbGVtZW50cywgW2VsZW1lbnRzXSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdHRtcCA9IGRhdGFQcml2LmdldChlbGVtZW50c1tpXSwgdHlwZSArIFwicXVldWVIb29rc1wiKTtcblx0XHRcdFx0aWYgKHRtcCAmJiB0bXAuZW1wdHkpIHtcblx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHRcdHRtcC5lbXB0eS5hZGQocmVzb2x2ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJlc29sdmUoKTtcblx0XHRcdHJldHVybiBkZWZlci5wcm9taXNlKG9iaik7XG5cdFx0fVxuXHR9KTtcblx0dmFyIHBudW0gPSAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2U7XG5cblx0dmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiKTtcblxuXHR2YXIgY3NzRXhwYW5kID0gW1wiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCJdO1xuXG5cdHZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiBpc0hpZGRlbldpdGhpblRyZWUoZWxlbSwgZWwpIHtcblxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRqUXVlcnkuY29udGFpbnMoZWxlbS5vd25lckRvY3VtZW50LCBlbGVtKSAmJiBqUXVlcnkuY3NzKGVsZW0sIFwiZGlzcGxheVwiKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblx0dmFyIHN3YXAgPSBmdW5jdGlvbiBzd2FwKGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzKSB7XG5cdFx0dmFyIHJldCxcblx0XHQgICAgbmFtZSxcblx0XHQgICAgb2xkID0ge307XG5cblx0XHRmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0b2xkW25hbWVdID0gZWxlbS5zdHlsZVtuYW1lXTtcblx0XHRcdGVsZW0uc3R5bGVbbmFtZV0gPSBvcHRpb25zW25hbWVdO1xuXHRcdH1cblxuXHRcdHJldCA9IGNhbGxiYWNrLmFwcGx5KGVsZW0sIGFyZ3MgfHwgW10pO1xuXG5cdFx0Zm9yIChuYW1lIGluIG9wdGlvbnMpIHtcblx0XHRcdGVsZW0uc3R5bGVbbmFtZV0gPSBvbGRbbmFtZV07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fTtcblxuXHRmdW5jdGlvbiBhZGp1c3RDU1MoZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4pIHtcblx0XHR2YXIgYWRqdXN0ZWQsXG5cdFx0ICAgIHNjYWxlID0gMSxcblx0XHQgICAgbWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdCAgICBjdXJyZW50VmFsdWUgPSB0d2VlbiA/IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHR9IDogZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoZWxlbSwgcHJvcCwgXCJcIik7XG5cdFx0fSxcblx0XHQgICAgaW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdCAgICB1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWzNdIHx8IChqUXVlcnkuY3NzTnVtYmVyW3Byb3BdID8gXCJcIiA6IFwicHhcIiksXG5cblxuXHRcdGluaXRpYWxJblVuaXQgPSAoalF1ZXJ5LmNzc051bWJlcltwcm9wXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwpICYmIHJjc3NOdW0uZXhlYyhqUXVlcnkuY3NzKGVsZW0sIHByb3ApKTtcblxuXHRcdGlmIChpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbM10gIT09IHVuaXQpIHtcblxuXHRcdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFszXTtcblxuXHRcdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0XHRkbyB7XG5cblx0XHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0KTtcblxuXHRcdFx0fSB3aGlsZSAoc2NhbGUgIT09IChzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zKTtcblx0XHR9XG5cblx0XHRpZiAodmFsdWVQYXJ0cykge1xuXHRcdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sxXSA/IGluaXRpYWxJblVuaXQgKyAodmFsdWVQYXJ0c1sxXSArIDEpICogdmFsdWVQYXJ0c1syXSA6ICt2YWx1ZVBhcnRzWzJdO1xuXHRcdFx0aWYgKHR3ZWVuKSB7XG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gYWRqdXN0ZWQ7XG5cdH1cblxuXHR2YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuXHRmdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheShlbGVtKSB7XG5cdFx0dmFyIHRlbXAsXG5cdFx0ICAgIGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHQgICAgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdCAgICBkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbbm9kZU5hbWVdO1xuXG5cdFx0aWYgKGRpc3BsYXkpIHtcblx0XHRcdHJldHVybiBkaXNwbGF5O1xuXHRcdH1cblxuXHRcdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZChkb2MuY3JlYXRlRWxlbWVudChub2RlTmFtZSkpO1xuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKHRlbXAsIFwiZGlzcGxheVwiKTtcblxuXHRcdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0ZW1wKTtcblxuXHRcdGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuXHRcdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0XHR9XG5cdFx0ZGVmYXVsdERpc3BsYXlNYXBbbm9kZU5hbWVdID0gZGlzcGxheTtcblxuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2hvd0hpZGUoZWxlbWVudHMsIHNob3cpIHtcblx0XHR2YXIgZGlzcGxheSxcblx0XHQgICAgZWxlbSxcblx0XHQgICAgdmFsdWVzID0gW10sXG5cdFx0ICAgIGluZGV4ID0gMCxcblx0XHQgICAgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdFx0Zm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRlbGVtID0gZWxlbWVudHNbaW5kZXhdO1xuXHRcdFx0aWYgKCFlbGVtLnN0eWxlKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdFx0aWYgKHNob3cpIHtcblxuXHRcdFx0XHRpZiAoZGlzcGxheSA9PT0gXCJub25lXCIpIHtcblx0XHRcdFx0XHR2YWx1ZXNbaW5kZXhdID0gZGF0YVByaXYuZ2V0KGVsZW0sIFwiZGlzcGxheVwiKSB8fCBudWxsO1xuXHRcdFx0XHRcdGlmICghdmFsdWVzW2luZGV4XSkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoZWxlbSkpIHtcblx0XHRcdFx0XHR2YWx1ZXNbaW5kZXhdID0gZ2V0RGVmYXVsdERpc3BsYXkoZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChkaXNwbGF5ICE9PSBcIm5vbmVcIikge1xuXHRcdFx0XHRcdHZhbHVlc1tpbmRleF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHRcdGRhdGFQcml2LnNldChlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdGlmICh2YWx1ZXNbaW5kZXhdICE9IG51bGwpIHtcblx0XHRcdFx0ZWxlbWVudHNbaW5kZXhdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbaW5kZXhdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtZW50cztcblx0fVxuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG5cdFx0XHRyZXR1cm4gc2hvd0hpZGUodGhpcywgdHJ1ZSk7XG5cdFx0fSxcblx0XHRoaWRlOiBmdW5jdGlvbiBoaWRlKCkge1xuXHRcdFx0cmV0dXJuIHNob3dIaWRlKHRoaXMpO1xuXHRcdH0sXG5cdFx0dG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoc3RhdGUpIHtcblx0XHRcdGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoaXNIaWRkZW5XaXRoaW5UcmVlKHRoaXMpKSB7XG5cdFx0XHRcdFx0alF1ZXJ5KHRoaXMpLnNob3coKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRqUXVlcnkodGhpcykuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXHR2YXIgcmNoZWNrYWJsZVR5cGUgPSAvXig/OmNoZWNrYm94fHJhZGlvKSQvaTtcblxuXHR2YXIgcnRhZ05hbWUgPSAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2k7XG5cblx0dmFyIHJzY3JpcHRUeXBlID0gL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaTtcblxuXHR2YXIgd3JhcE1hcCA9IHtcblxuXHRcdG9wdGlvbjogWzEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiXSxcblxuXHRcdHRoZWFkOiBbMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIl0sXG5cdFx0Y29sOiBbMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sXG5cdFx0dHI6IFsyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiXSxcblx0XHR0ZDogWzMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLFxuXG5cdFx0X2RlZmF1bHQ6IFswLCBcIlwiLCBcIlwiXVxuXHR9O1xuXG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxuXHR3cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xuXHR3cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXHRmdW5jdGlvbiBnZXRBbGwoY29udGV4dCwgdGFnKSB7XG5cblx0XHR2YXIgcmV0O1xuXG5cdFx0aWYgKHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyB8fCBcIipcIik7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwodGFnIHx8IFwiKlwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0ID0gW107XG5cdFx0fVxuXG5cdFx0aWYgKHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZShjb250ZXh0LCB0YWcpKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKFtjb250ZXh0XSwgcmV0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0R2xvYmFsRXZhbChlbGVtcywgcmVmRWxlbWVudHMpIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0ICAgIGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRmb3IgKDsgaSA8IGw7IGkrKykge1xuXHRcdFx0ZGF0YVByaXYuc2V0KGVsZW1zW2ldLCBcImdsb2JhbEV2YWxcIiwgIXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldChyZWZFbGVtZW50c1tpXSwgXCJnbG9iYWxFdmFsXCIpKTtcblx0XHR9XG5cdH1cblxuXHR2YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cblx0ZnVuY3Rpb24gYnVpbGRGcmFnbWVudChlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0ICAgIHRtcCxcblx0XHQgICAgdGFnLFxuXHRcdCAgICB3cmFwLFxuXHRcdCAgICBjb250YWlucyxcblx0XHQgICAgaixcblx0XHQgICAgZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHQgICAgbm9kZXMgPSBbXSxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRmb3IgKDsgaSA8IGw7IGkrKykge1xuXHRcdFx0ZWxlbSA9IGVsZW1zW2ldO1xuXG5cdFx0XHRpZiAoZWxlbSB8fCBlbGVtID09PSAwKSB7XG5cblx0XHRcdFx0aWYgKGpRdWVyeS50eXBlKGVsZW0pID09PSBcIm9iamVjdFwiKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkubWVyZ2Uobm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbZWxlbV0gOiBlbGVtKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCFyaHRtbC50ZXN0KGVsZW0pKSB7XG5cdFx0XHRcdFx0bm9kZXMucHVzaChjb250ZXh0LmNyZWF0ZVRleHROb2RlKGVsZW0pKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZChjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO1xuXG5cdFx0XHRcdFx0dGFnID0gKHJ0YWdOYW1lLmV4ZWMoZWxlbSkgfHwgW1wiXCIsIFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHdyYXAgPSB3cmFwTWFwW3RhZ10gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKGVsZW0pICsgd3JhcFsyXTtcblxuXHRcdFx0XHRcdGogPSB3cmFwWzBdO1xuXHRcdFx0XHRcdHdoaWxlIChqLS0pIHtcblx0XHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKG5vZGVzLCB0bXAuY2hpbGROb2Rlcyk7XG5cblx0XHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlIChlbGVtID0gbm9kZXNbaSsrXSkge1xuXG5cdFx0XHRpZiAoc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KGVsZW0sIHNlbGVjdGlvbikgPiAtMSkge1xuXHRcdFx0XHRpZiAoaWdub3JlZCkge1xuXHRcdFx0XHRcdGlnbm9yZWQucHVzaChlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoZWxlbS5vd25lckRvY3VtZW50LCBlbGVtKTtcblxuXHRcdFx0dG1wID0gZ2V0QWxsKGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW0pLCBcInNjcmlwdFwiKTtcblxuXHRcdFx0aWYgKGNvbnRhaW5zKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwodG1wKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHNjcmlwdHMpIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlIChlbGVtID0gdG1wW2orK10pIHtcblx0XHRcdFx0XHRpZiAocnNjcmlwdFR5cGUudGVzdChlbGVtLnR5cGUgfHwgXCJcIikpIHtcblx0XHRcdFx0XHRcdHNjcmlwdHMucHVzaChlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZnJhZ21lbnQ7XG5cdH1cblxuXHQoZnVuY3Rpb24gKCkge1xuXHRcdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHQgICAgZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksXG5cdFx0ICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInJhZGlvXCIpO1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIpO1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJ0XCIpO1xuXG5cdFx0ZGl2LmFwcGVuZENoaWxkKGlucHV0KTtcblxuXHRcdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUodHJ1ZSkuY2xvbmVOb2RlKHRydWUpLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRcdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUodHJ1ZSkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblx0fSkoKTtcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHR2YXIgcmtleUV2ZW50ID0gL15rZXkvLFxuXHQgICAgcm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdCAgICBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cblx0ZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0XHR9IGNhdGNoIChlcnIpIHt9XG5cdH1cblxuXHRmdW5jdGlvbiBfb24oZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lKSB7XG5cdFx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHRcdGlmICgodHlwZW9mIHR5cGVzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodHlwZXMpKSA9PT0gXCJvYmplY3RcIikge1xuXG5cdFx0XHRpZiAodHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiKSB7XG5cblx0XHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh0eXBlIGluIHR5cGVzKSB7XG5cdFx0XHRcdF9vbihlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbdHlwZV0sIG9uZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZWxlbTtcblx0XHR9XG5cblx0XHRpZiAoZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwpIHtcblxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2UgaWYgKGZuID09IG51bGwpIHtcblx0XHRcdGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIpIHtcblxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZuID0gZGF0YTtcblx0XHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGZuID09PSBmYWxzZSkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCFmbikge1xuXHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0fVxuXG5cdFx0aWYgKG9uZSA9PT0gMSkge1xuXHRcdFx0b3JpZ0ZuID0gZm47XG5cdFx0XHRmbiA9IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG5cblx0XHRcdFx0alF1ZXJ5KCkub2ZmKGV2ZW50KTtcblx0XHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fTtcblxuXHRcdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8IChvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKyspO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQodGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3Rvcik7XG5cdFx0fSk7XG5cdH1cblxuXHRqUXVlcnkuZXZlbnQgPSB7XG5cblx0XHRnbG9iYWw6IHt9LFxuXG5cdFx0YWRkOiBmdW5jdGlvbiBhZGQoZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yKSB7XG5cblx0XHRcdHZhciBoYW5kbGVPYmpJbixcblx0XHRcdCAgICBldmVudEhhbmRsZSxcblx0XHRcdCAgICB0bXAsXG5cdFx0XHQgICAgZXZlbnRzLFxuXHRcdFx0ICAgIHQsXG5cdFx0XHQgICAgaGFuZGxlT2JqLFxuXHRcdFx0ICAgIHNwZWNpYWwsXG5cdFx0XHQgICAgaGFuZGxlcnMsXG5cdFx0XHQgICAgdHlwZSxcblx0XHRcdCAgICBuYW1lc3BhY2VzLFxuXHRcdFx0ICAgIG9yaWdUeXBlLFxuXHRcdFx0ICAgIGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KGVsZW0pO1xuXG5cdFx0XHRpZiAoIWVsZW1EYXRhKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGhhbmRsZXIuaGFuZGxlcikge1xuXHRcdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZWN0b3IpIHtcblx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWhhbmRsZXIuZ3VpZCkge1xuXHRcdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpKSB7XG5cdFx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpKSB7XG5cdFx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24gKGUpIHtcblxuXHRcdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/IGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseShlbGVtLCBhcmd1bWVudHMpIDogdW5kZWZpbmVkO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHR0eXBlcyA9ICh0eXBlcyB8fCBcIlwiKS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXCJcIl07XG5cdFx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKHQtLSkge1xuXHRcdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKHR5cGVzW3RdKSB8fCBbXTtcblx0XHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0XHRuYW1lc3BhY2VzID0gKHRtcFsyXSB8fCBcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpO1xuXG5cdFx0XHRcdGlmICghdHlwZSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsW3R5cGVdIHx8IHt9O1xuXG5cdFx0XHRcdHR5cGUgPSAoc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUpIHx8IHR5cGU7XG5cblx0XHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsW3R5cGVdIHx8IHt9O1xuXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoe1xuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3Qoc2VsZWN0b3IpLFxuXHRcdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKFwiLlwiKVxuXHRcdFx0XHR9LCBoYW5kbGVPYmpJbik7XG5cblx0XHRcdFx0aWYgKCEoaGFuZGxlcnMgPSBldmVudHNbdHlwZV0pKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbdHlwZV0gPSBbXTtcblx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHRcdGlmICghc3BlY2lhbC5zZXR1cCB8fCBzcGVjaWFsLnNldHVwLmNhbGwoZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUpID09PSBmYWxzZSkge1xuXG5cdFx0XHRcdFx0XHRpZiAoZWxlbS5hZGRFdmVudExpc3RlbmVyKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBldmVudEhhbmRsZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHNwZWNpYWwuYWRkKSB7XG5cdFx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbChlbGVtLCBoYW5kbGVPYmopO1xuXG5cdFx0XHRcdFx0aWYgKCFoYW5kbGVPYmouaGFuZGxlci5ndWlkKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzZWxlY3Rvcikge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZShoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMucHVzaChoYW5kbGVPYmopO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFt0eXBlXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMpIHtcblxuXHRcdFx0dmFyIGosXG5cdFx0XHQgICAgb3JpZ0NvdW50LFxuXHRcdFx0ICAgIHRtcCxcblx0XHRcdCAgICBldmVudHMsXG5cdFx0XHQgICAgdCxcblx0XHRcdCAgICBoYW5kbGVPYmosXG5cdFx0XHQgICAgc3BlY2lhbCxcblx0XHRcdCAgICBoYW5kbGVycyxcblx0XHRcdCAgICB0eXBlLFxuXHRcdFx0ICAgIG5hbWVzcGFjZXMsXG5cdFx0XHQgICAgb3JpZ1R5cGUsXG5cdFx0XHQgICAgZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKGVsZW0pICYmIGRhdGFQcml2LmdldChlbGVtKTtcblxuXHRcdFx0aWYgKCFlbGVtRGF0YSB8fCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0eXBlcyA9ICh0eXBlcyB8fCBcIlwiKS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXCJcIl07XG5cdFx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKHQtLSkge1xuXHRcdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKHR5cGVzW3RdKSB8fCBbXTtcblx0XHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0XHRuYW1lc3BhY2VzID0gKHRtcFsyXSB8fCBcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpO1xuXG5cdFx0XHRcdGlmICghdHlwZSkge1xuXHRcdFx0XHRcdGZvciAodHlwZSBpbiBldmVudHMpIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoZWxlbSwgdHlwZSArIHR5cGVzW3RdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsW3R5cGVdIHx8IHt9O1xuXHRcdFx0XHR0eXBlID0gKHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlKSB8fCB0eXBlO1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1t0eXBlXSB8fCBbXTtcblx0XHRcdFx0dG1wID0gdG1wWzJdICYmIG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIik7XG5cblx0XHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKGotLSkge1xuXHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzW2pdO1xuXG5cdFx0XHRcdFx0aWYgKChtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlKSAmJiAoIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCkgJiYgKCF0bXAgfHwgdG1wLnRlc3QoaGFuZGxlT2JqLm5hbWVzcGFjZSkpICYmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvcikpIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZShqLCAxKTtcblxuXHRcdFx0XHRcdFx0aWYgKGhhbmRsZU9iai5zZWxlY3Rvcikge1xuXHRcdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoc3BlY2lhbC5yZW1vdmUpIHtcblx0XHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbChlbGVtLCBoYW5kbGVPYmopO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCkge1xuXHRcdFx0XHRcdGlmICghc3BlY2lhbC50ZWFyZG93biB8fCBzcGVjaWFsLnRlYXJkb3duLmNhbGwoZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlKSA9PT0gZmFsc2UpIHtcblxuXHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZGVsZXRlIGV2ZW50c1t0eXBlXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoalF1ZXJ5LmlzRW1wdHlPYmplY3QoZXZlbnRzKSkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2gobmF0aXZlRXZlbnQpIHtcblxuXHRcdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeChuYXRpdmVFdmVudCk7XG5cblx0XHRcdHZhciBpLFxuXHRcdFx0ICAgIGosXG5cdFx0XHQgICAgcmV0LFxuXHRcdFx0ICAgIG1hdGNoZWQsXG5cdFx0XHQgICAgaGFuZGxlT2JqLFxuXHRcdFx0ICAgIGhhbmRsZXJRdWV1ZSxcblx0XHRcdCAgICBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLFxuXHRcdFx0ICAgIGhhbmRsZXJzID0gKGRhdGFQcml2LmdldCh0aGlzLCBcImV2ZW50c1wiKSB8fCB7fSlbZXZlbnQudHlwZV0gfHwgW10sXG5cdFx0XHQgICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsW2V2ZW50LnR5cGVdIHx8IHt9O1xuXG5cdFx0XHRhcmdzWzBdID0gZXZlbnQ7XG5cblx0XHRcdGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0YXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdH1cblxuXHRcdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0XHRpZiAoc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwodGhpcywgZXZlbnQpID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsIGV2ZW50LCBoYW5kbGVycyk7XG5cblx0XHRcdGkgPSAwO1xuXHRcdFx0d2hpbGUgKChtYXRjaGVkID0gaGFuZGxlclF1ZXVlW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG5cdFx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICgoaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1tqKytdKSAmJiAhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuXG5cdFx0XHRcdFx0aWYgKCFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdChoYW5kbGVPYmoubmFtZXNwYWNlKSkge1xuXG5cdFx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRcdHJldCA9ICgoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbaGFuZGxlT2JqLm9yaWdUeXBlXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyKS5hcHBseShtYXRjaGVkLmVsZW0sIGFyZ3MpO1xuXG5cdFx0XHRcdFx0XHRpZiAocmV0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0aWYgKChldmVudC5yZXN1bHQgPSByZXQpID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHNwZWNpYWwucG9zdERpc3BhdGNoKSB7XG5cdFx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwodGhpcywgZXZlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVyczogZnVuY3Rpb24gaGFuZGxlcnMoZXZlbnQsIF9oYW5kbGVycykge1xuXHRcdFx0dmFyIGksXG5cdFx0XHQgICAgaGFuZGxlT2JqLFxuXHRcdFx0ICAgIHNlbCxcblx0XHRcdCAgICBtYXRjaGVkSGFuZGxlcnMsXG5cdFx0XHQgICAgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdCAgICBoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdCAgICBkZWxlZ2F0ZUNvdW50ID0gX2hhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHQgICAgY3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0XHRpZiAoZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0IShldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEpKSB7XG5cblx0XHRcdFx0Zm9yICg7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcykge1xuXG5cdFx0XHRcdFx0aWYgKGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUpKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKyspIHtcblx0XHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gX2hhbmRsZXJzW2ldO1xuXG5cdFx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChtYXRjaGVkU2VsZWN0b3JzW3NlbF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbc2VsXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgPyBqUXVlcnkoc2VsLCB0aGlzKS5pbmRleChjdXIpID4gLTEgOiBqUXVlcnkuZmluZChzZWwsIHRoaXMsIG51bGwsIFtjdXJdKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKG1hdGNoZWRTZWxlY3RvcnNbc2VsXSkge1xuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKGhhbmRsZU9iaik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChtYXRjaGVkSGFuZGxlcnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjdXIgPSB0aGlzO1xuXHRcdFx0aWYgKGRlbGVnYXRlQ291bnQgPCBfaGFuZGxlcnMubGVuZ3RoKSB7XG5cdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogX2hhbmRsZXJzLnNsaWNlKGRlbGVnYXRlQ291bnQpIH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHRcdH0sXG5cblx0XHRhZGRQcm9wOiBmdW5jdGlvbiBhZGRQcm9wKG5hbWUsIGhvb2spIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKGhvb2spID8gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKHRoaXMub3JpZ2luYWxFdmVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbbmFtZV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Zml4OiBmdW5jdGlvbiBmaXgob3JpZ2luYWxFdmVudCkge1xuXHRcdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbalF1ZXJ5LmV4cGFuZG9dID8gb3JpZ2luYWxFdmVudCA6IG5ldyBqUXVlcnkuRXZlbnQob3JpZ2luYWxFdmVudCk7XG5cdFx0fSxcblxuXHRcdHNwZWNpYWw6IHtcblx0XHRcdGxvYWQ6IHtcblxuXHRcdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGZvY3VzOiB7XG5cblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcigpIHtcblx0XHRcdFx0XHRpZiAodGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0XHR9LFxuXHRcdFx0Ymx1cjoge1xuXHRcdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuXHRcdFx0XHRcdGlmICh0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1cikge1xuXHRcdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdFx0fSxcblx0XHRcdGNsaWNrOiB7XG5cblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcigpIHtcblx0XHRcdFx0XHRpZiAodGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSh0aGlzLCBcImlucHV0XCIpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdChldmVudCkge1xuXHRcdFx0XHRcdHJldHVybiBub2RlTmFtZShldmVudC50YXJnZXQsIFwiYVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24gcG9zdERpc3BhdGNoKGV2ZW50KSB7XG5cblx0XHRcdFx0XHRpZiAoZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCkge1xuXHRcdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0alF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gKGVsZW0sIHR5cGUsIGhhbmRsZSkge1xuXG5cdFx0aWYgKGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuXHRcdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG5cdFx0fVxuXHR9O1xuXG5cdGpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uIChzcmMsIHByb3BzKSB7XG5cblx0XHRpZiAoISh0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50KSkge1xuXHRcdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoc3JjLCBwcm9wcyk7XG5cdFx0fVxuXG5cdFx0aWYgKHNyYyAmJiBzcmMudHlwZSkge1xuXHRcdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHwgc3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID8gcmV0dXJuVHJ1ZSA6IHJldHVybkZhbHNlO1xuXG5cdFx0XHR0aGlzLnRhcmdldCA9IHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyA/IHNyYy50YXJnZXQucGFyZW50Tm9kZSA6IHNyYy50YXJnZXQ7XG5cblx0XHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50eXBlID0gc3JjO1xuXHRcdH1cblxuXHRcdGlmIChwcm9wcykge1xuXHRcdFx0alF1ZXJ5LmV4dGVuZCh0aGlzLCBwcm9wcyk7XG5cdFx0fVxuXG5cdFx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0XHR0aGlzW2pRdWVyeS5leHBhbmRvXSA9IHRydWU7XG5cdH07XG5cblx0alF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0XHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRcdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdFx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRcdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0XHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0XHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gcHJldmVudERlZmF1bHQoKSB7XG5cdFx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0XHRpZiAoZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcblx0XHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdFx0aWYgKGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQpIHtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkge1xuXHRcdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0XHRpZiAoZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCkge1xuXHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuZWFjaCh7XG5cdFx0YWx0S2V5OiB0cnVlLFxuXHRcdGJ1YmJsZXM6IHRydWUsXG5cdFx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0XHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0XHRjdHJsS2V5OiB0cnVlLFxuXHRcdGRldGFpbDogdHJ1ZSxcblx0XHRldmVudFBoYXNlOiB0cnVlLFxuXHRcdG1ldGFLZXk6IHRydWUsXG5cdFx0cGFnZVg6IHRydWUsXG5cdFx0cGFnZVk6IHRydWUsXG5cdFx0c2hpZnRLZXk6IHRydWUsXG5cdFx0dmlldzogdHJ1ZSxcblx0XHRcImNoYXJcIjogdHJ1ZSxcblx0XHRjaGFyQ29kZTogdHJ1ZSxcblx0XHRrZXk6IHRydWUsXG5cdFx0a2V5Q29kZTogdHJ1ZSxcblx0XHRidXR0b246IHRydWUsXG5cdFx0YnV0dG9uczogdHJ1ZSxcblx0XHRjbGllbnRYOiB0cnVlLFxuXHRcdGNsaWVudFk6IHRydWUsXG5cdFx0b2Zmc2V0WDogdHJ1ZSxcblx0XHRvZmZzZXRZOiB0cnVlLFxuXHRcdHBvaW50ZXJJZDogdHJ1ZSxcblx0XHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0XHRzY3JlZW5YOiB0cnVlLFxuXHRcdHNjcmVlblk6IHRydWUsXG5cdFx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0XHR0b0VsZW1lbnQ6IHRydWUsXG5cdFx0dG91Y2hlczogdHJ1ZSxcblxuXHRcdHdoaWNoOiBmdW5jdGlvbiB3aGljaChldmVudCkge1xuXHRcdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdFx0aWYgKGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoZXZlbnQudHlwZSkpIHtcblx0XHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdChldmVudC50eXBlKSkge1xuXHRcdFx0XHRpZiAoYnV0dG9uICYgMSkge1xuXHRcdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGJ1dHRvbiAmIDIpIHtcblx0XHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChidXR0b24gJiA0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHRcdH1cblx0fSwgalF1ZXJ5LmV2ZW50LmFkZFByb3ApO1xuXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRcdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0XHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0XHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG5cdH0sIGZ1bmN0aW9uIChvcmlnLCBmaXgpIHtcblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFtvcmlnXSA9IHtcblx0XHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdFx0aGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcblx0XHRcdFx0dmFyIHJldCxcblx0XHRcdFx0ICAgIHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdCAgICByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0ICAgIGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0XHRpZiAoIXJlbGF0ZWQgfHwgcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnModGFyZ2V0LCByZWxhdGVkKSkge1xuXHRcdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cblx0XHRvbjogZnVuY3Rpb24gb24odHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbikge1xuXHRcdFx0cmV0dXJuIF9vbih0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuKTtcblx0XHR9LFxuXHRcdG9uZTogZnVuY3Rpb24gb25lKHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4pIHtcblx0XHRcdHJldHVybiBfb24odGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSk7XG5cdFx0fSxcblx0XHRvZmY6IGZ1bmN0aW9uIG9mZih0eXBlcywgc2VsZWN0b3IsIGZuKSB7XG5cdFx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdFx0aWYgKHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaikge1xuXG5cdFx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdFx0alF1ZXJ5KHR5cGVzLmRlbGVnYXRlVGFyZ2V0KS5vZmYoaGFuZGxlT2JqLm5hbWVzcGFjZSA/IGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6IGhhbmRsZU9iai5vcmlnVHlwZSwgaGFuZGxlT2JqLnNlbGVjdG9yLCBoYW5kbGVPYmouaGFuZGxlcik7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCh0eXBlb2YgdHlwZXMgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0eXBlcykpID09PSBcIm9iamVjdFwiKSB7XG5cblx0XHRcdFx0Zm9yICh0eXBlIGluIHR5cGVzKSB7XG5cdFx0XHRcdFx0dGhpcy5vZmYodHlwZSwgc2VsZWN0b3IsIHR5cGVzW3R5cGVdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHRcdGlmIChzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcblxuXHRcdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmIChmbiA9PT0gZmFsc2UpIHtcblx0XHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHR2YXJcblxuXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cblxuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0ICAgIHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdCAgICByY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cblx0ZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KGVsZW0sIGNvbnRlbnQpIHtcblx0XHRpZiAobm9kZU5hbWUoZWxlbSwgXCJ0YWJsZVwiKSAmJiBub2RlTmFtZShjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIikpIHtcblxuXHRcdFx0cmV0dXJuIGpRdWVyeShcIj50Ym9keVwiLCBlbGVtKVswXSB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGlzYWJsZVNjcmlwdChlbGVtKSB7XG5cdFx0ZWxlbS50eXBlID0gKGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT0gbnVsbCkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXHRmdW5jdGlvbiByZXN0b3JlU2NyaXB0KGVsZW0pIHtcblx0XHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKGVsZW0udHlwZSk7XG5cblx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdGVsZW0udHlwZSA9IG1hdGNoWzFdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRmdW5jdGlvbiBjbG9uZUNvcHlFdmVudChzcmMsIGRlc3QpIHtcblx0XHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRcdGlmIChkZXN0Lm5vZGVUeXBlICE9PSAxKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGRhdGFQcml2Lmhhc0RhdGEoc3JjKSkge1xuXHRcdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3Moc3JjKTtcblx0XHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KGRlc3QsIHBkYXRhT2xkKTtcblx0XHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdFx0aWYgKGV2ZW50cykge1xuXHRcdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0XHRmb3IgKHR5cGUgaW4gZXZlbnRzKSB7XG5cdFx0XHRcdFx0Zm9yIChpID0gMCwgbCA9IGV2ZW50c1t0eXBlXS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoZGVzdCwgdHlwZSwgZXZlbnRzW3R5cGVdW2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZGF0YVVzZXIuaGFzRGF0YShzcmMpKSB7XG5cdFx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2VzcyhzcmMpO1xuXHRcdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKHt9LCB1ZGF0YU9sZCk7XG5cblx0XHRcdGRhdGFVc2VyLnNldChkZXN0LCB1ZGF0YUN1cik7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZml4SW5wdXQoc3JjLCBkZXN0KSB7XG5cdFx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdChzcmMudHlwZSkpIHtcblx0XHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdFx0fSBlbHNlIGlmIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIpIHtcblx0XHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBkb21NYW5pcChjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCkge1xuXG5cdFx0YXJncyA9IGNvbmNhdC5hcHBseShbXSwgYXJncyk7XG5cblx0XHR2YXIgZnJhZ21lbnQsXG5cdFx0ICAgIGZpcnN0LFxuXHRcdCAgICBzY3JpcHRzLFxuXHRcdCAgICBoYXNTY3JpcHRzLFxuXHRcdCAgICBub2RlLFxuXHRcdCAgICBkb2MsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0ICAgIGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0ICAgIHZhbHVlID0gYXJnc1swXSxcblx0XHQgICAgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlKTtcblxuXHRcdGlmIChpc0Z1bmN0aW9uIHx8IGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuXHRcdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoaW5kZXgpO1xuXHRcdFx0XHRpZiAoaXNGdW5jdGlvbikge1xuXHRcdFx0XHRcdGFyZ3NbMF0gPSB2YWx1ZS5jYWxsKHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZG9tTWFuaXAoc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKGwpIHtcblx0XHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudChhcmdzLCBjb2xsZWN0aW9uWzBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkKTtcblx0XHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0aWYgKGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmaXJzdCB8fCBpZ25vcmVkKSB7XG5cdFx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKGdldEFsbChmcmFnbWVudCwgXCJzY3JpcHRcIiksIGRpc2FibGVTY3JpcHQpO1xuXHRcdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0XHRpZiAoaSAhPT0gaU5vQ2xvbmUpIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUobm9kZSwgdHJ1ZSwgdHJ1ZSk7XG5cblx0XHRcdFx0XHRcdGlmIChoYXNTY3JpcHRzKSB7XG5cblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKHNjcmlwdHMsIGdldEFsbChub2RlLCBcInNjcmlwdFwiKSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbChjb2xsZWN0aW9uW2ldLCBub2RlLCBpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChoYXNTY3JpcHRzKSB7XG5cdFx0XHRcdFx0ZG9jID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0XHRqUXVlcnkubWFwKHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQpO1xuXG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKykge1xuXHRcdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbaV07XG5cdFx0XHRcdFx0XHRpZiAocnNjcmlwdFR5cGUudGVzdChub2RlLnR5cGUgfHwgXCJcIikgJiYgIWRhdGFQcml2LmFjY2Vzcyhub2RlLCBcImdsb2JhbEV2YWxcIikgJiYgalF1ZXJ5LmNvbnRhaW5zKGRvYywgbm9kZSkpIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAobm9kZS5zcmMpIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmIChqUXVlcnkuX2V2YWxVcmwpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybChub2RlLnNyYyk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdERPTUV2YWwobm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKHJjbGVhblNjcmlwdCwgXCJcIiksIGRvYyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY29sbGVjdGlvbjtcblx0fVxuXG5cdGZ1bmN0aW9uIF9yZW1vdmUoZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhKSB7XG5cdFx0dmFyIG5vZGUsXG5cdFx0ICAgIG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKHNlbGVjdG9yLCBlbGVtKSA6IGVsZW0sXG5cdFx0ICAgIGkgPSAwO1xuXG5cdFx0Zm9yICg7IChub2RlID0gbm9kZXNbaV0pICE9IG51bGw7IGkrKykge1xuXHRcdFx0aWYgKCFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoZ2V0QWxsKG5vZGUpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG5vZGUucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRpZiAoa2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSkpIHtcblx0XHRcdFx0XHRzZXRHbG9iYWxFdmFsKGdldEFsbChub2RlLCBcInNjcmlwdFwiKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0alF1ZXJ5LmV4dGVuZCh7XG5cdFx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24gaHRtbFByZWZpbHRlcihodG1sKSB7XG5cdFx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIik7XG5cdFx0fSxcblxuXHRcdGNsb25lOiBmdW5jdGlvbiBjbG9uZShlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cykge1xuXHRcdFx0dmFyIGksXG5cdFx0XHQgICAgbCxcblx0XHRcdCAgICBzcmNFbGVtZW50cyxcblx0XHRcdCAgICBkZXN0RWxlbWVudHMsXG5cdFx0XHQgICAgY2xvbmUgPSBlbGVtLmNsb25lTm9kZSh0cnVlKSxcblx0XHRcdCAgICBpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoZWxlbS5vd25lckRvY3VtZW50LCBlbGVtKTtcblxuXHRcdFx0aWYgKCFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmIChlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExKSAmJiAhalF1ZXJ5LmlzWE1MRG9jKGVsZW0pKSB7XG5cblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKGNsb25lKTtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoZWxlbSk7XG5cblx0XHRcdFx0Zm9yIChpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdGZpeElucHV0KHNyY0VsZW1lbnRzW2ldLCBkZXN0RWxlbWVudHNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChkYXRhQW5kRXZlbnRzKSB7XG5cdFx0XHRcdGlmIChkZWVwRGF0YUFuZEV2ZW50cykge1xuXHRcdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKGVsZW0pO1xuXHRcdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoY2xvbmUpO1xuXG5cdFx0XHRcdFx0Zm9yIChpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoc3JjRWxlbWVudHNbaV0sIGRlc3RFbGVtZW50c1tpXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KGVsZW0sIGNsb25lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoY2xvbmUsIFwic2NyaXB0XCIpO1xuXHRcdFx0aWYgKGRlc3RFbGVtZW50cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbChlbGVtLCBcInNjcmlwdFwiKSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjbG9uZTtcblx0XHR9LFxuXG5cdFx0Y2xlYW5EYXRhOiBmdW5jdGlvbiBjbGVhbkRhdGEoZWxlbXMpIHtcblx0XHRcdHZhciBkYXRhLFxuXHRcdFx0ICAgIGVsZW0sXG5cdFx0XHQgICAgdHlwZSxcblx0XHRcdCAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGZvciAoOyAoZWxlbSA9IGVsZW1zW2ldKSAhPT0gdW5kZWZpbmVkOyBpKyspIHtcblx0XHRcdFx0aWYgKGFjY2VwdERhdGEoZWxlbSkpIHtcblx0XHRcdFx0XHRpZiAoZGF0YSA9IGVsZW1bZGF0YVByaXYuZXhwYW5kb10pIHtcblx0XHRcdFx0XHRcdGlmIChkYXRhLmV2ZW50cykge1xuXHRcdFx0XHRcdFx0XHRmb3IgKHR5cGUgaW4gZGF0YS5ldmVudHMpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoc3BlY2lhbFt0eXBlXSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZShlbGVtLCB0eXBlKTtcblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRlbGVtW2RhdGFQcml2LmV4cGFuZG9dID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZWxlbVtkYXRhVXNlci5leHBhbmRvXSkge1xuXG5cdFx0XHRcdFx0XHRlbGVtW2RhdGFVc2VyLmV4cGFuZG9dID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0ZGV0YWNoOiBmdW5jdGlvbiBkZXRhY2goc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiBfcmVtb3ZlKHRoaXMsIHNlbGVjdG9yLCB0cnVlKTtcblx0XHR9LFxuXG5cdFx0cmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiBfcmVtb3ZlKHRoaXMsIHNlbGVjdG9yKTtcblx0XHR9LFxuXG5cdFx0dGV4dDogZnVuY3Rpb24gdGV4dCh2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyBqUXVlcnkudGV4dCh0aGlzKSA6IHRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoKTtcblx0XHR9LFxuXG5cdFx0YXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQoKSB7XG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHRpZiAodGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCh0aGlzLCBlbGVtKTtcblx0XHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRwcmVwZW5kOiBmdW5jdGlvbiBwcmVwZW5kKCkge1xuXHRcdFx0cmV0dXJuIGRvbU1hbmlwKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0aWYgKHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSkge1xuXHRcdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQodGhpcywgZWxlbSk7XG5cdFx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSgpIHtcblx0XHRcdHJldHVybiBkb21NYW5pcCh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdGlmICh0aGlzLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW0sIHRoaXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0YWZ0ZXI6IGZ1bmN0aW9uIGFmdGVyKCkge1xuXHRcdFx0cmV0dXJuIGRvbU1hbmlwKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdFx0aWYgKHRoaXMucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbSwgdGhpcy5uZXh0U2libGluZyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdCAgICBpID0gMDtcblxuXHRcdFx0Zm9yICg7IChlbGVtID0gdGhpc1tpXSkgIT0gbnVsbDsgaSsrKSB7XG5cdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKGdldEFsbChlbGVtLCBmYWxzZSkpO1xuXG5cdFx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdGNsb25lOiBmdW5jdGlvbiBjbG9uZShkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cykge1xuXHRcdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSh0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0aHRtbDogZnVuY3Rpb24gaHRtbCh2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzWzBdIHx8IHt9LFxuXHRcdFx0XHQgICAgaSA9IDAsXG5cdFx0XHRcdCAgICBsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KHZhbHVlKSAmJiAhd3JhcE1hcFsocnRhZ05hbWUuZXhlYyh2YWx1ZSkgfHwgW1wiXCIsIFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXSkge1xuXG5cdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlcih2YWx1ZSk7XG5cblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0Zm9yICg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbaV0gfHwge307XG5cblx0XHRcdFx0XHRcdFx0aWYgKGVsZW0ubm9kZVR5cGUgPT09IDEpIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKGdldEFsbChlbGVtLCBmYWxzZSkpO1xuXHRcdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGVsZW0pIHtcblx0XHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGgpO1xuXHRcdH0sXG5cblx0XHRyZXBsYWNlV2l0aDogZnVuY3Rpb24gcmVwbGFjZVdpdGgoKSB7XG5cdFx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRcdGlmIChqUXVlcnkuaW5BcnJheSh0aGlzLCBpZ25vcmVkKSA8IDApIHtcblx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKGdldEFsbCh0aGlzKSk7XG5cdFx0XHRcdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZChlbGVtLCB0aGlzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgaWdub3JlZCk7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZWFjaCh7XG5cdFx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdFx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0XHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdFx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0XHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcblx0fSwgZnVuY3Rpb24gKG5hbWUsIG9yaWdpbmFsKSB7XG5cdFx0alF1ZXJ5LmZuW25hbWVdID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG5cdFx0XHR2YXIgZWxlbXMsXG5cdFx0XHQgICAgcmV0ID0gW10sXG5cdFx0XHQgICAgaW5zZXJ0ID0galF1ZXJ5KHNlbGVjdG9yKSxcblx0XHRcdCAgICBsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdGZvciAoOyBpIDw9IGxhc3Q7IGkrKykge1xuXHRcdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSh0cnVlKTtcblx0XHRcdFx0alF1ZXJ5KGluc2VydFtpXSlbb3JpZ2luYWxdKGVsZW1zKTtcblxuXHRcdFx0XHRwdXNoLmFwcGx5KHJldCwgZWxlbXMuZ2V0KCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2socmV0KTtcblx0XHR9O1xuXHR9KTtcblx0dmFyIHJtYXJnaW4gPSAvXm1hcmdpbi87XG5cblx0dmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiKTtcblxuXHR2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gZ2V0U3R5bGVzKGVsZW0pIHtcblxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCF2aWV3IHx8ICF2aWV3Lm9wZW5lcikge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuXHR9O1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cblx0XHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdFx0aWYgKCFkaXYpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm94LXNpemluZzpib3JkZXItYm94O1wiICsgXCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICsgXCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICsgXCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG5cdFx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkaXYpO1xuXHRcdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG5cblx0XHRcdGRpdiA9IG51bGw7XG5cdFx0fVxuXG5cdFx0dmFyIHBpeGVsUG9zaXRpb25WYWwsXG5cdFx0ICAgIGJveFNpemluZ1JlbGlhYmxlVmFsLFxuXHRcdCAgICBwaXhlbE1hcmdpblJpZ2h0VmFsLFxuXHRcdCAgICByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0ICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdFx0ICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0XHRpZiAoIWRpdi5zdHlsZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0XHRkaXYuY2xvbmVOb2RlKHRydWUpLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0XHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgKyBcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXYpO1xuXG5cdFx0alF1ZXJ5LmV4dGVuZChzdXBwb3J0LCB7XG5cdFx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbiBwaXhlbFBvc2l0aW9uKCkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHRcdH0sXG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24gYm94U2l6aW5nUmVsaWFibGUoKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHRcdH0sXG5cdFx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbiBwaXhlbE1hcmdpblJpZ2h0KCkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHRcdH0sXG5cdFx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uIHJlbGlhYmxlTWFyZ2luTGVmdCgpIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHRcdH1cblx0XHR9KTtcblx0fSkoKTtcblxuXHRmdW5jdGlvbiBjdXJDU1MoZWxlbSwgbmFtZSwgY29tcHV0ZWQpIHtcblx0XHR2YXIgd2lkdGgsXG5cdFx0ICAgIG1pbldpZHRoLFxuXHRcdCAgICBtYXhXaWR0aCxcblx0XHQgICAgcmV0LFxuXG5cblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyhlbGVtKTtcblxuXHRcdGlmIChjb21wdXRlZCkge1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSB8fCBjb21wdXRlZFtuYW1lXTtcblxuXHRcdFx0aWYgKHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSkpIHtcblx0XHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKGVsZW0sIG5hbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KHJldCkgJiYgcm1hcmdpbi50ZXN0KG5hbWUpKSB7XG5cblx0XHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdHJldCArIFwiXCIgOiByZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRHZXRIb29rSWYoY29uZGl0aW9uRm4sIGhvb2tGbikge1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0XHRpZiAoY29uZGl0aW9uRm4oKSkge1xuXG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAodGhpcy5nZXQgPSBob29rRm4pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdHZhclxuXG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0ICAgIHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdCAgICBjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0ICAgIGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cdCAgICBjc3NQcmVmaXhlcyA9IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdLFxuXHQgICAgZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGU7XG5cblx0ZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUobmFtZSkge1xuXG5cdFx0aWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXG5cdFx0dmFyIGNhcE5hbWUgPSBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLFxuXHRcdCAgICBpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0bmFtZSA9IGNzc1ByZWZpeGVzW2ldICsgY2FwTmFtZTtcblx0XHRcdGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcblx0XHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZmluYWxQcm9wTmFtZShuYW1lKSB7XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1tuYW1lXTtcblx0XHRpZiAoIXJldCkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzW25hbWVdID0gdmVuZG9yUHJvcE5hbWUobmFtZSkgfHwgbmFtZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCkge1xuXG5cdFx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWModmFsdWUpO1xuXHRcdHJldHVybiBtYXRjaGVzID9cblxuXHRcdE1hdGgubWF4KDAsIG1hdGNoZXNbMl0gLSAoc3VidHJhY3QgfHwgMCkpICsgKG1hdGNoZXNbM10gfHwgXCJweFwiKSA6IHZhbHVlO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMpIHtcblx0XHR2YXIgaSxcblx0XHQgICAgdmFsID0gMDtcblxuXHRcdGlmIChleHRyYSA9PT0gKGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiKSkge1xuXHRcdFx0aSA9IDQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xuXHRcdH1cblxuXHRcdGZvciAoOyBpIDwgNDsgaSArPSAyKSB7XG5cblx0XHRcdGlmIChleHRyYSA9PT0gXCJtYXJnaW5cIikge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyhlbGVtLCBleHRyYSArIGNzc0V4cGFuZFtpXSwgdHJ1ZSwgc3R5bGVzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlzQm9yZGVyQm94KSB7XG5cblx0XHRcdFx0aWYgKGV4dHJhID09PSBcImNvbnRlbnRcIikge1xuXHRcdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kW2ldLCB0cnVlLCBzdHlsZXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGV4dHJhICE9PSBcIm1hcmdpblwiKSB7XG5cdFx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFtpXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyhlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFtpXSwgdHJ1ZSwgc3R5bGVzKTtcblxuXHRcdFx0XHRpZiAoZXh0cmEgIT09IFwicGFkZGluZ1wiKSB7XG5cdFx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFtpXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KGVsZW0sIG5hbWUsIGV4dHJhKSB7XG5cblx0XHR2YXIgdmFsdWVJc0JvcmRlckJveCxcblx0XHQgICAgc3R5bGVzID0gZ2V0U3R5bGVzKGVsZW0pLFxuXHRcdCAgICB2YWwgPSBjdXJDU1MoZWxlbSwgbmFtZSwgc3R5bGVzKSxcblx0XHQgICAgaXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMpID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdGlmIChybnVtbm9ucHgudGVzdCh2YWwpKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJiAoc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVtuYW1lXSk7XG5cblx0XHRpZiAodmFsID09PSBcImF1dG9cIikge1xuXHRcdFx0dmFsID0gZWxlbVtcIm9mZnNldFwiICsgbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKV07XG5cdFx0fVxuXG5cdFx0dmFsID0gcGFyc2VGbG9hdCh2YWwpIHx8IDA7XG5cblx0XHRyZXR1cm4gdmFsICsgYXVnbWVudFdpZHRoT3JIZWlnaHQoZWxlbSwgbmFtZSwgZXh0cmEgfHwgKGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiKSwgdmFsdWVJc0JvcmRlckJveCwgc3R5bGVzKSArIFwicHhcIjtcblx0fVxuXG5cdGpRdWVyeS5leHRlbmQoe1xuXG5cdFx0Y3NzSG9va3M6IHtcblx0XHRcdG9wYWNpdHk6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSwgY29tcHV0ZWQpIHtcblx0XHRcdFx0XHRpZiAoY29tcHV0ZWQpIHtcblxuXHRcdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyhlbGVtLCBcIm9wYWNpdHlcIik7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGNzc051bWJlcjoge1xuXHRcdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFx0XCJ6b29tXCI6IHRydWVcblx0XHR9LFxuXG5cdFx0Y3NzUHJvcHM6IHtcblx0XHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdFx0fSxcblxuXHRcdHN0eWxlOiBmdW5jdGlvbiBzdHlsZShlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEpIHtcblxuXHRcdFx0aWYgKCFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciByZXQsXG5cdFx0XHQgICAgdHlwZSxcblx0XHRcdCAgICBob29rcyxcblx0XHRcdCAgICBvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UobmFtZSksXG5cdFx0XHQgICAgaXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdChuYW1lKSxcblx0XHRcdCAgICBzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRcdGlmICghaXNDdXN0b21Qcm9wKSB7XG5cdFx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKG9yaWdOYW1lKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbbmFtZV0gfHwgalF1ZXJ5LmNzc0hvb2tzW29yaWdOYW1lXTtcblxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHZhbHVlKTtcblxuXHRcdFx0XHRpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAocmV0ID0gcmNzc051bS5leGVjKHZhbHVlKSkgJiYgcmV0WzFdKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoZWxlbSwgbmFtZSwgcmV0KTtcblxuXHRcdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHR5cGUgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WzNdIHx8IChqUXVlcnkuY3NzTnVtYmVyW29yaWdOYW1lXSA/IFwiXCIgOiBcInB4XCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpID09PSAwKSB7XG5cdFx0XHRcdFx0c3R5bGVbbmFtZV0gPSBcImluaGVyaXRcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoZWxlbSwgdmFsdWUsIGV4dHJhKSkgIT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHRcdFx0aWYgKGlzQ3VzdG9tUHJvcCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdHlsZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KGVsZW0sIGZhbHNlLCBleHRyYSkpICE9PSB1bmRlZmluZWQpIHtcblxuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gc3R5bGVbbmFtZV07XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGNzczogZnVuY3Rpb24gY3NzKGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMpIHtcblx0XHRcdHZhciB2YWwsXG5cdFx0XHQgICAgbnVtLFxuXHRcdFx0ICAgIGhvb2tzLFxuXHRcdFx0ICAgIG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZShuYW1lKSxcblx0XHRcdCAgICBpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KG5hbWUpO1xuXG5cdFx0XHRpZiAoIWlzQ3VzdG9tUHJvcCkge1xuXHRcdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZShvcmlnTmFtZSk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzW25hbWVdIHx8IGpRdWVyeS5jc3NIb29rc1tvcmlnTmFtZV07XG5cblx0XHRcdGlmIChob29rcyAmJiBcImdldFwiIGluIGhvb2tzKSB7XG5cdFx0XHRcdHZhbCA9IGhvb2tzLmdldChlbGVtLCB0cnVlLCBleHRyYSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR2YWwgPSBjdXJDU1MoZWxlbSwgbmFtZSwgc3R5bGVzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSkge1xuXHRcdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bbmFtZV07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChleHRyYSA9PT0gXCJcIiB8fCBleHRyYSkge1xuXHRcdFx0XHRudW0gPSBwYXJzZUZsb2F0KHZhbCk7XG5cdFx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZShudW0pID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZWFjaChbXCJoZWlnaHRcIiwgXCJ3aWR0aFwiXSwgZnVuY3Rpb24gKGksIG5hbWUpIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbbmFtZV0gPSB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldChlbGVtLCBjb21wdXRlZCwgZXh0cmEpIHtcblx0XHRcdFx0aWYgKGNvbXB1dGVkKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoalF1ZXJ5LmNzcyhlbGVtLCBcImRpc3BsYXlcIikpICYmIChcblxuXHRcdFx0XHRcdCFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKSA/IHN3YXAoZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoZWxlbSwgbmFtZSwgZXh0cmEpO1xuXHRcdFx0XHRcdH0pIDogZ2V0V2lkdGhPckhlaWdodChlbGVtLCBuYW1lLCBleHRyYSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gc2V0KGVsZW0sIHZhbHVlLCBleHRyYSkge1xuXHRcdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0ICAgIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyhlbGVtKSxcblx0XHRcdFx0ICAgIHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoZWxlbSwgbmFtZSwgZXh0cmEsIGpRdWVyeS5jc3MoZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcykgPT09IFwiYm9yZGVyLWJveFwiLCBzdHlsZXMpO1xuXG5cdFx0XHRcdGlmIChzdWJ0cmFjdCAmJiAobWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyh2YWx1ZSkpICYmIChtYXRjaGVzWzNdIHx8IFwicHhcIikgIT09IFwicHhcIikge1xuXG5cdFx0XHRcdFx0ZWxlbS5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyhlbGVtLCBuYW1lKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlcihlbGVtLCB2YWx1ZSwgc3VidHJhY3QpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LCBmdW5jdGlvbiAoZWxlbSwgY29tcHV0ZWQpIHtcblx0XHRpZiAoY29tcHV0ZWQpIHtcblx0XHRcdHJldHVybiAocGFyc2VGbG9hdChjdXJDU1MoZWxlbSwgXCJtYXJnaW5MZWZ0XCIpKSB8fCBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBzd2FwKGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHR9KSkgKyBcInB4XCI7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZWFjaCh7XG5cdFx0bWFyZ2luOiBcIlwiLFxuXHRcdHBhZGRpbmc6IFwiXCIsXG5cdFx0Ym9yZGVyOiBcIldpZHRoXCJcblx0fSwgZnVuY3Rpb24gKHByZWZpeCwgc3VmZml4KSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzW3ByZWZpeCArIHN1ZmZpeF0gPSB7XG5cdFx0XHRleHBhbmQ6IGZ1bmN0aW9uIGV4cGFuZCh2YWx1ZSkge1xuXHRcdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdCAgICBleHBhbmRlZCA9IHt9LFxuXG5cblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdChcIiBcIikgOiBbdmFsdWVdO1xuXG5cdFx0XHRcdGZvciAoOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdFx0ZXhwYW5kZWRbcHJlZml4ICsgY3NzRXhwYW5kW2ldICsgc3VmZml4XSA9IHBhcnRzW2ldIHx8IHBhcnRzW2kgLSAyXSB8fCBwYXJ0c1swXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0aWYgKCFybWFyZ2luLnRlc3QocHJlZml4KSkge1xuXHRcdFx0alF1ZXJ5LmNzc0hvb2tzW3ByZWZpeCArIHN1ZmZpeF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRjc3M6IGZ1bmN0aW9uIGNzcyhuYW1lLCB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBmdW5jdGlvbiAoZWxlbSwgbmFtZSwgdmFsdWUpIHtcblx0XHRcdFx0dmFyIHN0eWxlcyxcblx0XHRcdFx0ICAgIGxlbixcblx0XHRcdFx0ICAgIG1hcCA9IHt9LFxuXHRcdFx0XHQgICAgaSA9IDA7XG5cblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcblx0XHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoZWxlbSk7XG5cdFx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0XHRtYXBbbmFtZVtpXV0gPSBqUXVlcnkuY3NzKGVsZW0sIG5hbWVbaV0sIGZhbHNlLCBzdHlsZXMpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IGpRdWVyeS5zdHlsZShlbGVtLCBuYW1lLCB2YWx1ZSkgOiBqUXVlcnkuY3NzKGVsZW0sIG5hbWUpO1xuXHRcdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxKTtcblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIFR3ZWVuKGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nKSB7XG5cdFx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdChlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyk7XG5cdH1cblx0alF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblx0VHdlZW4ucHJvdG90eXBlID0ge1xuXHRcdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0XHRpbml0OiBmdW5jdGlvbiBpbml0KGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0KSB7XG5cdFx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoalF1ZXJ5LmNzc051bWJlcltwcm9wXSA/IFwiXCIgOiBcInB4XCIpO1xuXHRcdH0sXG5cdFx0Y3VyOiBmdW5jdGlvbiBjdXIoKSB7XG5cdFx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbdGhpcy5wcm9wXTtcblxuXHRcdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/IGhvb2tzLmdldCh0aGlzKSA6IFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyk7XG5cdFx0fSxcblx0XHRydW46IGZ1bmN0aW9uIHJ1bihwZXJjZW50KSB7XG5cdFx0XHR2YXIgZWFzZWQsXG5cdFx0XHQgICAgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbdGhpcy5wcm9wXTtcblxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5kdXJhdGlvbikge1xuXHRcdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1t0aGlzLmVhc2luZ10ocGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5ub3cgPSAodGhpcy5lbmQgLSB0aGlzLnN0YXJ0KSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5zdGVwKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChob29rcyAmJiBob29rcy5zZXQpIHtcblx0XHRcdFx0aG9va3Muc2V0KHRoaXMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fTtcblxuXHRUd2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblx0VHdlZW4ucHJvcEhvb2tzID0ge1xuXHRcdF9kZWZhdWx0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldCh0d2Vlbikge1xuXHRcdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHRcdGlmICh0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8IHR3ZWVuLmVsZW1bdHdlZW4ucHJvcF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlW3R3ZWVuLnByb3BdID09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVt0d2Vlbi5wcm9wXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3ModHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIik7XG5cblx0XHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQodHdlZW4pIHtcblxuXHRcdFx0XHRpZiAoalF1ZXJ5LmZ4LnN0ZXBbdHdlZW4ucHJvcF0pIHtcblx0XHRcdFx0XHRqUXVlcnkuZnguc3RlcFt0d2Vlbi5wcm9wXSh0d2Vlbik7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAodHdlZW4uZWxlbS5zdHlsZVtqUXVlcnkuY3NzUHJvcHNbdHdlZW4ucHJvcF1dICE9IG51bGwgfHwgalF1ZXJ5LmNzc0hvb2tzW3R3ZWVuLnByb3BdKSkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSh0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0d2Vlbi5lbGVtW3R3ZWVuLnByb3BdID0gdHdlZW4ubm93O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdFR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uIHNldCh0d2Vlbikge1xuXHRcdFx0aWYgKHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bdHdlZW4ucHJvcF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdGpRdWVyeS5lYXNpbmcgPSB7XG5cdFx0bGluZWFyOiBmdW5jdGlvbiBsaW5lYXIocCkge1xuXHRcdFx0cmV0dXJuIHA7XG5cdFx0fSxcblx0XHRzd2luZzogZnVuY3Rpb24gc3dpbmcocCkge1xuXHRcdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKHAgKiBNYXRoLlBJKSAvIDI7XG5cdFx0fSxcblx0XHRfZGVmYXVsdDogXCJzd2luZ1wiXG5cdH07XG5cblx0alF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cblx0alF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXHR2YXIgZnhOb3csXG5cdCAgICBpblByb2dyZXNzLFxuXHQgICAgcmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdCAgICBycnVuID0gL3F1ZXVlSG9va3MkLztcblxuXHRmdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0XHRpZiAoaW5Qcm9ncmVzcykge1xuXHRcdFx0aWYgKGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuXHRcdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNjaGVkdWxlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwpO1xuXHRcdFx0fVxuXG5cdFx0XHRqUXVlcnkuZngudGljaygpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHRcdHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXHRcdHJldHVybiBmeE5vdyA9IGpRdWVyeS5ub3coKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdlbkZ4KHR5cGUsIGluY2x1ZGVXaWR0aCkge1xuXHRcdHZhciB3aGljaCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHRcdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRcdGZvciAoOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoKSB7XG5cdFx0XHR3aGljaCA9IGNzc0V4cGFuZFtpXTtcblx0XHRcdGF0dHJzW1wibWFyZ2luXCIgKyB3aGljaF0gPSBhdHRyc1tcInBhZGRpbmdcIiArIHdoaWNoXSA9IHR5cGU7XG5cdFx0fVxuXG5cdFx0aWYgKGluY2x1ZGVXaWR0aCkge1xuXHRcdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYXR0cnM7XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVUd2Vlbih2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uKSB7XG5cdFx0dmFyIHR3ZWVuLFxuXHRcdCAgICBjb2xsZWN0aW9uID0gKEFuaW1hdGlvbi50d2VlbmVyc1twcm9wXSB8fCBbXSkuY29uY2F0KEFuaW1hdGlvbi50d2VlbmVyc1tcIipcIl0pLFxuXHRcdCAgICBpbmRleCA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRcdGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0aWYgKHR3ZWVuID0gY29sbGVjdGlvbltpbmRleF0uY2FsbChhbmltYXRpb24sIHByb3AsIHZhbHVlKSkge1xuXG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKGVsZW0sIHByb3BzLCBvcHRzKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICB0b2dnbGUsXG5cdFx0ICAgIGhvb2tzLFxuXHRcdCAgICBvbGRmaXJlLFxuXHRcdCAgICBwcm9wVHdlZW4sXG5cdFx0ICAgIHJlc3RvcmVEaXNwbGF5LFxuXHRcdCAgICBkaXNwbGF5LFxuXHRcdCAgICBpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdCAgICBhbmltID0gdGhpcyxcblx0XHQgICAgb3JpZyA9IHt9LFxuXHRcdCAgICBzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0ICAgIGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKGVsZW0pLFxuXHRcdCAgICBkYXRhU2hvdyA9IGRhdGFQcml2LmdldChlbGVtLCBcImZ4c2hvd1wiKTtcblxuXHRcdGlmICghb3B0cy5xdWV1ZSkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoZWxlbSwgXCJmeFwiKTtcblx0XHRcdGlmIChob29rcy51bnF1ZXVlZCA9PSBudWxsKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aWYgKCFob29rcy51bnF1ZXVlZCkge1xuXHRcdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0XHRpZiAoIWpRdWVyeS5xdWV1ZShlbGVtLCBcImZ4XCIpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmb3IgKHByb3AgaW4gcHJvcHMpIHtcblx0XHRcdHZhbHVlID0gcHJvcHNbcHJvcF07XG5cdFx0XHRpZiAocmZ4dHlwZXMudGVzdCh2YWx1ZSkpIHtcblx0XHRcdFx0ZGVsZXRlIHByb3BzW3Byb3BdO1xuXHRcdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gKGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIpKSB7XG5cblx0XHRcdFx0XHRpZiAodmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93W3Byb3BdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdG9yaWdbcHJvcF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1twcm9wXSB8fCBqUXVlcnkuc3R5bGUoZWxlbSwgcHJvcCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KHByb3BzKTtcblx0XHRpZiAoIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdChvcmlnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxKSB7XG5cblx0XHRcdG9wdHMub3ZlcmZsb3cgPSBbc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZXTtcblxuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdFx0aWYgKHJlc3RvcmVEaXNwbGF5ID09IG51bGwpIHtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoZWxlbSwgXCJkaXNwbGF5XCIpO1xuXHRcdFx0fVxuXHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoZWxlbSwgXCJkaXNwbGF5XCIpO1xuXHRcdFx0aWYgKGRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG5cdFx0XHRcdGlmIChyZXN0b3JlRGlzcGxheSkge1xuXHRcdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNob3dIaWRlKFtlbGVtXSwgdHJ1ZSk7XG5cdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoZWxlbSwgXCJkaXNwbGF5XCIpO1xuXHRcdFx0XHRcdHNob3dIaWRlKFtlbGVtXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsKSB7XG5cdFx0XHRcdGlmIChqUXVlcnkuY3NzKGVsZW0sIFwiZmxvYXRcIikgPT09IFwibm9uZVwiKSB7XG5cblx0XHRcdFx0XHRpZiAoIXByb3BUd2Vlbikge1xuXHRcdFx0XHRcdFx0YW5pbS5kb25lKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRpZiAocmVzdG9yZURpc3BsYXkgPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChvcHRzLm92ZXJmbG93KSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1swXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sxXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1syXTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRcdGZvciAocHJvcCBpbiBvcmlnKSB7XG5cblx0XHRcdGlmICghcHJvcFR3ZWVuKSB7XG5cdFx0XHRcdGlmIChkYXRhU2hvdykge1xuXHRcdFx0XHRcdGlmIChcImhpZGRlblwiIGluIGRhdGFTaG93KSB7XG5cdFx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodG9nZ2xlKSB7XG5cdFx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChoaWRkZW4pIHtcblx0XHRcdFx0XHRzaG93SGlkZShbZWxlbV0sIHRydWUpO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHRhbmltLmRvbmUoZnVuY3Rpb24gKCkge1xuXG5cblx0XHRcdFx0XHRpZiAoIWhpZGRlbikge1xuXHRcdFx0XHRcdFx0c2hvd0hpZGUoW2VsZW1dKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKGVsZW0sIFwiZnhzaG93XCIpO1xuXHRcdFx0XHRcdGZvciAocHJvcCBpbiBvcmlnKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoZWxlbSwgcHJvcCwgb3JpZ1twcm9wXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oaGlkZGVuID8gZGF0YVNob3dbcHJvcF0gOiAwLCBwcm9wLCBhbmltKTtcblx0XHRcdGlmICghKHByb3AgaW4gZGF0YVNob3cpKSB7XG5cdFx0XHRcdGRhdGFTaG93W3Byb3BdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRpZiAoaGlkZGVuKSB7XG5cdFx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gcHJvcEZpbHRlcihwcm9wcywgc3BlY2lhbEVhc2luZykge1xuXHRcdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0XHRmb3IgKGluZGV4IGluIHByb3BzKSB7XG5cdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZShpbmRleCk7XG5cdFx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nW25hbWVdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1tpbmRleF07XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdFx0ZWFzaW5nID0gdmFsdWVbMV07XG5cdFx0XHRcdHZhbHVlID0gcHJvcHNbaW5kZXhdID0gdmFsdWVbMF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpbmRleCAhPT0gbmFtZSkge1xuXHRcdFx0XHRwcm9wc1tuYW1lXSA9IHZhbHVlO1xuXHRcdFx0XHRkZWxldGUgcHJvcHNbaW5kZXhdO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1tuYW1lXTtcblx0XHRcdGlmIChob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzKSB7XG5cdFx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKHZhbHVlKTtcblx0XHRcdFx0ZGVsZXRlIHByb3BzW25hbWVdO1xuXG5cdFx0XHRcdGZvciAoaW5kZXggaW4gdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoIShpbmRleCBpbiBwcm9wcykpIHtcblx0XHRcdFx0XHRcdHByb3BzW2luZGV4XSA9IHZhbHVlW2luZGV4XTtcblx0XHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbaW5kZXhdID0gZWFzaW5nO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZ1tuYW1lXSA9IGVhc2luZztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBBbmltYXRpb24oZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucykge1xuXHRcdHZhciByZXN1bHQsXG5cdFx0ICAgIHN0b3BwZWQsXG5cdFx0ICAgIGluZGV4ID0gMCxcblx0XHQgICAgbGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdCAgICBkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSksXG5cdFx0ICAgIHRpY2sgPSBmdW5jdGlvbiB0aWNrKCkge1xuXHRcdFx0aWYgKHN0b3BwZWQpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdCAgICByZW1haW5pbmcgPSBNYXRoLm1heCgwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUpLFxuXG5cblx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdCAgICBwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHQgICAgaW5kZXggPSAwLFxuXHRcdFx0ICAgIGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1tpbmRleF0ucnVuKHBlcmNlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKGVsZW0sIFthbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZ10pO1xuXG5cdFx0XHRpZiAocGVyY2VudCA8IDEgJiYgbGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghbGVuZ3RoKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoZWxlbSwgW2FuaW1hdGlvbiwgMSwgMF0pO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aChlbGVtLCBbYW5pbWF0aW9uXSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHQgICAgYW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoe30sIHByb3BlcnRpZXMpLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCh0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMpLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKHByb3AsIGVuZCkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCwgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1twcm9wXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcpO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2godHdlZW4pO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24gc3RvcChnb3RvRW5kKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblxuXHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoc3RvcHBlZCkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zW2luZGV4XS5ydW4oMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZ290b0VuZCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoZWxlbSwgW2FuaW1hdGlvbiwgMSwgMF0pO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKGVsZW0sIFthbmltYXRpb24sIGdvdG9FbmRdKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKGVsZW0sIFthbmltYXRpb24sIGdvdG9FbmRdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9KSxcblx0XHQgICAgcHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0XHRwcm9wRmlsdGVyKHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nKTtcblxuXHRcdGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbaW5kZXhdLmNhbGwoYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMpO1xuXHRcdFx0aWYgKHJlc3VsdCkge1xuXHRcdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24ocmVzdWx0LnN0b3ApKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSkuc3RvcCA9IGpRdWVyeS5wcm94eShyZXN1bHQuc3RvcCwgcmVzdWx0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGpRdWVyeS5tYXAocHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24pO1xuXG5cdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKGFuaW1hdGlvbi5vcHRzLnN0YXJ0KSkge1xuXHRcdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbChlbGVtLCBhbmltYXRpb24pO1xuXHRcdH1cblxuXHRcdGFuaW1hdGlvbi5wcm9ncmVzcyhhbmltYXRpb24ub3B0cy5wcm9ncmVzcykuZG9uZShhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSkuZmFpbChhbmltYXRpb24ub3B0cy5mYWlsKS5hbHdheXMoYW5pbWF0aW9uLm9wdHMuYWx3YXlzKTtcblxuXHRcdGpRdWVyeS5meC50aW1lcihqUXVlcnkuZXh0ZW5kKHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9KSk7XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9uO1xuXHR9XG5cblx0alF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoQW5pbWF0aW9uLCB7XG5cblx0XHR0d2VlbmVyczoge1xuXHRcdFx0XCIqXCI6IFtmdW5jdGlvbiAocHJvcCwgdmFsdWUpIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2Vlbihwcm9wLCB2YWx1ZSk7XG5cdFx0XHRcdGFkanVzdENTUyh0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWModmFsdWUpLCB0d2Vlbik7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH1dXG5cdFx0fSxcblxuXHRcdHR3ZWVuZXI6IGZ1bmN0aW9uIHR3ZWVuZXIocHJvcHMsIGNhbGxiYWNrKSB7XG5cdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24ocHJvcHMpKSB7XG5cdFx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRcdHByb3BzID0gW1wiKlwiXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2gocm5vdGh0bWx3aGl0ZSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwcm9wLFxuXHRcdFx0ICAgIGluZGV4ID0gMCxcblx0XHRcdCAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRcdGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0XHRwcm9wID0gcHJvcHNbaW5kZXhdO1xuXHRcdFx0XHRBbmltYXRpb24udHdlZW5lcnNbcHJvcF0gPSBBbmltYXRpb24udHdlZW5lcnNbcHJvcF0gfHwgW107XG5cdFx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1twcm9wXS51bnNoaWZ0KGNhbGxiYWNrKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0cHJlZmlsdGVyczogW2RlZmF1bHRQcmVmaWx0ZXJdLFxuXG5cdFx0cHJlZmlsdGVyOiBmdW5jdGlvbiBwcmVmaWx0ZXIoY2FsbGJhY2ssIHByZXBlbmQpIHtcblx0XHRcdGlmIChwcmVwZW5kKSB7XG5cdFx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoY2FsbGJhY2spO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiAoc3BlZWQsIGVhc2luZywgZm4pIHtcblx0XHR2YXIgb3B0ID0gc3BlZWQgJiYgKHR5cGVvZiBzcGVlZCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHNwZWVkKSkgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKHt9LCBzcGVlZCkgOiB7XG5cdFx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fCBqUXVlcnkuaXNGdW5jdGlvbihzcGVlZCkgJiYgc3BlZWQsXG5cdFx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKGVhc2luZykgJiYgZWFzaW5nXG5cdFx0fTtcblxuXHRcdGlmIChqUXVlcnkuZngub2ZmKSB7XG5cdFx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAodHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRpZiAob3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMpIHtcblx0XHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzW29wdC5kdXJhdGlvbl07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUpIHtcblx0XHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0XHR9XG5cblx0XHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdFx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKG9wdC5vbGQpKSB7XG5cdFx0XHRcdG9wdC5vbGQuY2FsbCh0aGlzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdC5xdWV1ZSkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSh0aGlzLCBvcHQucXVldWUpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gb3B0O1xuXHR9O1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdGZhZGVUbzogZnVuY3Rpb24gZmFkZVRvKHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjaykge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoaXNIaWRkZW5XaXRoaW5UcmVlKS5jc3MoXCJvcGFjaXR5XCIsIDApLnNob3coKVxuXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFuaW1hdGU6IGZ1bmN0aW9uIGFuaW1hdGUocHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2spIHtcblx0XHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KHByb3ApLFxuXHRcdFx0ICAgIG9wdGFsbCA9IGpRdWVyeS5zcGVlZChzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayksXG5cdFx0XHQgICAgZG9BbmltYXRpb24gPSBmdW5jdGlvbiBkb0FuaW1hdGlvbigpIHtcblxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbih0aGlzLCBqUXVlcnkuZXh0ZW5kKHt9LCBwcm9wKSwgb3B0YWxsKTtcblxuXHRcdFx0XHRpZiAoZW1wdHkgfHwgZGF0YVByaXYuZ2V0KHRoaXMsIFwiZmluaXNoXCIpKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID8gdGhpcy5lYWNoKGRvQW5pbWF0aW9uKSA6IHRoaXMucXVldWUob3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbik7XG5cdFx0fSxcblx0XHRzdG9wOiBmdW5jdGlvbiBzdG9wKHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQpIHtcblx0XHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiBzdG9wUXVldWUoaG9va3MpIHtcblx0XHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdFx0c3RvcChnb3RvRW5kKTtcblx0XHRcdH07XG5cblx0XHRcdGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSkge1xuXHRcdFx0XHR0aGlzLnF1ZXVlKHR5cGUgfHwgXCJmeFwiLCBbXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdCAgICBpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdCAgICB0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHQgICAgZGF0YSA9IGRhdGFQcml2LmdldCh0aGlzKTtcblxuXHRcdFx0XHRpZiAoaW5kZXgpIHtcblx0XHRcdFx0XHRpZiAoZGF0YVtpbmRleF0gJiYgZGF0YVtpbmRleF0uc3RvcCkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKGRhdGFbaW5kZXhdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm9yIChpbmRleCBpbiBkYXRhKSB7XG5cdFx0XHRcdFx0XHRpZiAoZGF0YVtpbmRleF0gJiYgZGF0YVtpbmRleF0uc3RvcCAmJiBycnVuLnRlc3QoaW5kZXgpKSB7XG5cdFx0XHRcdFx0XHRcdHN0b3BRdWV1ZShkYXRhW2luZGV4XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07KSB7XG5cdFx0XHRcdFx0aWYgKHRpbWVyc1tpbmRleF0uZWxlbSA9PT0gdGhpcyAmJiAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1tpbmRleF0ucXVldWUgPT09IHR5cGUpKSB7XG5cblx0XHRcdFx0XHRcdHRpbWVyc1tpbmRleF0uYW5pbS5zdG9wKGdvdG9FbmQpO1xuXHRcdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dGltZXJzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGRlcXVldWUgfHwgIWdvdG9FbmQpIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSh0aGlzLCB0eXBlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaCh0eXBlKSB7XG5cdFx0XHRpZiAodHlwZSAhPT0gZmFsc2UpIHtcblx0XHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ICAgIGRhdGEgPSBkYXRhUHJpdi5nZXQodGhpcyksXG5cdFx0XHRcdCAgICBxdWV1ZSA9IGRhdGFbdHlwZSArIFwicXVldWVcIl0sXG5cdFx0XHRcdCAgICBob29rcyA9IGRhdGFbdHlwZSArIFwicXVldWVIb29rc1wiXSxcblx0XHRcdFx0ICAgIHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdCAgICBsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHRcdGpRdWVyeS5xdWV1ZSh0aGlzLCB0eXBlLCBbXSk7XG5cblx0XHRcdFx0aWYgKGhvb2tzICYmIGhvb2tzLnN0b3ApIHtcblx0XHRcdFx0XHRob29rcy5zdG9wLmNhbGwodGhpcywgdHJ1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTspIHtcblx0XHRcdFx0XHRpZiAodGltZXJzW2luZGV4XS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1tpbmRleF0ucXVldWUgPT09IHR5cGUpIHtcblx0XHRcdFx0XHRcdHRpbWVyc1tpbmRleF0uYW5pbS5zdG9wKHRydWUpO1xuXHRcdFx0XHRcdFx0dGltZXJzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRcdFx0aWYgKHF1ZXVlW2luZGV4XSAmJiBxdWV1ZVtpbmRleF0uZmluaXNoKSB7XG5cdFx0XHRcdFx0XHRxdWV1ZVtpbmRleF0uZmluaXNoLmNhbGwodGhpcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZWFjaChbXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiXSwgZnVuY3Rpb24gKGksIG5hbWUpIHtcblx0XHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bbmFtZV07XG5cdFx0alF1ZXJ5LmZuW25hbWVdID0gZnVuY3Rpb24gKHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrKSB7XG5cdFx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID8gY3NzRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRoaXMuYW5pbWF0ZShnZW5GeChuYW1lLCB0cnVlKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2spO1xuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5lYWNoKHtcblx0XHRzbGlkZURvd246IGdlbkZ4KFwic2hvd1wiKSxcblx0XHRzbGlkZVVwOiBnZW5GeChcImhpZGVcIiksXG5cdFx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxuXHRcdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRcdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0XHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxuXHR9LCBmdW5jdGlvbiAobmFtZSwgcHJvcHMpIHtcblx0XHRqUXVlcnkuZm5bbmFtZV0gPSBmdW5jdGlvbiAoc3BlZWQsIGVhc2luZywgY2FsbGJhY2spIHtcblx0XHRcdHJldHVybiB0aGlzLmFuaW1hdGUocHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrKTtcblx0XHR9O1xuXHR9KTtcblxuXHRqUXVlcnkudGltZXJzID0gW107XG5cdGpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciB0aW1lcixcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0XHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRcdGZvciAoOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aW1lciA9IHRpbWVyc1tpXTtcblxuXHRcdFx0aWYgKCF0aW1lcigpICYmIHRpbWVyc1tpXSA9PT0gdGltZXIpIHtcblx0XHRcdFx0dGltZXJzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghdGltZXJzLmxlbmd0aCkge1xuXHRcdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0XHR9XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH07XG5cblx0alF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24gKHRpbWVyKSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wdXNoKHRpbWVyKTtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fTtcblxuXHRqUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcblx0alF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmIChpblByb2dyZXNzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdFx0c2NoZWR1bGUoKTtcblx0fTtcblxuXHRqUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpblByb2dyZXNzID0gbnVsbDtcblx0fTtcblxuXHRqUXVlcnkuZnguc3BlZWRzID0ge1xuXHRcdHNsb3c6IDYwMCxcblx0XHRmYXN0OiAyMDAsXG5cblx0XHRfZGVmYXVsdDogNDAwXG5cdH07XG5cblx0alF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24gKHRpbWUsIHR5cGUpIHtcblx0XHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1t0aW1lXSB8fCB0aW1lIDogdGltZTtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSh0eXBlLCBmdW5jdGlvbiAobmV4dCwgaG9va3MpIHtcblx0XHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQobmV4dCwgdGltZSk7XG5cdFx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdFx0fTtcblx0XHR9KTtcblx0fTtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcblx0XHQgICAgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSxcblx0XHQgICAgb3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpO1xuXG5cdFx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHRcdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdFx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdFx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0XHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG5cdH0pKCk7XG5cblx0dmFyIGJvb2xIb29rLFxuXHQgICAgYXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cblx0alF1ZXJ5LmZuLmV4dGVuZCh7XG5cdFx0YXR0cjogZnVuY3Rpb24gYXR0cihuYW1lLCB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxKTtcblx0XHR9LFxuXG5cdFx0cmVtb3ZlQXR0cjogZnVuY3Rpb24gcmVtb3ZlQXR0cihuYW1lKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIodGhpcywgbmFtZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5leHRlbmQoe1xuXHRcdGF0dHI6IGZ1bmN0aW9uIGF0dHIoZWxlbSwgbmFtZSwgdmFsdWUpIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHQgICAgaG9va3MsXG5cdFx0XHQgICAgblR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0XHRpZiAoblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkucHJvcChlbGVtLCBuYW1lLCB2YWx1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKGVsZW0pKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1tuYW1lLnRvTG93ZXJDYXNlKCldIHx8IChqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QobmFtZSkgPyBib29sSG9vayA6IHVuZGVmaW5lZCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKGVsZW0sIG5hbWUpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoZWxlbSwgdmFsdWUsIG5hbWUpKSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlICsgXCJcIik7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldChlbGVtLCBuYW1lKSkgIT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0cihlbGVtLCBuYW1lKTtcblxuXHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHRcdH0sXG5cblx0XHRhdHRySG9va3M6IHtcblx0XHRcdHR5cGU6IHtcblx0XHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoZWxlbSwgdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmIG5vZGVOYW1lKGVsZW0sIFwiaW5wdXRcIikpIHtcblx0XHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIHZhbHVlKTtcblx0XHRcdFx0XHRcdGlmICh2YWwpIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0cmVtb3ZlQXR0cjogZnVuY3Rpb24gcmVtb3ZlQXR0cihlbGVtLCB2YWx1ZSkge1xuXHRcdFx0dmFyIG5hbWUsXG5cdFx0XHQgICAgaSA9IDAsXG5cblxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2gocm5vdGh0bWx3aGl0ZSk7XG5cblx0XHRcdGlmIChhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSkge1xuXHRcdFx0XHR3aGlsZSAobmFtZSA9IGF0dHJOYW1lc1tpKytdKSB7XG5cdFx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGJvb2xIb29rID0ge1xuXHRcdHNldDogZnVuY3Rpb24gc2V0KGVsZW0sIHZhbHVlLCBuYW1lKSB7XG5cdFx0XHRpZiAodmFsdWUgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoZWxlbSwgbmFtZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZShuYW1lLCBuYW1lKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuZWFjaChqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSwgZnVuY3Rpb24gKGksIG5hbWUpIHtcblx0XHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVtuYW1lXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdFx0YXR0ckhhbmRsZVtuYW1lXSA9IGZ1bmN0aW9uIChlbGVtLCBuYW1lLCBpc1hNTCkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdCAgICBoYW5kbGUsXG5cdFx0XHQgICAgbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCFpc1hNTCkge1xuXG5cdFx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbbG93ZXJjYXNlTmFtZV07XG5cdFx0XHRcdGF0dHJIYW5kbGVbbG93ZXJjYXNlTmFtZV0gPSByZXQ7XG5cdFx0XHRcdHJldCA9IGdldHRlcihlbGVtLCBuYW1lLCBpc1hNTCkgIT0gbnVsbCA/IGxvd2VyY2FzZU5hbWUgOiBudWxsO1xuXHRcdFx0XHRhdHRySGFuZGxlW2xvd2VyY2FzZU5hbWVdID0gaGFuZGxlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9O1xuXHR9KTtcblxuXHR2YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdCAgICByY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdHByb3A6IGZ1bmN0aW9uIHByb3AobmFtZSwgdmFsdWUpIHtcblx0XHRcdHJldHVybiBhY2Nlc3ModGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZVByb3A6IGZ1bmN0aW9uIHJlbW92ZVByb3AobmFtZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzW2pRdWVyeS5wcm9wRml4W25hbWVdIHx8IG5hbWVdO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZXh0ZW5kKHtcblx0XHRwcm9wOiBmdW5jdGlvbiBwcm9wKGVsZW0sIG5hbWUsIHZhbHVlKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0ICAgIGhvb2tzLFxuXHRcdFx0ICAgIG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdFx0aWYgKG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoZWxlbSkpIHtcblxuXHRcdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbbmFtZV0gfHwgbmFtZTtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzW25hbWVdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRpZiAoaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KGVsZW0sIHZhbHVlLCBuYW1lKSkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KGVsZW0sIG5hbWUpKSAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbVtuYW1lXTtcblx0XHR9LFxuXG5cdFx0cHJvcEhvb2tzOiB7XG5cdFx0XHR0YWJJbmRleDoge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldChlbGVtKSB7XG5cblx0XHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKGVsZW0sIFwidGFiaW5kZXhcIik7XG5cblx0XHRcdFx0XHRpZiAodGFiaW5kZXgpIHtcblx0XHRcdFx0XHRcdHJldHVybiBwYXJzZUludCh0YWJpbmRleCwgMTApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChyZm9jdXNhYmxlLnRlc3QoZWxlbS5ub2RlTmFtZSkgfHwgcmNsaWNrYWJsZS50ZXN0KGVsZW0ubm9kZU5hbWUpICYmIGVsZW0uaHJlZikge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHByb3BGaXg6IHtcblx0XHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdFx0fVxuXHR9KTtcblxuXHRpZiAoIXN1cHBvcnQub3B0U2VsZWN0ZWQpIHtcblx0XHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSkge1xuXG5cblx0XHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0aWYgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoZWxlbSkge1xuXG5cblx0XHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdFx0aWYgKHBhcmVudC5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRqUXVlcnkuZWFjaChbXCJ0YWJJbmRleFwiLCBcInJlYWRPbmx5XCIsIFwibWF4TGVuZ3RoXCIsIFwiY2VsbFNwYWNpbmdcIiwgXCJjZWxsUGFkZGluZ1wiLCBcInJvd1NwYW5cIiwgXCJjb2xTcGFuXCIsIFwidXNlTWFwXCIsIFwiZnJhbWVCb3JkZXJcIiwgXCJjb250ZW50RWRpdGFibGVcIl0sIGZ1bmN0aW9uICgpIHtcblx0XHRqUXVlcnkucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldID0gdGhpcztcblx0fSk7XG5cblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSh2YWx1ZSkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oXCIgXCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Q2xhc3MoZWxlbSkge1xuXHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCI7XG5cdH1cblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRhZGRDbGFzczogZnVuY3Rpb24gYWRkQ2xhc3ModmFsdWUpIHtcblx0XHRcdHZhciBjbGFzc2VzLFxuXHRcdFx0ICAgIGVsZW0sXG5cdFx0XHQgICAgY3VyLFxuXHRcdFx0ICAgIGN1clZhbHVlLFxuXHRcdFx0ICAgIGNsYXp6LFxuXHRcdFx0ICAgIGosXG5cdFx0XHQgICAgZmluYWxWYWx1ZSxcblx0XHRcdCAgICBpID0gMDtcblxuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChqKSB7XG5cdFx0XHRcdFx0alF1ZXJ5KHRoaXMpLmFkZENsYXNzKHZhbHVlLmNhbGwodGhpcywgaiwgZ2V0Q2xhc3ModGhpcykpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUpIHtcblx0XHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKHJub3RodG1sd2hpdGUpIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlIChlbGVtID0gdGhpc1tpKytdKSB7XG5cdFx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyhlbGVtKTtcblx0XHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZShjdXJWYWx1ZSkgKyBcIiBcIjtcblxuXHRcdFx0XHRcdGlmIChjdXIpIHtcblx0XHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdFx0d2hpbGUgKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChjdXIuaW5kZXhPZihcIiBcIiArIGNsYXp6ICsgXCIgXCIpIDwgMCkge1xuXHRcdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKGN1cik7XG5cdFx0XHRcdFx0XHRpZiAoY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBmaW5hbFZhbHVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiByZW1vdmVDbGFzcyh2YWx1ZSkge1xuXHRcdFx0dmFyIGNsYXNzZXMsXG5cdFx0XHQgICAgZWxlbSxcblx0XHRcdCAgICBjdXIsXG5cdFx0XHQgICAgY3VyVmFsdWUsXG5cdFx0XHQgICAgY2xhenosXG5cdFx0XHQgICAgaixcblx0XHRcdCAgICBmaW5hbFZhbHVlLFxuXHRcdFx0ICAgIGkgPSAwO1xuXG5cdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGopIHtcblx0XHRcdFx0XHRqUXVlcnkodGhpcykucmVtb3ZlQ2xhc3ModmFsdWUuY2FsbCh0aGlzLCBqLCBnZXRDbGFzcyh0aGlzKSkpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmF0dHIoXCJjbGFzc1wiLCBcIlwiKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSkge1xuXHRcdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKGVsZW0gPSB0aGlzW2krK10pIHtcblx0XHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKGVsZW0pO1xuXG5cdFx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoY3VyVmFsdWUpICsgXCIgXCI7XG5cblx0XHRcdFx0XHRpZiAoY3VyKSB7XG5cdFx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRcdHdoaWxlIChjbGF6eiA9IGNsYXNzZXNbaisrXSkge1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlIChjdXIuaW5kZXhPZihcIiBcIiArIGNsYXp6ICsgXCIgXCIpID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZShcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZShjdXIpO1xuXHRcdFx0XHRcdFx0aWYgKGN1clZhbHVlICE9PSBmaW5hbFZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZmluYWxWYWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cblx0XHR0b2dnbGVDbGFzczogZnVuY3Rpb24gdG9nZ2xlQ2xhc3ModmFsdWUsIHN0YXRlVmFsKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHZhbHVlKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKHZhbHVlKSA6IHRoaXMucmVtb3ZlQ2xhc3ModmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0XHRqUXVlcnkodGhpcykudG9nZ2xlQ2xhc3ModmFsdWUuY2FsbCh0aGlzLCBpLCBnZXRDbGFzcyh0aGlzKSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0XHRpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuXG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0c2VsZiA9IGpRdWVyeSh0aGlzKTtcblx0XHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cblx0XHRcdFx0XHR3aGlsZSAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1tpKytdKSB7XG5cblx0XHRcdFx0XHRcdGlmIChzZWxmLmhhc0NsYXNzKGNsYXNzTmFtZSkpIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyhjbGFzc05hbWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIpIHtcblx0XHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyh0aGlzKTtcblx0XHRcdFx0XHRpZiAoY2xhc3NOYW1lKSB7XG5cblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCh0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAodGhpcy5zZXRBdHRyaWJ1dGUpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/IFwiXCIgOiBkYXRhUHJpdi5nZXQodGhpcywgXCJfX2NsYXNzTmFtZV9fXCIpIHx8IFwiXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGhhc0NsYXNzOiBmdW5jdGlvbiBoYXNDbGFzcyhzZWxlY3Rvcikge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSxcblx0XHRcdCAgICBlbGVtLFxuXHRcdFx0ICAgIGkgPSAwO1xuXG5cdFx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0XHR3aGlsZSAoZWxlbSA9IHRoaXNbaSsrXSkge1xuXHRcdFx0XHRpZiAoZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKGdldENsYXNzKGVsZW0pKSArIFwiIFwiKS5pbmRleE9mKGNsYXNzTmFtZSkgPiAtMSkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0pO1xuXG5cdHZhciBycmV0dXJuID0gL1xcci9nO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXHRcdHZhbDogZnVuY3Rpb24gdmFsKHZhbHVlKSB7XG5cdFx0XHR2YXIgaG9va3MsXG5cdFx0XHQgICAgcmV0LFxuXHRcdFx0ICAgIGlzRnVuY3Rpb24sXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF07XG5cblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAoZWxlbSkge1xuXHRcdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzW2VsZW0udHlwZV0gfHwgalF1ZXJ5LnZhbEhvb2tzW2VsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKV07XG5cblx0XHRcdFx0XHRpZiAoaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KGVsZW0sIFwidmFsdWVcIikpICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHRcdGlmICh0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UocnJldHVybiwgXCJcIik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKHZhbHVlKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRcdGlmICh0aGlzLm5vZGVUeXBlICE9PSAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGlzRnVuY3Rpb24pIHtcblx0XHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKHRoaXMsIGksIGpRdWVyeSh0aGlzKS52YWwoKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodmFsID09IG51bGwpIHtcblx0XHRcdFx0XHR2YWwgPSBcIlwiO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHR2YWwgKz0gXCJcIjtcblx0XHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcblx0XHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKHZhbCwgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1t0aGlzLnR5cGVdIHx8IGpRdWVyeS52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldO1xuXG5cdFx0XHRcdGlmICghaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCBob29rcy5zZXQodGhpcywgdmFsLCBcInZhbHVlXCIpID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5leHRlbmQoe1xuXHRcdHZhbEhvb2tzOiB7XG5cdFx0XHRvcHRpb246IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSkge1xuXG5cdFx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoZWxlbSwgXCJ2YWx1ZVwiKTtcblx0XHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgPyB2YWwgOlxuXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZShqUXVlcnkudGV4dChlbGVtKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRzZWxlY3Q6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbSkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZSxcblx0XHRcdFx0XHQgICAgb3B0aW9uLFxuXHRcdFx0XHRcdCAgICBpLFxuXHRcdFx0XHRcdCAgICBvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdCAgICBpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHQgICAgb25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHQgICAgdmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdCAgICBtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdFx0XHRcdGkgPSBtYXg7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICg7IGkgPCBtYXg7IGkrKykge1xuXHRcdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1tpXTtcblxuXHRcdFx0XHRcdFx0aWYgKChvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXgpICYmXG5cblx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiYgKCFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhbm9kZU5hbWUob3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIikpKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkob3B0aW9uKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAob25lKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0dmFsdWVzLnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoZWxlbSwgdmFsdWUpIHtcblx0XHRcdFx0XHR2YXIgb3B0aW9uU2V0LFxuXHRcdFx0XHRcdCAgICBvcHRpb24sXG5cdFx0XHRcdFx0ICAgIG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0ICAgIHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkodmFsdWUpLFxuXHRcdFx0XHRcdCAgICBpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zW2ldO1xuXG5cblx0XHRcdFx0XHRcdGlmIChvcHRpb24uc2VsZWN0ZWQgPSBqUXVlcnkuaW5BcnJheShqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldChvcHRpb24pLCB2YWx1ZXMpID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghb3B0aW9uU2V0KSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goW1wicmFkaW9cIiwgXCJjaGVja2JveFwiXSwgZnVuY3Rpb24gKCkge1xuXHRcdGpRdWVyeS52YWxIb29rc1t0aGlzXSA9IHtcblx0XHRcdHNldDogZnVuY3Rpb24gc2V0KGVsZW0sIHZhbHVlKSB7XG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheShqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlKSA+IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRpZiAoIXN1cHBvcnQuY2hlY2tPbikge1xuXHRcdFx0alF1ZXJ5LnZhbEhvb2tzW3RoaXNdLmdldCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblxuXG5cblx0dmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5cdGpRdWVyeS5leHRlbmQoalF1ZXJ5LmV2ZW50LCB7XG5cblx0XHR0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMpIHtcblxuXHRcdFx0dmFyIGksXG5cdFx0XHQgICAgY3VyLFxuXHRcdFx0ICAgIHRtcCxcblx0XHRcdCAgICBidWJibGVUeXBlLFxuXHRcdFx0ICAgIG9udHlwZSxcblx0XHRcdCAgICBoYW5kbGUsXG5cdFx0XHQgICAgc3BlY2lhbCxcblx0XHRcdCAgICBldmVudFBhdGggPSBbZWxlbSB8fCBkb2N1bWVudF0sXG5cdFx0XHQgICAgdHlwZSA9IGhhc093bi5jYWxsKGV2ZW50LCBcInR5cGVcIikgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHQgICAgbmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKGV2ZW50LCBcIm5hbWVzcGFjZVwiKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtcblxuXHRcdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDgpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocmZvY3VzTW9ycGgudGVzdCh0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZS5pbmRleE9mKFwiLlwiKSA+IC0xKSB7XG5cblx0XHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoXCIuXCIpO1xuXHRcdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHRcdH1cblx0XHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHRcdGV2ZW50ID0gZXZlbnRbalF1ZXJ5LmV4cGFuZG9dID8gZXZlbnQgOiBuZXcgalF1ZXJ5LkV2ZW50KHR5cGUsICh0eXBlb2YgZXZlbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihldmVudCkpID09PSBcIm9iamVjdFwiICYmIGV2ZW50KTtcblxuXHRcdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpO1xuXHRcdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/IG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIikgOiBudWxsO1xuXG5cdFx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0XHRpZiAoIWV2ZW50LnRhcmdldCkge1xuXHRcdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdFx0fVxuXG5cdFx0XHRkYXRhID0gZGF0YSA9PSBudWxsID8gW2V2ZW50XSA6IGpRdWVyeS5tYWtlQXJyYXkoZGF0YSwgW2V2ZW50XSk7XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFt0eXBlXSB8fCB7fTtcblx0XHRcdGlmICghb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoZWxlbSwgZGF0YSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyhlbGVtKSkge1xuXG5cdFx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0XHRpZiAoIXJmb2N1c01vcnBoLnRlc3QoYnViYmxlVHlwZSArIHR5cGUpKSB7XG5cdFx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yICg7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHRldmVudFBhdGgucHVzaChjdXIpO1xuXHRcdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0bXAgPT09IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpKSB7XG5cdFx0XHRcdFx0ZXZlbnRQYXRoLnB1c2godG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpID0gMDtcblx0XHRcdHdoaWxlICgoY3VyID0gZXZlbnRQYXRoW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG5cblx0XHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID8gYnViYmxlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0XHRoYW5kbGUgPSAoZGF0YVByaXYuZ2V0KGN1ciwgXCJldmVudHNcIikgfHwge30pW2V2ZW50LnR5cGVdICYmIGRhdGFQcml2LmdldChjdXIsIFwiaGFuZGxlXCIpO1xuXHRcdFx0XHRpZiAoaGFuZGxlKSB7XG5cdFx0XHRcdFx0aGFuZGxlLmFwcGx5KGN1ciwgZGF0YSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyW29udHlwZV07XG5cdFx0XHRcdGlmIChoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoY3VyKSkge1xuXHRcdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseShjdXIsIGRhdGEpO1xuXHRcdFx0XHRcdGlmIChldmVudC5yZXN1bHQgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHRcdGlmICghb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuXG5cdFx0XHRcdGlmICgoIXNwZWNpYWwuX2RlZmF1bHQgfHwgc3BlY2lhbC5fZGVmYXVsdC5hcHBseShldmVudFBhdGgucG9wKCksIGRhdGEpID09PSBmYWxzZSkgJiYgYWNjZXB0RGF0YShlbGVtKSkge1xuXG5cdFx0XHRcdFx0aWYgKG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbihlbGVtW3R5cGVdKSAmJiAhalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG5cblx0XHRcdFx0XHRcdHRtcCA9IGVsZW1bb250eXBlXTtcblxuXHRcdFx0XHRcdFx0aWYgKHRtcCkge1xuXHRcdFx0XHRcdFx0XHRlbGVtW29udHlwZV0gPSBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRcdGVsZW1bdHlwZV0oKTtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRcdGlmICh0bXApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbVtvbnR5cGVdID0gdG1wO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHRcdH0sXG5cblx0XHRzaW11bGF0ZTogZnVuY3Rpb24gc2ltdWxhdGUodHlwZSwgZWxlbSwgZXZlbnQpIHtcblx0XHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChuZXcgalF1ZXJ5LkV2ZW50KCksIGV2ZW50LCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9KTtcblxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoZSwgbnVsbCwgZWxlbSk7XG5cdFx0fVxuXG5cdH0pO1xuXG5cdGpRdWVyeS5mbi5leHRlbmQoe1xuXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcih0eXBlLCBkYXRhKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIodHlwZSwgZGF0YSwgdGhpcyk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiB0cmlnZ2VySGFuZGxlcih0eXBlLCBkYXRhKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbMF07XG5cdFx0XHRpZiAoZWxlbSkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIodHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuZWFjaCgoXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArIFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgKyBcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIikuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAoaSwgbmFtZSkge1xuXG5cdFx0alF1ZXJ5LmZuW25hbWVdID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyB0aGlzLm9uKG5hbWUsIG51bGwsIGRhdGEsIGZuKSA6IHRoaXMudHJpZ2dlcihuYW1lKTtcblx0XHR9O1xuXHR9KTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRob3ZlcjogZnVuY3Rpb24gaG92ZXIoZm5PdmVyLCBmbk91dCkge1xuXHRcdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlcihmbk92ZXIpLm1vdXNlbGVhdmUoZm5PdXQgfHwgZm5PdmVyKTtcblx0XHR9XG5cdH0pO1xuXG5cdHN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cdGlmICghc3VwcG9ydC5mb2N1c2luKSB7XG5cdFx0alF1ZXJ5LmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiAob3JpZywgZml4KSB7XG5cblx0XHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuXHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoZXZlbnQpKTtcblx0XHRcdH07XG5cblx0XHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsW2ZpeF0gPSB7XG5cdFx0XHRcdHNldHVwOiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0XHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0ICAgIGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKGRvYywgZml4KTtcblxuXHRcdFx0XHRcdGlmICghYXR0YWNoZXMpIHtcblx0XHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKG9yaWcsIGhhbmRsZXIsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoZG9jLCBmaXgsIChhdHRhY2hlcyB8fCAwKSArIDEpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24gdGVhcmRvd24oKSB7XG5cdFx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdCAgICBhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2Vzcyhkb2MsIGZpeCkgLSAxO1xuXG5cdFx0XHRcdFx0aWYgKCFhdHRhY2hlcykge1xuXHRcdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIob3JpZywgaGFuZGxlciwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoZG9jLCBmaXgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoZG9jLCBmaXgsIGF0dGFjaGVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSk7XG5cdH1cblx0dmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG5cdHZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxuXHR2YXIgcnF1ZXJ5ID0gL1xcPy87XG5cblx0alF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24gKGRhdGEpIHtcblx0XHR2YXIgeG1sO1xuXHRcdGlmICghZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdHhtbCA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRhdGEsIFwidGV4dC94bWxcIik7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0eG1sID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdGlmICgheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcnNlcmVycm9yXCIpLmxlbmd0aCkge1xuXHRcdFx0alF1ZXJ5LmVycm9yKFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSk7XG5cdFx0fVxuXHRcdHJldHVybiB4bWw7XG5cdH07XG5cblx0dmFyIHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHQgICAgckNSTEYgPSAvXFxyP1xcbi9nLFxuXHQgICAgcnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHQgICAgcnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5cdGZ1bmN0aW9uIGJ1aWxkUGFyYW1zKHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG5cblx0XHRcdGpRdWVyeS5lYWNoKG9iaiwgZnVuY3Rpb24gKGksIHYpIHtcblx0XHRcdFx0aWYgKHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QocHJlZml4KSkge1xuXG5cdFx0XHRcdFx0YWRkKHByZWZpeCwgdik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRidWlsZFBhcmFtcyhwcmVmaXggKyBcIltcIiArICgodHlwZW9mIHYgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih2KSkgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIpICsgXCJdXCIsIHYsIHRyYWRpdGlvbmFsLCBhZGQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKCF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZShvYmopID09PSBcIm9iamVjdFwiKSB7XG5cblx0XHRcdGZvciAobmFtZSBpbiBvYmopIHtcblx0XHRcdFx0YnVpbGRQYXJhbXMocHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialtuYW1lXSwgdHJhZGl0aW9uYWwsIGFkZCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YWRkKHByZWZpeCwgb2JqKTtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkucGFyYW0gPSBmdW5jdGlvbiAoYSwgdHJhZGl0aW9uYWwpIHtcblx0XHR2YXIgcHJlZml4LFxuXHRcdCAgICBzID0gW10sXG5cdFx0ICAgIGFkZCA9IGZ1bmN0aW9uIGFkZChrZXksIHZhbHVlT3JGdW5jdGlvbikge1xuXG5cdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbih2YWx1ZU9yRnVuY3Rpb24pID8gdmFsdWVPckZ1bmN0aW9uKCkgOiB2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbcy5sZW5ndGhdID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlKTtcblx0XHR9O1xuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoYSkgfHwgYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KGEpKSB7XG5cblx0XHRcdGpRdWVyeS5lYWNoKGEsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0YWRkKHRoaXMubmFtZSwgdGhpcy52YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRmb3IgKHByZWZpeCBpbiBhKSB7XG5cdFx0XHRcdGJ1aWxkUGFyYW1zKHByZWZpeCwgYVtwcmVmaXhdLCB0cmFkaXRpb25hbCwgYWRkKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcy5qb2luKFwiJlwiKTtcblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcblx0XHRcdHJldHVybiBqUXVlcnkucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKTtcblx0XHR9LFxuXHRcdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbiBzZXJpYWxpemVBcnJheSgpIHtcblx0XHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AodGhpcywgXCJlbGVtZW50c1wiKTtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheShlbGVtZW50cykgOiB0aGlzO1xuXHRcdFx0fSkuZmlsdGVyKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpICYmIHJzdWJtaXR0YWJsZS50ZXN0KHRoaXMubm9kZU5hbWUpICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCh0eXBlKSAmJiAodGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KHR5cGUpKTtcblx0XHRcdH0pLm1hcChmdW5jdGlvbiAoaSwgZWxlbSkge1xuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5KHRoaXMpLnZhbCgpO1xuXG5cdFx0XHRcdGlmICh2YWwgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKHZhbCwgZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UockNSTEYsIFwiXFxyXFxuXCIpIH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZShyQ1JMRiwgXCJcXHJcXG5cIikgfTtcblx0XHRcdH0pLmdldCgpO1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIHIyMCA9IC8lMjAvZyxcblx0ICAgIHJoYXNoID0gLyMuKiQvLFxuXHQgICAgcmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0ICAgIHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdCAgICBybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0ICAgIHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdChcIipcIiksXG5cblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG5cdGZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyhzdHJ1Y3R1cmUpIHtcblxuXHRcdHJldHVybiBmdW5jdGlvbiAoZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jKSB7XG5cblx0XHRcdGlmICh0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHQgICAgaSA9IDAsXG5cdFx0XHQgICAgZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG5cblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihmdW5jKSkge1xuXG5cdFx0XHRcdHdoaWxlIChkYXRhVHlwZSA9IGRhdGFUeXBlc1tpKytdKSB7XG5cblx0XHRcdFx0XHRpZiAoZGF0YVR5cGVbMF0gPT09IFwiK1wiKSB7XG5cdFx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKDEpIHx8IFwiKlwiO1xuXHRcdFx0XHRcdFx0KHN0cnVjdHVyZVtkYXRhVHlwZV0gPSBzdHJ1Y3R1cmVbZGF0YVR5cGVdIHx8IFtdKS51bnNoaWZ0KGZ1bmMpO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdChzdHJ1Y3R1cmVbZGF0YVR5cGVdID0gc3RydWN0dXJlW2RhdGFUeXBlXSB8fCBbXSkucHVzaChmdW5jKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSKSB7XG5cblx0XHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0ICAgIHNlZWtpbmdUcmFuc3BvcnQgPSBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHM7XG5cblx0XHRmdW5jdGlvbiBpbnNwZWN0KGRhdGFUeXBlKSB7XG5cdFx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0XHRpbnNwZWN0ZWRbZGF0YVR5cGVdID0gdHJ1ZTtcblx0XHRcdGpRdWVyeS5lYWNoKHN0cnVjdHVyZVtkYXRhVHlwZV0gfHwgW10sIGZ1bmN0aW9uIChfLCBwcmVmaWx0ZXJPckZhY3RvcnkpIHtcblx0XHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3Rvcnkob3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUik7XG5cdFx0XHRcdGlmICh0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJiAhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkW2RhdGFUeXBlT3JUcmFuc3BvcnRdKSB7XG5cblx0XHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KGRhdGFUeXBlT3JUcmFuc3BvcnQpO1xuXHRcdFx0XHRcdGluc3BlY3QoZGF0YVR5cGVPclRyYW5zcG9ydCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHNlZWtpbmdUcmFuc3BvcnQpIHtcblx0XHRcdFx0XHRyZXR1cm4gIShzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBzZWxlY3RlZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5zcGVjdChvcHRpb25zLmRhdGFUeXBlc1swXSkgfHwgIWluc3BlY3RlZFtcIipcIl0gJiYgaW5zcGVjdChcIipcIik7XG5cdH1cblxuXHRmdW5jdGlvbiBhamF4RXh0ZW5kKHRhcmdldCwgc3JjKSB7XG5cdFx0dmFyIGtleSxcblx0XHQgICAgZGVlcCxcblx0XHQgICAgZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdFx0Zm9yIChrZXkgaW4gc3JjKSB7XG5cdFx0XHRpZiAoc3JjW2tleV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHQoZmxhdE9wdGlvbnNba2V5XSA/IHRhcmdldCA6IGRlZXAgfHwgKGRlZXAgPSB7fSkpW2tleV0gPSBzcmNba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGRlZXApIHtcblx0XHRcdGpRdWVyeS5leHRlbmQodHJ1ZSwgdGFyZ2V0LCBkZWVwKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyhzLCBqcVhIUiwgcmVzcG9uc2VzKSB7XG5cblx0XHR2YXIgY3QsXG5cdFx0ICAgIHR5cGUsXG5cdFx0ICAgIGZpbmFsRGF0YVR5cGUsXG5cdFx0ICAgIGZpcnN0RGF0YVR5cGUsXG5cdFx0ICAgIGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHQgICAgZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0XHR3aGlsZSAoZGF0YVR5cGVzWzBdID09PSBcIipcIikge1xuXHRcdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0XHRpZiAoY3QgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGN0KSB7XG5cdFx0XHRmb3IgKHR5cGUgaW4gY29udGVudHMpIHtcblx0XHRcdFx0aWYgKGNvbnRlbnRzW3R5cGVdICYmIGNvbnRlbnRzW3R5cGVdLnRlc3QoY3QpKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQodHlwZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZGF0YVR5cGVzWzBdIGluIHJlc3BvbnNlcykge1xuXHRcdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1swXTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRmb3IgKHR5cGUgaW4gcmVzcG9uc2VzKSB7XG5cdFx0XHRcdGlmICghZGF0YVR5cGVzWzBdIHx8IHMuY29udmVydGVyc1t0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbMF1dKSB7XG5cdFx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFmaXJzdERhdGFUeXBlKSB7XG5cdFx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0XHR9XG5cblx0XHRpZiAoZmluYWxEYXRhVHlwZSkge1xuXHRcdFx0aWYgKGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1swXSkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdChmaW5hbERhdGFUeXBlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZXNbZmluYWxEYXRhVHlwZV07XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gYWpheENvbnZlcnQocywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MpIHtcblx0XHR2YXIgY29udjIsXG5cdFx0ICAgIGN1cnJlbnQsXG5cdFx0ICAgIGNvbnYsXG5cdFx0ICAgIHRtcCxcblx0XHQgICAgcHJldixcblx0XHQgICAgY29udmVydGVycyA9IHt9LFxuXG5cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdFx0aWYgKGRhdGFUeXBlc1sxXSkge1xuXHRcdFx0Zm9yIChjb252IGluIHMuY29udmVydGVycykge1xuXHRcdFx0XHRjb252ZXJ0ZXJzW2NvbnYudG9Mb3dlckNhc2UoKV0gPSBzLmNvbnZlcnRlcnNbY29udl07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0d2hpbGUgKGN1cnJlbnQpIHtcblxuXHRcdFx0aWYgKHMucmVzcG9uc2VGaWVsZHNbY3VycmVudF0pIHtcblx0XHRcdFx0anFYSFJbcy5yZXNwb25zZUZpZWxkc1tjdXJyZW50XV0gPSByZXNwb25zZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIpIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIocmVzcG9uc2UsIHMuZGF0YVR5cGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdFx0aWYgKGN1cnJlbnQpIHtcblxuXHRcdFx0XHRpZiAoY3VycmVudCA9PT0gXCIqXCIpIHtcblxuXHRcdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAocHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCkge1xuXG5cdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbcHJldiArIFwiIFwiICsgY3VycmVudF0gfHwgY29udmVydGVyc1tcIiogXCIgKyBjdXJyZW50XTtcblxuXHRcdFx0XHRcdGlmICghY29udikge1xuXHRcdFx0XHRcdFx0Zm9yIChjb252MiBpbiBjb252ZXJ0ZXJzKSB7XG5cblx0XHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdFx0XHRpZiAodG1wWzFdID09PSBjdXJyZW50KSB7XG5cblx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1twcmV2ICsgXCIgXCIgKyB0bXBbMF1dIHx8IGNvbnZlcnRlcnNbXCIqIFwiICsgdG1wWzBdXTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY29udikge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoY29udiA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1tjb252Ml07XG5cblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoY29udmVydGVyc1tjb252Ml0gIT09IHRydWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFswXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQodG1wWzFdKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChjb252ICE9PSB0cnVlKSB7XG5cblx0XHRcdFx0XHRcdGlmIChjb252ICYmIHMudGhyb3dzKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udihyZXNwb25zZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udihyZXNwb25zZSk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKHtcblxuXHRcdGFjdGl2ZTogMCxcblxuXHRcdGxhc3RNb2RpZmllZDoge30sXG5cdFx0ZXRhZzoge30sXG5cblx0XHRhamF4U2V0dGluZ3M6IHtcblx0XHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KGxvY2F0aW9uLnByb3RvY29sKSxcblx0XHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdFx0YXN5bmM6IHRydWUsXG5cdFx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXG5cdFx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHRcdH0sXG5cblx0XHRcdGNvbnRlbnRzOiB7XG5cdFx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0XHR9LFxuXG5cdFx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdFx0fSxcblxuXHRcdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHRcdH0sXG5cblx0XHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRhamF4U2V0dXA6IGZ1bmN0aW9uIGFqYXhTZXR1cCh0YXJnZXQsIHNldHRpbmdzKSB7XG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHRhamF4RXh0ZW5kKGFqYXhFeHRlbmQodGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzKSwgc2V0dGluZ3MpIDpcblxuXHRcdFx0YWpheEV4dGVuZChqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQpO1xuXHRcdH0sXG5cblx0XHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMocHJlZmlsdGVycyksXG5cdFx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHRyYW5zcG9ydHMpLFxuXG5cdFx0YWpheDogZnVuY3Rpb24gYWpheCh1cmwsIG9wdGlvbnMpIHtcblxuXHRcdFx0aWYgKCh0eXBlb2YgdXJsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodXJsKSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdFx0dmFyIHRyYW5zcG9ydCxcblxuXG5cdFx0XHRjYWNoZVVSTCxcblxuXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHQgICAgcmVzcG9uc2VIZWFkZXJzLFxuXG5cblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXG5cdFx0XHR1cmxBbmNob3IsXG5cblxuXHRcdFx0Y29tcGxldGVkLFxuXG5cblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cblx0XHRcdGksXG5cblxuXHRcdFx0dW5jYWNoZWQsXG5cblxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoe30sIG9wdGlvbnMpLFxuXG5cblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJiAoY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkpID8galF1ZXJ5KGNhbGxiYWNrQ29udGV4dCkgOiBqUXVlcnkuZXZlbnQsXG5cblxuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdCAgICBjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFxuXG5cblx0XHRcdF9zdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHQgICAgcmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbiBnZXRSZXNwb25zZUhlYWRlcihrZXkpIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKGNvbXBsZXRlZCkge1xuXHRcdFx0XHRcdFx0aWYgKCFyZXNwb25zZUhlYWRlcnMpIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlIChtYXRjaCA9IHJoZWFkZXJzLmV4ZWMocmVzcG9uc2VIZWFkZXJzU3RyaW5nKSkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1ttYXRjaFsxXS50b0xvd2VyQ2FzZSgpXSA9IG1hdGNoWzJdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24gZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoY29tcGxldGVkID09IG51bGwpIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzW25hbWUudG9Mb3dlckNhc2UoKV0gPSByZXF1ZXN0SGVhZGVyc05hbWVzW25hbWUudG9Mb3dlckNhc2UoKV0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzW25hbWVdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uIG92ZXJyaWRlTWltZVR5cGUodHlwZSkge1xuXHRcdFx0XHRcdGlmIChjb21wbGV0ZWQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uIHN0YXR1c0NvZGUobWFwKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKG1hcCkge1xuXHRcdFx0XHRcdFx0aWYgKGNvbXBsZXRlZCkge1xuXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyhtYXBbanFYSFIuc3RhdHVzXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoY29kZSBpbiBtYXApIHtcblx0XHRcdFx0XHRcdFx0XHRfc3RhdHVzQ29kZVtjb2RlXSA9IFtfc3RhdHVzQ29kZVtjb2RlXSwgbWFwW2NvZGVdXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24gYWJvcnQoc3RhdHVzVGV4dCkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICh0cmFuc3BvcnQpIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydChmaW5hbFRleHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKDAsIGZpbmFsVGV4dCk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdGRlZmVycmVkLnByb21pc2UoanFYSFIpO1xuXG5cdFx0XHRzLnVybCA9ICgodXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYpICsgXCJcIikucmVwbGFjZShycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiKTtcblxuXHRcdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdFx0cy5kYXRhVHlwZXMgPSAocy5kYXRhVHlwZSB8fCBcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXCJcIl07XG5cblx0XHRcdGlmIChzLmNyb3NzRG9tYWluID09IG51bGwpIHtcblx0XHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09IHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cblx0XHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAocy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0ocy5kYXRhLCBzLnRyYWRpdGlvbmFsKTtcblx0XHRcdH1cblxuXHRcdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMocHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIpO1xuXG5cdFx0XHRpZiAoY29tcGxldGVkKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHRcdGlmIChmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDApIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIik7XG5cdFx0XHR9XG5cblx0XHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KHMudHlwZSk7XG5cblx0XHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZShyaGFzaCwgXCJcIik7XG5cblx0XHRcdGlmICghcy5oYXNDb250ZW50KSB7XG5cblx0XHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZShjYWNoZVVSTC5sZW5ndGgpO1xuXG5cdFx0XHRcdGlmIChzLmRhdGEpIHtcblx0XHRcdFx0XHRjYWNoZVVSTCArPSAocnF1ZXJ5LnRlc3QoY2FjaGVVUkwpID8gXCImXCIgOiBcIj9cIikgKyBzLmRhdGE7XG5cblx0XHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHMuY2FjaGUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKHJhbnRpQ2FjaGUsIFwiJDFcIik7XG5cdFx0XHRcdFx0dW5jYWNoZWQgPSAocnF1ZXJ5LnRlc3QoY2FjaGVVUkwpID8gXCImXCIgOiBcIj9cIikgKyBcIl89XCIgKyBub25jZSsrICsgdW5jYWNoZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHRcdH0gZWxzZSBpZiAocy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgKHMuY29udGVudFR5cGUgfHwgXCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSA9PT0gMCkge1xuXHRcdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZShyMjAsIFwiK1wiKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHMuaWZNb2RpZmllZCkge1xuXHRcdFx0XHRpZiAoalF1ZXJ5Lmxhc3RNb2RpZmllZFtjYWNoZVVSTF0pIHtcblx0XHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFtjYWNoZVVSTF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChqUXVlcnkuZXRhZ1tjYWNoZVVSTF0pIHtcblx0XHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1tjYWNoZVVSTF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUpIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlKTtcblx0XHRcdH1cblxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBzLmRhdGFUeXBlc1swXSAmJiBzLmFjY2VwdHNbcy5kYXRhVHlwZXNbMF1dID8gcy5hY2NlcHRzW3MuZGF0YVR5cGVzWzBdXSArIChzLmRhdGFUeXBlc1swXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIpIDogcy5hY2NlcHRzW1wiKlwiXSk7XG5cblx0XHRcdGZvciAoaSBpbiBzLmhlYWRlcnMpIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihpLCBzLmhlYWRlcnNbaV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocy5iZWZvcmVTZW5kICYmIChzLmJlZm9yZVNlbmQuY2FsbChjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkKSkge1xuXG5cdFx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQocy5jb21wbGV0ZSk7XG5cdFx0XHRqcVhIUi5kb25lKHMuc3VjY2Vzcyk7XG5cdFx0XHRqcVhIUi5mYWlsKHMuZXJyb3IpO1xuXG5cdFx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyh0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUik7XG5cblx0XHRcdGlmICghdHJhbnNwb3J0KSB7XG5cdFx0XHRcdGRvbmUoLTEsIFwiTm8gVHJhbnNwb3J0XCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdFx0aWYgKGZpcmVHbG9iYWxzKSB7XG5cdFx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoXCJhamF4U2VuZFwiLCBbanFYSFIsIHNdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjb21wbGV0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwKSB7XG5cdFx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0anFYSFIuYWJvcnQoXCJ0aW1lb3V0XCIpO1xuXHRcdFx0XHRcdH0sIHMudGltZW91dCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdHRyYW5zcG9ydC5zZW5kKHJlcXVlc3RIZWFkZXJzLCBkb25lKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXG5cdFx0XHRcdFx0aWYgKGNvbXBsZXRlZCkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRkb25lKC0xLCBlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBkb25lKHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzKSB7XG5cdFx0XHRcdHZhciBpc1N1Y2Nlc3MsXG5cdFx0XHRcdCAgICBzdWNjZXNzLFxuXHRcdFx0XHQgICAgZXJyb3IsXG5cdFx0XHRcdCAgICByZXNwb25zZSxcblx0XHRcdFx0ICAgIG1vZGlmaWVkLFxuXHRcdFx0XHQgICAgc3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdFx0aWYgKGNvbXBsZXRlZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdFx0aWYgKHRpbWVvdXRUaW1lcikge1xuXHRcdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dFRpbWVyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0XHRpZiAocmVzcG9uc2VzKSB7XG5cdFx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKHMsIGpxWEhSLCByZXNwb25zZXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydChzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2Vzcyk7XG5cblx0XHRcdFx0aWYgKGlzU3VjY2Vzcykge1xuXG5cdFx0XHRcdFx0aWYgKHMuaWZNb2RpZmllZCkge1xuXHRcdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIik7XG5cdFx0XHRcdFx0XHRpZiAobW9kaWZpZWQpIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFtjYWNoZVVSTF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xuXHRcdFx0XHRcdFx0aWYgKG1vZGlmaWVkKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnW2NhY2hlVVJMXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoc3RhdHVzID09PSAzMDQpIHtcblx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0XHRpZiAoc3RhdHVzIHx8ICFzdGF0dXNUZXh0KSB7XG5cdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdFx0aWYgKHN0YXR1cyA8IDApIHtcblx0XHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAobmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0KSArIFwiXCI7XG5cblx0XHRcdFx0aWYgKGlzU3VjY2Vzcykge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKGNhbGxiYWNrQ29udGV4dCwgW3N1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSXSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aChjYWxsYmFja0NvbnRleHQsIFtqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3JdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoX3N0YXR1c0NvZGUpO1xuXHRcdFx0XHRfc3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRpZiAoZmlyZUdsb2JhbHMpIHtcblx0XHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlcihpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLCBbanFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvcl0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aChjYWxsYmFja0NvbnRleHQsIFtqcVhIUiwgc3RhdHVzVGV4dF0pO1xuXG5cdFx0XHRcdGlmIChmaXJlR2xvYmFscykge1xuXHRcdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKFwiYWpheENvbXBsZXRlXCIsIFtqcVhIUiwgc10pO1xuXG5cdFx0XHRcdFx0aWYgKCEgLS1qUXVlcnkuYWN0aXZlKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fSxcblxuXHRcdGdldEpTT046IGZ1bmN0aW9uIGdldEpTT04odXJsLCBkYXRhLCBjYWxsYmFjaykge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5nZXQodXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIpO1xuXHRcdH0sXG5cblx0XHRnZXRTY3JpcHQ6IGZ1bmN0aW9uIGdldFNjcmlwdCh1cmwsIGNhbGxiYWNrKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdldCh1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIpO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goW1wiZ2V0XCIsIFwicG9zdFwiXSwgZnVuY3Rpb24gKGksIG1ldGhvZCkge1xuXHRcdGpRdWVyeVttZXRob2RdID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUpIHtcblxuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKGRhdGEpKSB7XG5cdFx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBqUXVlcnkuYWpheChqUXVlcnkuZXh0ZW5kKHtcblx0XHRcdFx0dXJsOiB1cmwsXG5cdFx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCh1cmwpICYmIHVybCkpO1xuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uICh1cmwpIHtcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRcdGNhY2hlOiB0cnVlLFxuXHRcdFx0YXN5bmM6IGZhbHNlLFxuXHRcdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcdFwidGhyb3dzXCI6IHRydWVcblx0XHR9KTtcblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHR3cmFwQWxsOiBmdW5jdGlvbiB3cmFwQWxsKGh0bWwpIHtcblx0XHRcdHZhciB3cmFwO1xuXG5cdFx0XHRpZiAodGhpc1swXSkge1xuXHRcdFx0XHRpZiAoalF1ZXJ5LmlzRnVuY3Rpb24oaHRtbCkpIHtcblx0XHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKHRoaXNbMF0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0d3JhcCA9IGpRdWVyeShodG1sLCB0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKHRydWUpO1xuXG5cdFx0XHRcdGlmICh0aGlzWzBdLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSh0aGlzWzBdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHdyYXAubWFwKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0XHR3aGlsZSAoZWxlbS5maXJzdEVsZW1lbnRDaGlsZCkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHRcdH0pLmFwcGVuZCh0aGlzKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdHdyYXBJbm5lcjogZnVuY3Rpb24gd3JhcElubmVyKGh0bWwpIHtcblx0XHRcdGlmIChqUXVlcnkuaXNGdW5jdGlvbihodG1sKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdFx0alF1ZXJ5KHRoaXMpLndyYXBJbm5lcihodG1sLmNhbGwodGhpcywgaSkpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBzZWxmID0galF1ZXJ5KHRoaXMpLFxuXHRcdFx0XHQgICAgY29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdFx0aWYgKGNvbnRlbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoaHRtbCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5hcHBlbmQoaHRtbCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHR3cmFwOiBmdW5jdGlvbiB3cmFwKGh0bWwpIHtcblx0XHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oaHRtbCk7XG5cblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLndyYXBBbGwoaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCh0aGlzLCBpKSA6IGh0bWwpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdHVud3JhcDogZnVuY3Rpb24gdW53cmFwKHNlbGVjdG9yKSB7XG5cdFx0XHR0aGlzLnBhcmVudChzZWxlY3Rvcikubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKGVsZW0pO1xuXHR9O1xuXHRqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdHJldHVybiAhIShlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpO1xuXHR9O1xuXG5cdGpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH07XG5cblx0dmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQwOiAyMDAsXG5cblx0XHQxMjIzOiAyMDRcblx0fSxcblx0ICAgIHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cblx0c3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQ7XG5cdHN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5cdGpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdFx0dmFyIF9jYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHRcdGlmIChzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzZW5kOiBmdW5jdGlvbiBzZW5kKGhlYWRlcnMsIGNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0ICAgIHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0XHR4aHIub3BlbihvcHRpb25zLnR5cGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkKTtcblxuXHRcdFx0XHRcdGlmIChvcHRpb25zLnhockZpZWxkcykge1xuXHRcdFx0XHRcdFx0Zm9yIChpIGluIG9wdGlvbnMueGhyRmllbGRzKSB7XG5cdFx0XHRcdFx0XHRcdHhocltpXSA9IG9wdGlvbnMueGhyRmllbGRzW2ldO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShvcHRpb25zLm1pbWVUeXBlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdKSB7XG5cdFx0XHRcdFx0XHRoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKGkgaW4gaGVhZGVycykge1xuXHRcdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgaGVhZGVyc1tpXSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0X2NhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2sodHlwZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0aWYgKF9jYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdF9jYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGUgPT09IFwiYWJvcnRcIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSBcImVycm9yXCIpIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKDAsIFwiZXJyb3JcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKHhoclN1Y2Nlc3NTdGF0dXNbeGhyLnN0YXR1c10gfHwgeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdCh4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiKSAhPT0gXCJ0ZXh0XCIgfHwgdHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgPyB7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOiB7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSwgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdHhoci5vbmxvYWQgPSBfY2FsbGJhY2soKTtcblx0XHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBfY2FsbGJhY2soXCJlcnJvclwiKTtcblxuXHRcdFx0XHRcdGlmICh4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG5cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoX2NhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfY2FsbGJhY2sgPSBfY2FsbGJhY2soXCJhYm9ydFwiKTtcblxuXHRcdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHRcdHhoci5zZW5kKG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXG5cdFx0XHRcdFx0XHRpZiAoX2NhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiBhYm9ydCgpIHtcblx0XHRcdFx0XHRpZiAoX2NhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRfY2FsbGJhY2soKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuYWpheFByZWZpbHRlcihmdW5jdGlvbiAocykge1xuXHRcdGlmIChzLmNyb3NzRG9tYWluKSB7XG5cdFx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHRcdH1cblx0fSk7XG5cblx0alF1ZXJ5LmFqYXhTZXR1cCh7XG5cdFx0YWNjZXB0czoge1xuXHRcdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgKyBcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdFx0fSxcblx0XHRjb250ZW50czoge1xuXHRcdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0XHR9LFxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24gdGV4dFNjcmlwdCh0ZXh0KSB7XG5cdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKHRleHQpO1xuXHRcdFx0XHRyZXR1cm4gdGV4dDtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5hamF4UHJlZmlsdGVyKFwic2NyaXB0XCIsIGZ1bmN0aW9uIChzKSB7XG5cdFx0aWYgKHMuY2FjaGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAocy5jcm9zc0RvbWFpbikge1xuXHRcdFx0cy50eXBlID0gXCJHRVRcIjtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsIGZ1bmN0aW9uIChzKSB7XG5cblx0XHRpZiAocy5jcm9zc0RvbWFpbikge1xuXHRcdFx0dmFyIHNjcmlwdCwgX2NhbGxiYWNrMjtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHNlbmQ6IGZ1bmN0aW9uIHNlbmQoXywgY29tcGxldGUpIHtcblx0XHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoXCI8c2NyaXB0PlwiKS5wcm9wKHtcblx0XHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0XHR9KS5vbihcImxvYWQgZXJyb3JcIiwgX2NhbGxiYWNrMiA9IGZ1bmN0aW9uIGNhbGxiYWNrKGV2dCkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0X2NhbGxiYWNrMiA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoZXZ0KSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0WzBdKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuXHRcdFx0XHRcdGlmIChfY2FsbGJhY2syKSB7XG5cdFx0XHRcdFx0XHRfY2FsbGJhY2syKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHQgICAgcmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuXHRqUXVlcnkuYWpheFNldHVwKHtcblx0XHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRcdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uIGpzb25wQ2FsbGJhY2soKSB7XG5cdFx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArIG5vbmNlKys7XG5cdFx0XHR0aGlzW2NhbGxiYWNrXSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIiwgZnVuY3Rpb24gKHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSKSB7XG5cblx0XHR2YXIgY2FsbGJhY2tOYW1lLFxuXHRcdCAgICBvdmVyd3JpdHRlbixcblx0XHQgICAgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0ICAgIGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKHJqc29ucC50ZXN0KHMudXJsKSA/IFwidXJsXCIgOiB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmIChzLmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgPT09IDAgJiYgcmpzb25wLnRlc3Qocy5kYXRhKSAmJiBcImRhdGFcIik7XG5cblx0XHRpZiAoanNvblByb3AgfHwgcy5kYXRhVHlwZXNbMF0gPT09IFwianNvbnBcIikge1xuXG5cdFx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbihzLmpzb25wQ2FsbGJhY2spID8gcy5qc29ucENhbGxiYWNrKCkgOiBzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdGlmIChqc29uUHJvcCkge1xuXHRcdFx0XHRzW2pzb25Qcm9wXSA9IHNbanNvblByb3BdLnJlcGxhY2Uocmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUpO1xuXHRcdFx0fSBlbHNlIGlmIChzLmpzb25wICE9PSBmYWxzZSkge1xuXHRcdFx0XHRzLnVybCArPSAocnF1ZXJ5LnRlc3Qocy51cmwpID8gXCImXCIgOiBcIj9cIikgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0XHR9XG5cblx0XHRcdHMuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoIXJlc3BvbnNlQ29udGFpbmVyKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmVycm9yKGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclswXTtcblx0XHRcdH07XG5cblx0XHRcdHMuZGF0YVR5cGVzWzBdID0gXCJqc29uXCI7XG5cblx0XHRcdG92ZXJ3cml0dGVuID0gd2luZG93W2NhbGxiYWNrTmFtZV07XG5cdFx0XHR3aW5kb3dbY2FsbGJhY2tOYW1lXSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0XHR9O1xuXG5cdFx0XHRqcVhIUi5hbHdheXMoZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlmIChvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0alF1ZXJ5KHdpbmRvdykucmVtb3ZlUHJvcChjYWxsYmFja05hbWUpO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2luZG93W2NhbGxiYWNrTmFtZV0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzW2NhbGxiYWNrTmFtZV0pIHtcblxuXHRcdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrTmFtZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24ob3ZlcndyaXR0ZW4pKSB7XG5cdFx0XHRcdFx0b3ZlcndyaXR0ZW4ocmVzcG9uc2VDb250YWluZXJbMF0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0XHR9XG5cdH0pO1xuXG5cdHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLmJvZHk7XG5cdFx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdFx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG5cdH0oKTtcblxuXHRqUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzKSB7XG5cdFx0aWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIpIHtcblx0XHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRcdGNvbnRleHQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdFx0aWYgKCFjb250ZXh0KSB7XG5cblx0XHRcdGlmIChzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCkge1xuXHRcdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpO1xuXG5cdFx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJiYXNlXCIpO1xuXHRcdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoYmFzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKGRhdGEpO1xuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0XHRpZiAocGFyc2VkKSB7XG5cdFx0XHRyZXR1cm4gW2NvbnRleHQuY3JlYXRlRWxlbWVudChwYXJzZWRbMV0pXTtcblx0XHR9XG5cblx0XHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KFtkYXRhXSwgY29udGV4dCwgc2NyaXB0cyk7XG5cblx0XHRpZiAoc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0alF1ZXJ5KHNjcmlwdHMpLnJlbW92ZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoW10sIHBhcnNlZC5jaGlsZE5vZGVzKTtcblx0fTtcblxuXHRqUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uICh1cmwsIHBhcmFtcywgY2FsbGJhY2spIHtcblx0XHR2YXIgc2VsZWN0b3IsXG5cdFx0ICAgIHR5cGUsXG5cdFx0ICAgIHJlc3BvbnNlLFxuXHRcdCAgICBzZWxmID0gdGhpcyxcblx0XHQgICAgb2ZmID0gdXJsLmluZGV4T2YoXCIgXCIpO1xuXG5cdFx0aWYgKG9mZiA+IC0xKSB7XG5cdFx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UodXJsLnNsaWNlKG9mZikpO1xuXHRcdFx0dXJsID0gdXJsLnNsaWNlKDAsIG9mZik7XG5cdFx0fVxuXG5cdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKHBhcmFtcykpIHtcblxuXHRcdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0XHR9IGVsc2UgaWYgKHBhcmFtcyAmJiAodHlwZW9mIHBhcmFtcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHBhcmFtcykpID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdFx0fVxuXG5cdFx0aWYgKHNlbGYubGVuZ3RoID4gMCkge1xuXHRcdFx0alF1ZXJ5LmFqYXgoe1xuXHRcdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0XHR9KS5kb25lKGZ1bmN0aW9uIChyZXNwb25zZVRleHQpIHtcblxuXHRcdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRzZWxmLmh0bWwoc2VsZWN0b3IgP1xuXG5cdFx0XHRcdGpRdWVyeShcIjxkaXY+XCIpLmFwcGVuZChqUXVlcnkucGFyc2VIVE1MKHJlc3BvbnNlVGV4dCkpLmZpbmQoc2VsZWN0b3IpIDpcblxuXHRcdFx0XHRyZXNwb25zZVRleHQpO1xuXG5cdFx0XHR9KS5hbHdheXMoY2FsbGJhY2sgJiYgZnVuY3Rpb24gKGpxWEhSLCBzdGF0dXMpIHtcblx0XHRcdFx0c2VsZi5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRjYWxsYmFjay5hcHBseSh0aGlzLCByZXNwb25zZSB8fCBbanFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSXSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0alF1ZXJ5LmVhY2goW1wiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCJdLCBmdW5jdGlvbiAoaSwgdHlwZSkge1xuXHRcdGpRdWVyeS5mblt0eXBlXSA9IGZ1bmN0aW9uIChmbikge1xuXHRcdFx0cmV0dXJuIHRoaXMub24odHlwZSwgZm4pO1xuXHRcdH07XG5cdH0pO1xuXG5cdGpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcChqUXVlcnkudGltZXJzLCBmdW5jdGlvbiAoZm4pIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHRcdH0pLmxlbmd0aDtcblx0fTtcblxuXHRqUXVlcnkub2Zmc2V0ID0ge1xuXHRcdHNldE9mZnNldDogZnVuY3Rpb24gc2V0T2Zmc2V0KGVsZW0sIG9wdGlvbnMsIGkpIHtcblx0XHRcdHZhciBjdXJQb3NpdGlvbixcblx0XHRcdCAgICBjdXJMZWZ0LFxuXHRcdFx0ICAgIGN1ckNTU1RvcCxcblx0XHRcdCAgICBjdXJUb3AsXG5cdFx0XHQgICAgY3VyT2Zmc2V0LFxuXHRcdFx0ICAgIGN1ckNTU0xlZnQsXG5cdFx0XHQgICAgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHQgICAgcG9zaXRpb24gPSBqUXVlcnkuY3NzKGVsZW0sIFwicG9zaXRpb25cIiksXG5cdFx0XHQgICAgY3VyRWxlbSA9IGpRdWVyeShlbGVtKSxcblx0XHRcdCAgICBwcm9wcyA9IHt9O1xuXG5cdFx0XHRpZiAocG9zaXRpb24gPT09IFwic3RhdGljXCIpIHtcblx0XHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHRcdH1cblxuXHRcdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoZWxlbSwgXCJ0b3BcIik7XG5cdFx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyhlbGVtLCBcImxlZnRcIik7XG5cdFx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9IChwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIpICYmIChjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0KS5pbmRleE9mKFwiYXV0b1wiKSA+IC0xO1xuXG5cdFx0XHRpZiAoY2FsY3VsYXRlUG9zaXRpb24pIHtcblx0XHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KGN1ckNTU1RvcCkgfHwgMDtcblx0XHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoY3VyQ1NTTGVmdCkgfHwgMDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGpRdWVyeS5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG5cblx0XHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbChlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKHt9LCBjdXJPZmZzZXQpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdGlvbnMudG9wICE9IG51bGwpIHtcblx0XHRcdFx0cHJvcHMudG9wID0gb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICsgY3VyVG9wO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9wdGlvbnMubGVmdCAhPSBudWxsKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgPSBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCArIGN1ckxlZnQ7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChcInVzaW5nXCIgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoZWxlbSwgcHJvcHMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VyRWxlbS5jc3MocHJvcHMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblx0XHRvZmZzZXQ6IGZ1bmN0aW9uIG9mZnNldChvcHRpb25zKSB7XG5cblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQodGhpcywgb3B0aW9ucywgaSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZG9jLFxuXHRcdFx0ICAgIGRvY0VsZW0sXG5cdFx0XHQgICAgcmVjdCxcblx0XHRcdCAgICB3aW4sXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF07XG5cblx0XHRcdGlmICghZWxlbSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICghZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHRcdH1cblxuXHRcdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2luID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0cG9zaXRpb246IGZ1bmN0aW9uIHBvc2l0aW9uKCkge1xuXHRcdFx0aWYgKCF0aGlzWzBdKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9mZnNldFBhcmVudCxcblx0XHRcdCAgICBvZmZzZXQsXG5cdFx0XHQgICAgZWxlbSA9IHRoaXNbMF0sXG5cdFx0XHQgICAgcGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdFx0aWYgKGpRdWVyeS5jc3MoZWxlbSwgXCJwb3NpdGlvblwiKSA9PT0gXCJmaXhlZFwiKSB7XG5cblx0XHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0XHRpZiAoIW5vZGVOYW1lKG9mZnNldFBhcmVudFswXSwgXCJodG1sXCIpKSB7XG5cdFx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3Mob2Zmc2V0UGFyZW50WzBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUpLFxuXHRcdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyhvZmZzZXRQYXJlbnRbMF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUpXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUpLFxuXHRcdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyhlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSlcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdG9mZnNldFBhcmVudDogZnVuY3Rpb24gb2Zmc2V0UGFyZW50KCkge1xuXHRcdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHRcdHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyhvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIikgPT09IFwic3RhdGljXCIpIHtcblx0XHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdGpRdWVyeS5lYWNoKHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiAobWV0aG9kLCBwcm9wKSB7XG5cdFx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRcdGpRdWVyeS5mblttZXRob2RdID0gZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0cmV0dXJuIGFjY2Vzcyh0aGlzLCBmdW5jdGlvbiAoZWxlbSwgbWV0aG9kLCB2YWwpIHtcblxuXHRcdFx0XHR2YXIgd2luO1xuXHRcdFx0XHRpZiAoalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG5cdFx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdFx0fSBlbHNlIGlmIChlbGVtLm5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bcHJvcF0gOiBlbGVtW21ldGhvZF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAod2luKSB7XG5cdFx0XHRcdFx0d2luLnNjcm9sbFRvKCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsIHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbVttZXRob2RdID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCk7XG5cdFx0fTtcblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goW1widG9wXCIsIFwibGVmdFwiXSwgZnVuY3Rpb24gKGksIHByb3ApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbcHJvcF0gPSBhZGRHZXRIb29rSWYoc3VwcG9ydC5waXhlbFBvc2l0aW9uLCBmdW5jdGlvbiAoZWxlbSwgY29tcHV0ZWQpIHtcblx0XHRcdGlmIChjb21wdXRlZCkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyhlbGVtLCBwcm9wKTtcblxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoY29tcHV0ZWQpID8galF1ZXJ5KGVsZW0pLnBvc2l0aW9uKClbcHJvcF0gKyBcInB4XCIgOiBjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0alF1ZXJ5LmVhY2goeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24gKG5hbWUsIHR5cGUpIHtcblx0XHRqUXVlcnkuZWFjaCh7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSwgZnVuY3Rpb24gKGRlZmF1bHRFeHRyYSwgZnVuY05hbWUpIHtcblxuXHRcdFx0alF1ZXJ5LmZuW2Z1bmNOYW1lXSA9IGZ1bmN0aW9uIChtYXJnaW4sIHZhbHVlKSB7XG5cdFx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmIChkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIpLFxuXHRcdFx0XHQgICAgZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiKTtcblxuXHRcdFx0XHRyZXR1cm4gYWNjZXNzKHRoaXMsIGZ1bmN0aW9uIChlbGVtLCB0eXBlLCB2YWx1ZSkge1xuXHRcdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0XHRpZiAoalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKFwib3V0ZXJcIikgPT09IDAgPyBlbGVtW1wiaW5uZXJcIiArIG5hbWVdIDogZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIiArIG5hbWVdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChlbGVtLm5vZGVUeXBlID09PSA5KSB7XG5cdFx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KGVsZW0uYm9keVtcInNjcm9sbFwiICsgbmFtZV0sIGRvY1tcInNjcm9sbFwiICsgbmFtZV0sIGVsZW0uYm9keVtcIm9mZnNldFwiICsgbmFtZV0sIGRvY1tcIm9mZnNldFwiICsgbmFtZV0sIGRvY1tcImNsaWVudFwiICsgbmFtZV0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoZWxlbSwgdHlwZSwgZXh0cmEpIDpcblxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZShlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEpO1xuXHRcdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSk7XG5cdFx0XHR9O1xuXHRcdH0pO1xuXHR9KTtcblxuXHRqUXVlcnkuZm4uZXh0ZW5kKHtcblxuXHRcdGJpbmQ6IGZ1bmN0aW9uIGJpbmQodHlwZXMsIGRhdGEsIGZuKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbih0eXBlcywgbnVsbCwgZGF0YSwgZm4pO1xuXHRcdH0sXG5cdFx0dW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQodHlwZXMsIGZuKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vZmYodHlwZXMsIG51bGwsIGZuKTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGU6IGZ1bmN0aW9uIGRlbGVnYXRlKHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4pIHtcblx0XHRcdHJldHVybiB0aGlzLm9uKHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4pO1xuXHRcdH0sXG5cdFx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24gdW5kZWxlZ2F0ZShzZWxlY3RvciwgdHlwZXMsIGZuKSB7XG5cblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gdGhpcy5vZmYoc2VsZWN0b3IsIFwiKipcIikgOiB0aGlzLm9mZih0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbik7XG5cdFx0fVxuXHR9KTtcblxuXHRqUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24gKGhvbGQpIHtcblx0XHRpZiAoaG9sZCkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkodHJ1ZSk7XG5cdFx0fVxuXHR9O1xuXHRqUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cdGpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xuXHRqUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcblxuXG5cblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5O1xuXHRcdH0pO1xuXHR9XG5cblx0dmFyXG5cblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblxuXHRfJCA9IHdpbmRvdy4kO1xuXG5cdGpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKGRlZXApIHtcblx0XHRpZiAod2luZG93LiQgPT09IGpRdWVyeSkge1xuXHRcdFx0d2luZG93LiQgPSBfJDtcblx0XHR9XG5cblx0XHRpZiAoZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkpIHtcblx0XHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnk7XG5cdH07XG5cblx0aWYgKCFub0dsb2JhbCkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59KTsiLCJcblwidXNlIHN0cmljdFwiO1xuXG52YXIgX3R5cGVvZjIgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO2ZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1yZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9XG4gICAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7aWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG59KCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZjIob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZjIob2JqKTtcbn07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbn1cblxuKGZ1bmN0aW9uIChmYWN0b3J5LCB3aW5kb3csIGRvY3VtZW50KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkod2luZG93LCBkb2N1bWVudCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBtb2R1bGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnkod2luZG93LCBkb2N1bWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeSh3aW5kb3csIGRvY3VtZW50KTtcbiAgICB9XG59KShmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCkge1xuICAgIHZhciBNYXJrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBNYXJrKGN0eCkge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hcmspO1xuXG4gICAgICAgICAgICB0aGlzLmN0eCA9IGN0eDtcblxuICAgICAgICAgICAgdGhpcy5pZSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAgICAgICBpZiAodWEuaW5kZXhPZihcIk1TSUVcIikgPiAtMSB8fCB1YS5pbmRleE9mKFwiVHJpZGVudFwiKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoTWFyaywgW3tcbiAgICAgICAgICAgIGtleTogXCJsb2dcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2cobXNnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxldmVsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBcImRlYnVnXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgbG9nID0gdGhpcy5vcHQubG9nO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHQuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBsb2cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihsb2cpKSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbG9nW2xldmVsXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ1tsZXZlbF0oXCJtYXJrLmpzOiBcIiArIG1zZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiZXNjYXBlU3RyXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXNjYXBlU3RyKHN0cikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvW1xcLVxcW1xcXVxcL1xce1xcfVxcKFxcKVxcKlxcK1xcP1xcLlxcXFxcXF5cXCRcXHxdL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiY3JlYXRlUmVnRXhwXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUmVnRXhwKHN0cikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdC53aWxkY2FyZHMgIT09IFwiZGlzYWJsZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSB0aGlzLnNldHVwV2lsZGNhcmRzUmVnRXhwKHN0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0ciA9IHRoaXMuZXNjYXBlU3RyKHN0cik7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMub3B0LnN5bm9ueW1zKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gdGhpcy5jcmVhdGVTeW5vbnltc1JlZ0V4cChzdHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHQuaWdub3JlSm9pbmVycyB8fCB0aGlzLm9wdC5pZ25vcmVQdW5jdHVhdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gdGhpcy5zZXR1cElnbm9yZUpvaW5lcnNSZWdFeHAoc3RyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0LmRpYWNyaXRpY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gdGhpcy5jcmVhdGVEaWFjcml0aWNzUmVnRXhwKHN0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0ciA9IHRoaXMuY3JlYXRlTWVyZ2VkQmxhbmtzUmVnRXhwKHN0cik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0Lmlnbm9yZUpvaW5lcnMgfHwgdGhpcy5vcHQuaWdub3JlUHVuY3R1YXRpb24ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHRoaXMuY3JlYXRlSm9pbmVyc1JlZ0V4cChzdHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHQud2lsZGNhcmRzICE9PSBcImRpc2FibGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gdGhpcy5jcmVhdGVXaWxkY2FyZHNSZWdFeHAoc3RyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyID0gdGhpcy5jcmVhdGVBY2N1cmFjeVJlZ0V4cChzdHIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJjcmVhdGVTeW5vbnltc1JlZ0V4cFwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVN5bm9ueW1zUmVnRXhwKHN0cikge1xuICAgICAgICAgICAgICAgIHZhciBzeW4gPSB0aGlzLm9wdC5zeW5vbnltcyxcbiAgICAgICAgICAgICAgICAgICAgc2VucyA9IHRoaXMub3B0LmNhc2VTZW5zaXRpdmUgPyBcIlwiIDogXCJpXCIsXG4gICAgICAgICAgICAgICAgICAgIGpvaW5lclBsYWNlaG9sZGVyID0gdGhpcy5vcHQuaWdub3JlSm9pbmVycyB8fCB0aGlzLm9wdC5pZ25vcmVQdW5jdHVhdGlvbi5sZW5ndGggPyBcIlxcMFwiIDogXCJcIjtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiBzeW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN5bi5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHN5bltpbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazEgPSB0aGlzLm9wdC53aWxkY2FyZHMgIT09IFwiZGlzYWJsZWRcIiA/IHRoaXMuc2V0dXBXaWxkY2FyZHNSZWdFeHAoaW5kZXgpIDogdGhpcy5lc2NhcGVTdHIoaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsyID0gdGhpcy5vcHQud2lsZGNhcmRzICE9PSBcImRpc2FibGVkXCIgPyB0aGlzLnNldHVwV2lsZGNhcmRzUmVnRXhwKHZhbHVlKSA6IHRoaXMuZXNjYXBlU3RyKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrMSAhPT0gXCJcIiAmJiBrMiAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXCIgKyBrMSArIFwifFwiICsgazIgKyBcIilcIiwgXCJnbVwiICsgc2VucyksIGpvaW5lclBsYWNlaG9sZGVyICsgKFwiKFwiICsgdGhpcy5wcm9jZXNzU3lub215bXMoazEpICsgXCJ8XCIpICsgKHRoaXMucHJvY2Vzc1N5bm9teW1zKGsyKSArIFwiKVwiKSArIGpvaW5lclBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwicHJvY2Vzc1N5bm9teW1zXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc1N5bm9teW1zKHN0cikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdC5pZ25vcmVKb2luZXJzIHx8IHRoaXMub3B0Lmlnbm9yZVB1bmN0dWF0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSB0aGlzLnNldHVwSWdub3JlSm9pbmVyc1JlZ0V4cChzdHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwic2V0dXBXaWxkY2FyZHNSZWdFeHBcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cFdpbGRjYXJkc1JlZ0V4cChzdHIpIHtcbiAgICAgICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvKD86XFxcXCkqXFw/L2csIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5jaGFyQXQoMCkgPT09IFwiXFxcXFwiID8gXCI/XCIgOiBcIlxceDAxXCI7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyg/OlxcXFwpKlxcKi9nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwuY2hhckF0KDApID09PSBcIlxcXFxcIiA/IFwiKlwiIDogXCJcXHgwMlwiO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiY3JlYXRlV2lsZGNhcmRzUmVnRXhwXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlV2lsZGNhcmRzUmVnRXhwKHN0cikge1xuICAgICAgICAgICAgICAgIHZhciBzcGFjZXMgPSB0aGlzLm9wdC53aWxkY2FyZHMgPT09IFwid2l0aFNwYWNlc1wiO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFx1MDAwMS9nLCBzcGFjZXMgPyBcIltcXFxcU1xcXFxzXT9cIiA6IFwiXFxcXFM/XCIpLnJlcGxhY2UoL1xcdTAwMDIvZywgc3BhY2VzID8gXCJbXFxcXFNcXFxcc10qP1wiIDogXCJcXFxcUypcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJzZXR1cElnbm9yZUpvaW5lcnNSZWdFeHBcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cElnbm9yZUpvaW5lcnNSZWdFeHAoc3RyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXih8KVxcXFxdL2csIGZ1bmN0aW9uICh2YWwsIGluZHgsIG9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0Q2hhciA9IG9yaWdpbmFsLmNoYXJBdChpbmR4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgvWyh8KVxcXFxdLy50ZXN0KG5leHRDaGFyKSB8fCBuZXh0Q2hhciA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwgKyBcIlxcMFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJjcmVhdGVKb2luZXJzUmVnRXhwXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlSm9pbmVyc1JlZ0V4cChzdHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgam9pbmVyID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGlnbm9yZVB1bmN0dWF0aW9uID0gdGhpcy5vcHQuaWdub3JlUHVuY3R1YXRpb247XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaWdub3JlUHVuY3R1YXRpb24pICYmIGlnbm9yZVB1bmN0dWF0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBqb2luZXIucHVzaCh0aGlzLmVzY2FwZVN0cihpZ25vcmVQdW5jdHVhdGlvbi5qb2luKFwiXCIpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdC5pZ25vcmVKb2luZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5lci5wdXNoKFwiXFxcXHUwMGFkXFxcXHUyMDBiXFxcXHUyMDBjXFxcXHUyMDBkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gam9pbmVyLmxlbmd0aCA/IHN0ci5zcGxpdCgvXFx1MDAwMCsvKS5qb2luKFwiW1wiICsgam9pbmVyLmpvaW4oXCJcIikgKyBcIl0qXCIpIDogc3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiY3JlYXRlRGlhY3JpdGljc1JlZ0V4cFwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURpYWNyaXRpY3NSZWdFeHAoc3RyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbnMgPSB0aGlzLm9wdC5jYXNlU2Vuc2l0aXZlID8gXCJcIiA6IFwiaVwiLFxuICAgICAgICAgICAgICAgICAgICBkY3QgPSB0aGlzLm9wdC5jYXNlU2Vuc2l0aXZlID8gW1wiYcOgw6HDosOjw6TDpcSBxIXEg1wiLCBcIkHDgMOBw4LDg8OEw4XEgMSExIJcIiwgXCJjw6fEh8SNXCIsIFwiQ8OHxIbEjFwiLCBcImTEkcSPXCIsIFwiRMSQxI5cIiwgXCJlw6jDqcOqw6vEm8STxJlcIiwgXCJFw4jDicOKw4vEmsSSxJhcIiwgXCJpw6zDrcOuw6/Eq1wiLCBcIknDjMONw47Dj8SqXCIsIFwibMWCXCIsIFwiTMWBXCIsIFwibsOxxYjFhFwiLCBcIk7DkcWHxYNcIiwgXCJvw7LDs8O0w7XDtsO4xY1cIiwgXCJPw5LDk8OUw5XDlsOYxYxcIiwgXCJyxZlcIiwgXCJSxZhcIiwgXCJzxaHFm8iZxZ9cIiwgXCJTxaDFmsiYxZ5cIiwgXCJ0xaXIm8WjXCIsIFwiVMWkyJrFolwiLCBcInXDucO6w7vDvMWvxatcIiwgXCJVw5nDmsObw5zFrsWqXCIsIFwiecO/w71cIiwgXCJZxbjDnVwiLCBcInrFvsW8xbpcIiwgXCJaxb3Fu8W5XCJdIDogW1wiYcOgw6HDosOjw6TDpcSBxIXEg0HDgMOBw4LDg8OEw4XEgMSExIJcIiwgXCJjw6fEh8SNQ8OHxIbEjFwiLCBcImTEkcSPRMSQxI5cIiwgXCJlw6jDqcOqw6vEm8STxJlFw4jDicOKw4vEmsSSxJhcIiwgXCJpw6zDrcOuw6/Eq0nDjMONw47Dj8SqXCIsIFwibMWCTMWBXCIsIFwibsOxxYjFhE7DkcWHxYNcIiwgXCJvw7LDs8O0w7XDtsO4xY1Pw5LDk8OUw5XDlsOYxYxcIiwgXCJyxZlSxZhcIiwgXCJzxaHFm8iZxZ9TxaDFmsiYxZ5cIiwgXCJ0xaXIm8WjVMWkyJrFolwiLCBcInXDucO6w7vDvMWvxatVw5nDmsObw5zFrsWqXCIsIFwiecO/w71ZxbjDnVwiLCBcInrFvsW8xbpaxb3Fu8W5XCJdO1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVkID0gW107XG4gICAgICAgICAgICAgICAgc3RyLnNwbGl0KFwiXCIpLmZvckVhY2goZnVuY3Rpb24gKGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRjdC5ldmVyeShmdW5jdGlvbiAoZGN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGN0LmluZGV4T2YoY2gpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVkLmluZGV4T2YoZGN0KSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiW1wiICsgZGN0ICsgXCJdXCIsIFwiZ21cIiArIHNlbnMpLCBcIltcIiArIGRjdCArIFwiXVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVkLnB1c2goZGN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiY3JlYXRlTWVyZ2VkQmxhbmtzUmVnRXhwXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTWVyZ2VkQmxhbmtzUmVnRXhwKHN0cikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvW1xcc10rL2dtaSwgXCJbXFxcXHNdK1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcImNyZWF0ZUFjY3VyYWN5UmVnRXhwXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQWNjdXJhY3lSZWdFeHAoc3RyKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBjaGFycyA9IFwiIVxcXCIjJCUmJygpKissLS4vOjs8PT4/QFtcXFxcXV5fYHt8fX5cXHhBMVxceEJGXCI7XG4gICAgICAgICAgICAgICAgdmFyIGFjYyA9IHRoaXMub3B0LmFjY3VyYWN5LFxuICAgICAgICAgICAgICAgICAgICB2YWwgPSB0eXBlb2YgYWNjID09PSBcInN0cmluZ1wiID8gYWNjIDogYWNjLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBscyA9IHR5cGVvZiBhY2MgPT09IFwic3RyaW5nXCIgPyBbXSA6IGFjYy5saW1pdGVycyxcbiAgICAgICAgICAgICAgICAgICAgbHNKb2luID0gXCJcIjtcbiAgICAgICAgICAgICAgICBscy5mb3JFYWNoKGZ1bmN0aW9uIChsaW1pdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxzSm9pbiArPSBcInxcIiArIF90aGlzLmVzY2FwZVN0cihsaW1pdGVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicGFydGlhbGx5XCI6XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIoKShcIiArIHN0ciArIFwiKVwiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY29tcGxlbWVudGFyeVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbHNKb2luID0gXCJcXFxcc1wiICsgKGxzSm9pbiA/IGxzSm9pbiA6IHRoaXMuZXNjYXBlU3RyKGNoYXJzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIoKShbXlwiICsgbHNKb2luICsgXCJdKlwiICsgc3RyICsgXCJbXlwiICsgbHNKb2luICsgXCJdKilcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImV4YWN0bHlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIihefFxcXFxzXCIgKyBsc0pvaW4gKyBcIikoXCIgKyBzdHIgKyBcIikoPz0kfFxcXFxzXCIgKyBsc0pvaW4gKyBcIilcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJnZXRTZXBhcmF0ZWRLZXl3b3Jkc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlcGFyYXRlZEtleXdvcmRzKHN2KSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICAgICAgICAgICAgICBzdi5mb3JFYWNoKGZ1bmN0aW9uIChrdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzMi5vcHQuc2VwYXJhdGVXb3JkU2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa3cudHJpbSgpICYmIHN0YWNrLmluZGV4T2Yoa3cpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goa3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAga3cuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKGt3U3BsaXR0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa3dTcGxpdHRlZC50cmltKCkgJiYgc3RhY2suaW5kZXhPZihrd1NwbGl0dGVkKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChrd1NwbGl0dGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIFwia2V5d29yZHNcIjogc3RhY2suc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBcImxlbmd0aFwiOiBzdGFjay5sZW5ndGhcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiaXNOdW1lcmljXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNOdW1lcmljKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcihwYXJzZUZsb2F0KHZhbHVlKSkgPT0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJjaGVja1Jhbmdlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrUmFuZ2VzKGFycmF5KSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnJheVswXSkgIT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2coXCJtYXJrUmFuZ2VzKCkgd2lsbCBvbmx5IGFjY2VwdCBhbiBhcnJheSBvZiBvYmplY3RzXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdC5ub01hdGNoKGFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IDA7XG4gICAgICAgICAgICAgICAgYXJyYXkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5zdGFydCAtIGIuc3RhcnQ7XG4gICAgICAgICAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2NhbGxOb01hdGNoT25JbnZhbGlkID0gX3RoaXMzLmNhbGxOb01hdGNoT25JbnZhbGlkUmFuZ2VzKGl0ZW0sIGxhc3QpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBfY2FsbE5vTWF0Y2hPbkludmFsaWQuc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBfY2FsbE5vTWF0Y2hPbkludmFsaWQuZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBfY2FsbE5vTWF0Y2hPbkludmFsaWQudmFsaWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmxlbmd0aCA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJjYWxsTm9NYXRjaE9uSW52YWxpZFJhbmdlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGxOb01hdGNoT25JbnZhbGlkUmFuZ2VzKHJhbmdlLCBsYXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgICBlbmQgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlICYmIHR5cGVvZiByYW5nZS5zdGFydCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHBhcnNlSW50KHJhbmdlLnN0YXJ0LCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgcGFyc2VJbnQocmFuZ2UubGVuZ3RoLCAxMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNOdW1lcmljKHJhbmdlLnN0YXJ0KSAmJiB0aGlzLmlzTnVtZXJpYyhyYW5nZS5sZW5ndGgpICYmIGVuZCAtIGxhc3QgPiAwICYmIGVuZCAtIHN0YXJ0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2coXCJJZ25vcmluZyBpbnZhbGlkIG9yIG92ZXJsYXBwaW5nIHJhbmdlOiBcIiArIChcIlwiICsgSlNPTi5zdHJpbmdpZnkocmFuZ2UpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdC5ub01hdGNoKHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nKFwiSWdub3JpbmcgaW52YWxpZCByYW5nZTogXCIgKyBKU09OLnN0cmluZ2lmeShyYW5nZSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdC5ub01hdGNoKHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IHZhbGlkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcImNoZWNrV2hpdGVzcGFjZVJhbmdlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrV2hpdGVzcGFjZVJhbmdlcyhyYW5nZSwgb3JpZ2luYWxMZW5ndGgsIHN0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gb3JpZ2luYWxMZW5ndGggLSBtYXgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gcGFyc2VJbnQocmFuZ2Uuc3RhcnQsIDEwKSAtIG9mZnNldDtcblxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQgPiBtYXggPyBtYXggOiBzdGFydDtcbiAgICAgICAgICAgICAgICBlbmQgPSBzdGFydCArIHBhcnNlSW50KHJhbmdlLmxlbmd0aCwgMTApO1xuICAgICAgICAgICAgICAgIGlmIChlbmQgPiBtYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gbWF4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZyhcIkVuZCByYW5nZSBhdXRvbWF0aWNhbGx5IHNldCB0byB0aGUgbWF4IHZhbHVlIG9mIFwiICsgbWF4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgLSBzdGFydCA8IDAgfHwgc3RhcnQgPiBtYXggfHwgZW5kID4gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nKFwiSW52YWxpZCByYW5nZTogXCIgKyBKU09OLnN0cmluZ2lmeShyYW5nZSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdC5ub01hdGNoKHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmluZy5zdWJzdHJpbmcoc3RhcnQsIGVuZCkucmVwbGFjZSgvXFxzKy9nLCBcIlwiKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nKFwiU2tpcHBpbmcgd2hpdGVzcGFjZSBvbmx5IHJhbmdlOiBcIiArIEpTT04uc3RyaW5naWZ5KHJhbmdlKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0Lm5vTWF0Y2gocmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZW5kLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZDogdmFsaWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiZ2V0VGV4dE5vZGVzXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGV4dE5vZGVzKGNiKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gXCJcIixcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZXJhdG9yLmZvckVhY2hOb2RlKE5vZGVGaWx0ZXIuU0hPV19URVhULCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB2YWwubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiAodmFsICs9IG5vZGUudGV4dENvbnRlbnQpLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IG5vZGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzNC5tYXRjaGVzRXhjbHVkZShub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfUkVKRUNUO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzOiBub2Rlc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcIm1hdGNoZXNFeGNsdWRlXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbWF0Y2hlc0V4Y2x1ZGUoZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRE9NSXRlcmF0b3IubWF0Y2hlcyhlbCwgdGhpcy5vcHQuZXhjbHVkZS5jb25jYXQoW1wic2NyaXB0XCIsIFwic3R5bGVcIiwgXCJ0aXRsZVwiLCBcImhlYWRcIiwgXCJodG1sXCJdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJ3cmFwUmFuZ2VJblRleHROb2RlXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd3JhcFJhbmdlSW5UZXh0Tm9kZShub2RlLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhFbCA9ICF0aGlzLm9wdC5lbGVtZW50ID8gXCJtYXJrXCIgOiB0aGlzLm9wdC5lbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBzdGFydE5vZGUgPSBub2RlLnNwbGl0VGV4dChzdGFydCksXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IHN0YXJ0Tm9kZS5zcGxpdFRleHQoZW5kIC0gc3RhcnQpO1xuICAgICAgICAgICAgICAgIHZhciByZXBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChoRWwpO1xuICAgICAgICAgICAgICAgIHJlcGwuc2V0QXR0cmlidXRlKFwiZGF0YS1tYXJranNcIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdC5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwbC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLm9wdC5jbGFzc05hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXBsLnRleHRDb250ZW50ID0gc3RhcnROb2RlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgIHN0YXJ0Tm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChyZXBsLCBzdGFydE5vZGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJ3cmFwUmFuZ2VJbk1hcHBlZFRleHROb2RlXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd3JhcFJhbmdlSW5NYXBwZWRUZXh0Tm9kZShkaWN0LCBzdGFydCwgZW5kLCBmaWx0ZXJDYiwgZWFjaENiKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBkaWN0Lm5vZGVzLmV2ZXJ5KGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaWJsID0gZGljdC5ub2Rlc1tpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2libCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBzaWJsLnN0YXJ0ID4gc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlsdGVyQ2Iobi5ub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBzdGFydCAtIG4uc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IChlbmQgPiBuLmVuZCA/IG4uZW5kIDogZW5kKSAtIG4uc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRTdHIgPSBkaWN0LnZhbHVlLnN1YnN0cigwLCBuLnN0YXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRTdHIgPSBkaWN0LnZhbHVlLnN1YnN0cihlICsgbi5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLm5vZGUgPSBfdGhpczUud3JhcFJhbmdlSW5UZXh0Tm9kZShuLm5vZGUsIHMsIGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWN0LnZhbHVlID0gc3RhcnRTdHIgKyBlbmRTdHI7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWN0Lm5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGssIGopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA+PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWN0Lm5vZGVzW2pdLnN0YXJ0ID4gMCAmJiBqICE9PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWN0Lm5vZGVzW2pdLnN0YXJ0IC09IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGljdC5ub2Rlc1tqXS5lbmQgLT0gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCAtPSBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaENiKG4ubm9kZS5wcmV2aW91c1NpYmxpbmcsIG4uc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCA+IG4uZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBuLmVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwid3JhcE1hdGNoZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3cmFwTWF0Y2hlcyhyZWdleCwgaWdub3JlR3JvdXBzLCBmaWx0ZXJDYiwgZWFjaENiLCBlbmRDYikge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoSWR4ID0gaWdub3JlR3JvdXBzID09PSAwID8gMCA6IGlnbm9yZUdyb3VwcyArIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRUZXh0Tm9kZXMoZnVuY3Rpb24gKGRpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZGljdC5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5ub2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMobm9kZS50ZXh0Q29udGVudCkpICE9PSBudWxsICYmIG1hdGNoW21hdGNoSWR4XSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlsdGVyQ2IobWF0Y2hbbWF0Y2hJZHhdLCBub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaElkeCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG1hdGNoSWR4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyArPSBtYXRjaFtpXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IF90aGlzNi53cmFwUmFuZ2VJblRleHROb2RlKG5vZGUsIHBvcywgcG9zICsgbWF0Y2hbbWF0Y2hJZHhdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaENiKG5vZGUucHJldmlvdXNTaWJsaW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbmRDYigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwid3JhcE1hdGNoZXNBY3Jvc3NFbGVtZW50c1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdyYXBNYXRjaGVzQWNyb3NzRWxlbWVudHMocmVnZXgsIGlnbm9yZUdyb3VwcywgZmlsdGVyQ2IsIGVhY2hDYiwgZW5kQ2IpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBtYXRjaElkeCA9IGlnbm9yZUdyb3VwcyA9PT0gMCA/IDAgOiBpZ25vcmVHcm91cHMgKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0VGV4dE5vZGVzKGZ1bmN0aW9uIChkaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoZGljdC52YWx1ZSkpICE9PSBudWxsICYmIG1hdGNoW21hdGNoSWR4XSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hJZHggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG1hdGNoSWR4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgKz0gbWF0Y2hbaV0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSBzdGFydCArIG1hdGNoW21hdGNoSWR4XS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy53cmFwUmFuZ2VJbk1hcHBlZFRleHROb2RlKGRpY3QsIHN0YXJ0LCBlbmQsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlckNiKG1hdGNoW21hdGNoSWR4XSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAobm9kZSwgbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXgubGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2hDYihub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVuZENiKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJ3cmFwUmFuZ2VGcm9tSW5kZXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3cmFwUmFuZ2VGcm9tSW5kZXgocmFuZ2VzLCBmaWx0ZXJDYiwgZWFjaENiLCBlbmRDYikge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRUZXh0Tm9kZXMoZnVuY3Rpb24gKGRpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsTGVuZ3RoID0gZGljdC52YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uIChyYW5nZSwgY291bnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9jaGVja1doaXRlc3BhY2VSYW5nZSA9IF90aGlzOC5jaGVja1doaXRlc3BhY2VSYW5nZXMocmFuZ2UsIG9yaWdpbmFsTGVuZ3RoLCBkaWN0LnZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IF9jaGVja1doaXRlc3BhY2VSYW5nZS5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBfY2hlY2tXaGl0ZXNwYWNlUmFuZ2UuZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gX2NoZWNrV2hpdGVzcGFjZVJhbmdlLnZhbGlkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczgud3JhcFJhbmdlSW5NYXBwZWRUZXh0Tm9kZShkaWN0LCBzdGFydCwgZW5kLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyQ2Iobm9kZSwgcmFuZ2UsIGRpY3QudmFsdWUuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpLCBjb3VudGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYWNoQ2Iobm9kZSwgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZW5kQ2IoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcInVud3JhcE1hdGNoZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1bndyYXBNYXRjaGVzKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIHZhciBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jRnJhZy5hcHBlbmRDaGlsZChub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKGRvY0ZyYWcsIG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3JtYWxpemVUZXh0Tm9kZShwYXJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcIm5vcm1hbGl6ZVRleHROb2RlXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplVGV4dE5vZGUobm9kZSkge1xuICAgICAgICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChub2RlLm5leHRTaWJsaW5nICYmIG5vZGUubmV4dFNpYmxpbmcubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubm9kZVZhbHVlICs9IG5vZGUubmV4dFNpYmxpbmcubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3JtYWxpemVUZXh0Tm9kZShub2RlLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZVRleHROb2RlKG5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwibWFya1JlZ0V4cFwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1hcmtSZWdFeHAocmVnZXhwLCBvcHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHRoaXMub3B0ID0gb3B0O1xuICAgICAgICAgICAgICAgIHRoaXMubG9nKFwiU2VhcmNoaW5nIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyByZWdleHAgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICAgICAgdmFyIHRvdGFsTWF0Y2hlcyA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGZuID0gXCJ3cmFwTWF0Y2hlc1wiO1xuICAgICAgICAgICAgICAgIHZhciBlYWNoQ2IgPSBmdW5jdGlvbiBlYWNoQ2IoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbE1hdGNoZXMrKztcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM5Lm9wdC5lYWNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0LmFjcm9zc0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZuID0gXCJ3cmFwTWF0Y2hlc0Fjcm9zc0VsZW1lbnRzXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNbZm5dKHJlZ2V4cCwgdGhpcy5vcHQuaWdub3JlR3JvdXBzLCBmdW5jdGlvbiAobWF0Y2gsIG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzOS5vcHQuZmlsdGVyKG5vZGUsIG1hdGNoLCB0b3RhbE1hdGNoZXMpO1xuICAgICAgICAgICAgICAgIH0sIGVhY2hDYiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG90YWxNYXRjaGVzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczkub3B0Lm5vTWF0Y2gocmVnZXhwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpczkub3B0LmRvbmUodG90YWxNYXRjaGVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcIm1hcmtcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXJrKHN2LCBvcHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9wdCA9IG9wdDtcbiAgICAgICAgICAgICAgICB2YXIgdG90YWxNYXRjaGVzID0gMCxcbiAgICAgICAgICAgICAgICAgICAgZm4gPSBcIndyYXBNYXRjaGVzXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgX2dldFNlcGFyYXRlZEtleXdvcmRzID0gdGhpcy5nZXRTZXBhcmF0ZWRLZXl3b3Jkcyh0eXBlb2Ygc3YgPT09IFwic3RyaW5nXCIgPyBbc3ZdIDogc3YpLFxuICAgICAgICAgICAgICAgICAgICBrd0FyciA9IF9nZXRTZXBhcmF0ZWRLZXl3b3Jkcy5rZXl3b3JkcyxcbiAgICAgICAgICAgICAgICAgICAga3dBcnJMZW4gPSBfZ2V0U2VwYXJhdGVkS2V5d29yZHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBzZW5zID0gdGhpcy5vcHQuY2FzZVNlbnNpdGl2ZSA/IFwiXCIgOiBcImlcIixcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoa3cpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChfdGhpczEwLmNyZWF0ZVJlZ0V4cChrdyksIFwiZ21cIiArIHNlbnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMTAubG9nKFwiU2VhcmNoaW5nIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyByZWdleCArIFwiXFxcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMxMFtmbl0ocmVnZXgsIDEsIGZ1bmN0aW9uICh0ZXJtLCBub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxMC5vcHQuZmlsdGVyKG5vZGUsIGt3LCB0b3RhbE1hdGNoZXMsIG1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxNYXRjaGVzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczEwLm9wdC5lYWNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTAub3B0Lm5vTWF0Y2goa3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGt3QXJyW2t3QXJyTGVuIC0gMV0gPT09IGt3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMC5vcHQuZG9uZSh0b3RhbE1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyKGt3QXJyW2t3QXJyLmluZGV4T2Yoa3cpICsgMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0LmFjcm9zc0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZuID0gXCJ3cmFwTWF0Y2hlc0Fjcm9zc0VsZW1lbnRzXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrd0FyckxlbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdC5kb25lKHRvdGFsTWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihrd0FyclswXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwibWFya1Jhbmdlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1hcmtSYW5nZXMocmF3UmFuZ2VzLCBvcHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9wdCA9IG9wdDtcbiAgICAgICAgICAgICAgICB2YXIgdG90YWxNYXRjaGVzID0gMCxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzID0gdGhpcy5jaGVja1JhbmdlcyhyYXdSYW5nZXMpO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZXMgJiYgcmFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZyhcIlN0YXJ0aW5nIHRvIG1hcmsgd2l0aCB0aGUgZm9sbG93aW5nIHJhbmdlczogXCIgKyBKU09OLnN0cmluZ2lmeShyYW5nZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cmFwUmFuZ2VGcm9tSW5kZXgocmFuZ2VzLCBmdW5jdGlvbiAobm9kZSwgcmFuZ2UsIG1hdGNoLCBjb3VudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxMS5vcHQuZmlsdGVyKG5vZGUsIHJhbmdlLCBtYXRjaCwgY291bnRlcik7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlbGVtZW50LCByYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxNYXRjaGVzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczExLm9wdC5lYWNoKGVsZW1lbnQsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS5vcHQuZG9uZSh0b3RhbE1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdC5kb25lKHRvdGFsTWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwidW5tYXJrXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdW5tYXJrKG9wdCkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpczEyID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHRoaXMub3B0ID0gb3B0O1xuICAgICAgICAgICAgICAgIHZhciBzZWwgPSB0aGlzLm9wdC5lbGVtZW50ID8gdGhpcy5vcHQuZWxlbWVudCA6IFwiKlwiO1xuICAgICAgICAgICAgICAgIHNlbCArPSBcIltkYXRhLW1hcmtqc11cIjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHQuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbCArPSBcIi5cIiArIHRoaXMub3B0LmNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sb2coXCJSZW1vdmFsIHNlbGVjdG9yIFxcXCJcIiArIHNlbCArIFwiXFxcIlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZXJhdG9yLmZvckVhY2hOb2RlKE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5ULCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczEyLnVud3JhcE1hdGNoZXMobm9kZSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXNTZWwgPSBET01JdGVyYXRvci5tYXRjaGVzKG5vZGUsIHNlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzRXhjbHVkZSA9IF90aGlzMTIubWF0Y2hlc0V4Y2x1ZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlc1NlbCB8fCBtYXRjaGVzRXhjbHVkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB0aGlzLm9wdC5kb25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcIm9wdFwiLFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0ID0gX2V4dGVuZHMoe30sIHtcbiAgICAgICAgICAgICAgICAgICAgXCJlbGVtZW50XCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhjbHVkZVwiOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgXCJpZnJhbWVzXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcImlmcmFtZXNUaW1lb3V0XCI6IDUwMDAsXG4gICAgICAgICAgICAgICAgICAgIFwic2VwYXJhdGVXb3JkU2VhcmNoXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwiZGlhY3JpdGljc1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInN5bm9ueW1zXCI6IHt9LFxuICAgICAgICAgICAgICAgICAgICBcImFjY3VyYWN5XCI6IFwicGFydGlhbGx5XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWNyb3NzRWxlbWVudHNcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwiY2FzZVNlbnNpdGl2ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJpZ25vcmVKb2luZXJzXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcImlnbm9yZUdyb3Vwc1wiOiAwLFxuICAgICAgICAgICAgICAgICAgICBcImlnbm9yZVB1bmN0dWF0aW9uXCI6IFtdLFxuICAgICAgICAgICAgICAgICAgICBcIndpbGRjYXJkc1wiOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZWFjaFwiOiBmdW5jdGlvbiBlYWNoKCkge30sXG4gICAgICAgICAgICAgICAgICAgIFwibm9NYXRjaFwiOiBmdW5jdGlvbiBub01hdGNoKCkge30sXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsdGVyXCI6IGZ1bmN0aW9uIGZpbHRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImRvbmVcIjogZnVuY3Rpb24gZG9uZSgpIHt9LFxuICAgICAgICAgICAgICAgICAgICBcImRlYnVnXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcImxvZ1wiOiB3aW5kb3cuY29uc29sZVxuICAgICAgICAgICAgICAgIH0sIHZhbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcIml0ZXJhdG9yXCIsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERPTUl0ZXJhdG9yKHRoaXMuY3R4LCB0aGlzLm9wdC5pZnJhbWVzLCB0aGlzLm9wdC5leGNsdWRlLCB0aGlzLm9wdC5pZnJhbWVzVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcblxuICAgICAgICByZXR1cm4gTWFyaztcbiAgICB9KCk7XG5cbiAgICB2YXIgRE9NSXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIERPTUl0ZXJhdG9yKGN0eCkge1xuICAgICAgICAgICAgdmFyIGlmcmFtZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICAgICAgICB2YXIgZXhjbHVkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG4gICAgICAgICAgICB2YXIgaWZyYW1lc1RpbWVvdXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDUwMDA7XG5cbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBET01JdGVyYXRvcik7XG5cbiAgICAgICAgICAgIHRoaXMuY3R4ID0gY3R4O1xuXG4gICAgICAgICAgICB0aGlzLmlmcmFtZXMgPSBpZnJhbWVzO1xuXG4gICAgICAgICAgICB0aGlzLmV4Y2x1ZGUgPSBleGNsdWRlO1xuXG4gICAgICAgICAgICB0aGlzLmlmcmFtZXNUaW1lb3V0ID0gaWZyYW1lc1RpbWVvdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoRE9NSXRlcmF0b3IsIFt7XG4gICAgICAgICAgICBrZXk6IFwiZ2V0Q29udGV4dHNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb250ZXh0cygpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3R4ID0gdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEN0eCA9IFtdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jdHggPT09IFwidW5kZWZpbmVkXCIgfHwgIXRoaXMuY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IFtdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoTm9kZUxpc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YodGhpcy5jdHgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuY3R4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5jdHgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuY3R4ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5jdHgpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSBbdGhpcy5jdHhdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGN0eC5mb3JFYWNoKGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzRGVzY2VuZGFudCA9IGZpbHRlcmVkQ3R4LmZpbHRlcihmdW5jdGlvbiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0cy5jb250YWlucyhjdHgpO1xuICAgICAgICAgICAgICAgICAgICB9KS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRDdHguaW5kZXhPZihjdHgpID09PSAtMSAmJiAhaXNEZXNjZW5kYW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEN0eC5wdXNoKGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyZWRDdHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJnZXRJZnJhbWVDb250ZW50c1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldElmcmFtZUNvbnRlbnRzKGlmciwgc3VjY2Vzc0ZuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yRm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWZyV2luID0gaWZyLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgICAgICAgICAgICAgIGRvYyA9IGlmcldpbi5kb2N1bWVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZnJXaW4gfHwgIWRvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWZyYW1lIGluYWNjZXNzaWJsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JGbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NGbihkb2MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcImlzSWZyYW1lQmxhbmtcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0lmcmFtZUJsYW5rKGlmcikge1xuICAgICAgICAgICAgICAgIHZhciBibCA9IFwiYWJvdXQ6YmxhbmtcIixcbiAgICAgICAgICAgICAgICAgICAgc3JjID0gaWZyLmdldEF0dHJpYnV0ZShcInNyY1wiKS50cmltKCksXG4gICAgICAgICAgICAgICAgICAgIGhyZWYgPSBpZnIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgICAgIHJldHVybiBocmVmID09PSBibCAmJiBzcmMgIT09IGJsICYmIHNyYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcIm9ic2VydmVJZnJhbWVMb2FkXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb2JzZXJ2ZUlmcmFtZUxvYWQoaWZyLCBzdWNjZXNzRm4sIGVycm9yRm4pIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2FsbGVkID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRvdXQpO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpczEzLmlzSWZyYW1lQmxhbmsoaWZyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmci5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMy5nZXRJZnJhbWVDb250ZW50cyhpZnIsIHN1Y2Nlc3NGbiwgZXJyb3JGbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yRm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWZyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICB0b3V0ID0gc2V0VGltZW91dChsaXN0ZW5lciwgdGhpcy5pZnJhbWVzVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJvbklmcmFtZVJlYWR5XCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25JZnJhbWVSZWFkeShpZnIsIHN1Y2Nlc3NGbiwgZXJyb3JGbikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZnIuY29udGVudFdpbmRvdy5kb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSWZyYW1lQmxhbmsoaWZyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUlmcmFtZUxvYWQoaWZyLCBzdWNjZXNzRm4sIGVycm9yRm4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldElmcmFtZUNvbnRlbnRzKGlmciwgc3VjY2Vzc0ZuLCBlcnJvckZuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUlmcmFtZUxvYWQoaWZyLCBzdWNjZXNzRm4sIGVycm9yRm4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckZuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwid2FpdEZvcklmcmFtZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3YWl0Rm9ySWZyYW1lcyhjdHgsIGRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgZWFjaENhbGxlZCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JFYWNoSWZyYW1lKGN0eCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoaWZyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVhY2hDYWxsZWQrKztcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMxNC53YWl0Rm9ySWZyYW1lcyhpZnIucXVlcnlTZWxlY3RvcihcImh0bWxcIiksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIC0tZWFjaENhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcImZvckVhY2hJZnJhbWVcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JFYWNoSWZyYW1lKGN0eCwgZmlsdGVyLCBlYWNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzMTUgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZnVuY3Rpb24gKCkge307XG5cbiAgICAgICAgICAgICAgICB2YXIgaWZyID0gY3R4LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpZnJhbWVcIiksXG4gICAgICAgICAgICAgICAgICAgIG9wZW4gPSBpZnIubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVkID0gMDtcbiAgICAgICAgICAgICAgICBpZnIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpZnIpO1xuICAgICAgICAgICAgICAgIHZhciBjaGVja0VuZCA9IGZ1bmN0aW9uIGNoZWNrRW5kKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoLS1vcGVuIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZChoYW5kbGVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKCFvcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmci5mb3JFYWNoKGZ1bmN0aW9uIChpZnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKERPTUl0ZXJhdG9yLm1hdGNoZXMoaWZyLCBfdGhpczE1LmV4Y2x1ZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja0VuZCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxNS5vbklmcmFtZVJlYWR5KGlmciwgZnVuY3Rpb24gKGNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIoaWZyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2goY29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tFbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNoZWNrRW5kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiY3JlYXRlSXRlcmF0b3JcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVJdGVyYXRvcihjdHgsIHdoYXRUb1Nob3csIGZpbHRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3IoY3R4LCB3aGF0VG9TaG93LCBmaWx0ZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcImNyZWF0ZUluc3RhbmNlT25JZnJhbWVcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZU9uSWZyYW1lKGNvbnRlbnRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBET01JdGVyYXRvcihjb250ZW50cy5xdWVyeVNlbGVjdG9yKFwiaHRtbFwiKSwgdGhpcy5pZnJhbWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcImNvbXBhcmVOb2RlSWZyYW1lXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGFyZU5vZGVJZnJhbWUobm9kZSwgcHJldk5vZGUsIGlmcikge1xuICAgICAgICAgICAgICAgIHZhciBjb21wQ3VyciA9IG5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaWZyKSxcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HO1xuICAgICAgICAgICAgICAgIGlmIChjb21wQ3VyciAmIHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZOb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcFByZXYgPSBwcmV2Tm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpZnIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyID0gTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcFByZXYgJiBhZnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiZ2V0SXRlcmF0b3JOb2RlXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SXRlcmF0b3JOb2RlKGl0cikge1xuICAgICAgICAgICAgICAgIHZhciBwcmV2Tm9kZSA9IGl0ci5wcmV2aW91c05vZGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAocHJldk5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGl0ci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBpdHIubmV4dE5vZGUoKSAmJiBpdHIubmV4dE5vZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldk5vZGU6IHByZXZOb2RlLFxuICAgICAgICAgICAgICAgICAgICBub2RlOiBub2RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiBcImNoZWNrSWZyYW1lRmlsdGVyXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tJZnJhbWVGaWx0ZXIobm9kZSwgcHJldk5vZGUsIGN1cnJJZnIsIGlmcikge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmci5mb3JFYWNoKGZ1bmN0aW9uIChpZnJEaWN0LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZnJEaWN0LnZhbCA9PT0gY3Vycklmcikge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQgPSBpZnJEaWN0LmhhbmRsZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb21wYXJlTm9kZUlmcmFtZShub2RlLCBwcmV2Tm9kZSwgY3VycklmcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gZmFsc2UgJiYgIWhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw6IGN1cnJJZnIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ICE9PSBmYWxzZSAmJiAhaGFuZGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWZyW2tleV0uaGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbDogY3VycklmcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJoYW5kbGVPcGVuSWZyYW1lc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZU9wZW5JZnJhbWVzKGlmciwgd2hhdFRvU2hvdywgZUNiLCBmQ2IpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMxNiA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBpZnIuZm9yRWFjaChmdW5jdGlvbiAoaWZyRGljdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlmckRpY3QuaGFuZGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxNi5nZXRJZnJhbWVDb250ZW50cyhpZnJEaWN0LnZhbCwgZnVuY3Rpb24gKGNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTYuY3JlYXRlSW5zdGFuY2VPbklmcmFtZShjb24pLmZvckVhY2hOb2RlKHdoYXRUb1Nob3csIGVDYiwgZkNiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogXCJpdGVyYXRlVGhyb3VnaE5vZGVzXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXRlcmF0ZVRocm91Z2hOb2Rlcyh3aGF0VG9TaG93LCBjdHgsIGVhY2hDYiwgZmlsdGVyQ2IsIGRvbmVDYikge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpczE3ID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBpdHIgPSB0aGlzLmNyZWF0ZUl0ZXJhdG9yKGN0eCwgd2hhdFRvU2hvdywgZmlsdGVyQ2IpO1xuICAgICAgICAgICAgICAgIHZhciBpZnIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgcHJldk5vZGUgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgIHJldHJpZXZlTm9kZXMgPSBmdW5jdGlvbiByZXRyaWV2ZU5vZGVzKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2dldEl0ZXJhdG9yTm9kZSA9IF90aGlzMTcuZ2V0SXRlcmF0b3JOb2RlKGl0cik7XG5cbiAgICAgICAgICAgICAgICAgICAgcHJldk5vZGUgPSBfZ2V0SXRlcmF0b3JOb2RlLnByZXZOb2RlO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gX2dldEl0ZXJhdG9yTm9kZS5ub2RlO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJldHJpZXZlTm9kZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pZnJhbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvckVhY2hJZnJhbWUoY3R4LCBmdW5jdGlvbiAoY3Vycklmcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczE3LmNoZWNrSWZyYW1lRmlsdGVyKG5vZGUsIHByZXZOb2RlLCBjdXJySWZyLCBpZnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMTcuY3JlYXRlSW5zdGFuY2VPbklmcmFtZShjb24pLmZvckVhY2hOb2RlKHdoYXRUb1Nob3csIGZ1bmN0aW9uIChpZnJOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50cy5wdXNoKGlmck5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZpbHRlckNiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBlYWNoQ2Iobm9kZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaWZyYW1lcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU9wZW5JZnJhbWVzKGlmciwgd2hhdFRvU2hvdywgZWFjaENiLCBmaWx0ZXJDYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvbmVDYigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6IFwiZm9yRWFjaE5vZGVcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JFYWNoTm9kZSh3aGF0VG9TaG93LCBlYWNoLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMxOCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgZG9uZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZnVuY3Rpb24gKCkge307XG5cbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmdldENvbnRleHRzKCk7XG4gICAgICAgICAgICAgICAgdmFyIG9wZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKCFvcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dHMuZm9yRWFjaChmdW5jdGlvbiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWFkeSA9IGZ1bmN0aW9uIHJlYWR5KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxOC5pdGVyYXRlVGhyb3VnaE5vZGVzKHdoYXRUb1Nob3csIGN0eCwgZWFjaCwgZmlsdGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0tb3BlbiA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMxOC5pZnJhbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczE4LndhaXRGb3JJZnJhbWVzKGN0eCwgcmVhZHkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSwgW3tcbiAgICAgICAgICAgIGtleTogXCJtYXRjaGVzXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvcnMgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgICAgIGZuID0gZWxlbWVudC5tYXRjaGVzIHx8IGVsZW1lbnQubWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xuICAgICAgICAgICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzLmV2ZXJ5KGZ1bmN0aW9uIChzZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbi5jYWxsKGVsZW1lbnQsIHNlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBET01JdGVyYXRvcjtcbiAgICB9KCk7XG5cbiAgICB3aW5kb3cuTWFyayA9IGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgICAgdmFyIF90aGlzMTkgPSB0aGlzO1xuXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBNYXJrKGN0eCk7XG4gICAgICAgIHRoaXMubWFyayA9IGZ1bmN0aW9uIChzdiwgb3B0KSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5tYXJrKHN2LCBvcHQpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMTk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWFya1JlZ0V4cCA9IGZ1bmN0aW9uIChzdiwgb3B0KSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5tYXJrUmVnRXhwKHN2LCBvcHQpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMTk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWFya1JhbmdlcyA9IGZ1bmN0aW9uIChzdiwgb3B0KSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5tYXJrUmFuZ2VzKHN2LCBvcHQpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMTk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudW5tYXJrID0gZnVuY3Rpb24gKG9wdCkge1xuICAgICAgICAgICAgaW5zdGFuY2UudW5tYXJrKG9wdCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMxOTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIHJldHVybiB3aW5kb3cuTWFyaztcbn0sIHdpbmRvdywgZG9jdW1lbnQpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4oZnVuY3Rpb24gKCQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHRhZ0NsYXNzOiBmdW5jdGlvbiB0YWdDbGFzcyhpdGVtKSB7XG4gICAgICByZXR1cm4gJ2xhYmVsIGxhYmVsLWluZm8nO1xuICAgIH0sXG4gICAgaXRlbVZhbHVlOiBmdW5jdGlvbiBpdGVtVmFsdWUoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0gPyBpdGVtLnRvU3RyaW5nKCkgOiBpdGVtO1xuICAgIH0sXG4gICAgaXRlbVRleHQ6IGZ1bmN0aW9uIGl0ZW1UZXh0KGl0ZW0pIHtcbiAgICAgIHJldHVybiB0aGlzLml0ZW1WYWx1ZShpdGVtKTtcbiAgICB9LFxuICAgIGl0ZW1UaXRsZTogZnVuY3Rpb24gaXRlbVRpdGxlKGl0ZW0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgZnJlZUlucHV0OiB0cnVlLFxuICAgIGFkZE9uQmx1cjogdHJ1ZSxcbiAgICBtYXhUYWdzOiB1bmRlZmluZWQsXG4gICAgbWF4Q2hhcnM6IHVuZGVmaW5lZCxcbiAgICBjb25maXJtS2V5czogWzEzLCA0NF0sXG4gICAgZGVsaW1pdGVyOiAnLCcsXG4gICAgZGVsaW1pdGVyUmVnZXg6IG51bGwsXG4gICAgY2FuY2VsQ29uZmlybUtleXNPbkVtcHR5OiB0cnVlLFxuICAgIG9uVGFnRXhpc3RzOiBmdW5jdGlvbiBvblRhZ0V4aXN0cyhpdGVtLCAkdGFnKSB7XG4gICAgICAkdGFnLmhpZGUoKS5mYWRlSW4oKTtcbiAgICB9LFxuICAgIHRyaW1WYWx1ZTogZmFsc2UsXG4gICAgYWxsb3dEdXBsaWNhdGVzOiBmYWxzZVxuICB9O1xuXG4gIGZ1bmN0aW9uIFRhZ3NJbnB1dChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5pdGVtc0FycmF5ID0gW107XG5cbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLiRlbGVtZW50LmhpZGUoKTtcblxuICAgIHRoaXMuaXNTZWxlY3QgPSBlbGVtZW50LnRhZ05hbWUgPT09ICdTRUxFQ1QnO1xuICAgIHRoaXMubXVsdGlwbGUgPSB0aGlzLmlzU2VsZWN0ICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdtdWx0aXBsZScpO1xuICAgIHRoaXMub2JqZWN0SXRlbXMgPSBvcHRpb25zICYmIG9wdGlvbnMuaXRlbVZhbHVlO1xuICAgIHRoaXMucGxhY2Vob2xkZXJUZXh0ID0gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJykgPyB0aGlzLiRlbGVtZW50LmF0dHIoJ3BsYWNlaG9sZGVyJykgOiAnJztcbiAgICB0aGlzLmlucHV0U2l6ZSA9IE1hdGgubWF4KDEsIHRoaXMucGxhY2Vob2xkZXJUZXh0Lmxlbmd0aCk7XG5cbiAgICB0aGlzLiRjb250YWluZXIgPSAkKCc8ZGl2IGNsYXNzPVwiYm9vdHN0cmFwLXRhZ3NpbnB1dFwiPjwvZGl2PicpO1xuICAgIHRoaXMuJGlucHV0ID0gJCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCInICsgdGhpcy5wbGFjZWhvbGRlclRleHQgKyAnXCIvPicpLmFwcGVuZFRvKHRoaXMuJGNvbnRhaW5lcik7XG5cbiAgICB0aGlzLiRlbGVtZW50LmJlZm9yZSh0aGlzLiRjb250YWluZXIpO1xuXG4gICAgdGhpcy5idWlsZChvcHRpb25zKTtcbiAgfVxuXG4gIFRhZ3NJbnB1dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFRhZ3NJbnB1dCxcblxuICAgIGFkZDogZnVuY3Rpb24gYWRkKGl0ZW0sIGRvbnRQdXNoVmFsLCBvcHRpb25zKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGlmIChzZWxmLm9wdGlvbnMubWF4VGFncyAmJiBzZWxmLml0ZW1zQXJyYXkubGVuZ3RoID49IHNlbGYub3B0aW9ucy5tYXhUYWdzKSByZXR1cm47XG5cbiAgICAgIGlmIChpdGVtICE9PSBmYWxzZSAmJiAhaXRlbSkgcmV0dXJuO1xuXG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIgJiYgc2VsZi5vcHRpb25zLnRyaW1WYWx1ZSkge1xuICAgICAgICBpdGVtID0gJC50cmltKGl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHR5cGVvZiBpdGVtID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpdGVtKSkgPT09IFwib2JqZWN0XCIgJiYgIXNlbGYub2JqZWN0SXRlbXMpIHRocm93IFwiQ2FuJ3QgYWRkIG9iamVjdHMgd2hlbiBpdGVtVmFsdWUgb3B0aW9uIGlzIG5vdCBzZXRcIjtcblxuICAgICAgaWYgKGl0ZW0udG9TdHJpbmcoKS5tYXRjaCgvXlxccyokLykpIHJldHVybjtcblxuICAgICAgaWYgKHNlbGYuaXNTZWxlY3QgJiYgIXNlbGYubXVsdGlwbGUgJiYgc2VsZi5pdGVtc0FycmF5Lmxlbmd0aCA+IDApIHNlbGYucmVtb3ZlKHNlbGYuaXRlbXNBcnJheVswXSk7XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIiAmJiB0aGlzLiRlbGVtZW50WzBdLnRhZ05hbWUgPT09ICdJTlBVVCcpIHtcbiAgICAgICAgdmFyIGRlbGltaXRlciA9IHNlbGYub3B0aW9ucy5kZWxpbWl0ZXJSZWdleCA/IHNlbGYub3B0aW9ucy5kZWxpbWl0ZXJSZWdleCA6IHNlbGYub3B0aW9ucy5kZWxpbWl0ZXI7XG4gICAgICAgIHZhciBpdGVtcyA9IGl0ZW0uc3BsaXQoZGVsaW1pdGVyKTtcbiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChpdGVtc1tpXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFkb250UHVzaFZhbCkgc2VsZi5wdXNoVmFsKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtVmFsdWUgPSBzZWxmLm9wdGlvbnMuaXRlbVZhbHVlKGl0ZW0pLFxuICAgICAgICAgIGl0ZW1UZXh0ID0gc2VsZi5vcHRpb25zLml0ZW1UZXh0KGl0ZW0pLFxuICAgICAgICAgIHRhZ0NsYXNzID0gc2VsZi5vcHRpb25zLnRhZ0NsYXNzKGl0ZW0pLFxuICAgICAgICAgIGl0ZW1UaXRsZSA9IHNlbGYub3B0aW9ucy5pdGVtVGl0bGUoaXRlbSk7XG5cbiAgICAgIHZhciBleGlzdGluZyA9ICQuZ3JlcChzZWxmLml0ZW1zQXJyYXksIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBzZWxmLm9wdGlvbnMuaXRlbVZhbHVlKGl0ZW0pID09PSBpdGVtVmFsdWU7XG4gICAgICB9KVswXTtcbiAgICAgIGlmIChleGlzdGluZyAmJiAhc2VsZi5vcHRpb25zLmFsbG93RHVwbGljYXRlcykge1xuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm9uVGFnRXhpc3RzKSB7XG4gICAgICAgICAgdmFyICRleGlzdGluZ1RhZyA9ICQoXCIudGFnXCIsIHNlbGYuJGNvbnRhaW5lcikuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLmRhdGEoXCJpdGVtXCIpID09PSBleGlzdGluZztcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZWxmLm9wdGlvbnMub25UYWdFeGlzdHMoaXRlbSwgJGV4aXN0aW5nVGFnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLml0ZW1zKCkudG9TdHJpbmcoKS5sZW5ndGggKyBpdGVtLmxlbmd0aCArIDEgPiBzZWxmLm9wdGlvbnMubWF4SW5wdXRMZW5ndGgpIHJldHVybjtcblxuICAgICAgdmFyIGJlZm9yZUl0ZW1BZGRFdmVudCA9ICQuRXZlbnQoJ2JlZm9yZUl0ZW1BZGQnLCB7IGl0ZW06IGl0ZW0sIGNhbmNlbDogZmFsc2UsIG9wdGlvbnM6IG9wdGlvbnMgfSk7XG4gICAgICBzZWxmLiRlbGVtZW50LnRyaWdnZXIoYmVmb3JlSXRlbUFkZEV2ZW50KTtcbiAgICAgIGlmIChiZWZvcmVJdGVtQWRkRXZlbnQuY2FuY2VsKSByZXR1cm47XG5cbiAgICAgIHNlbGYuaXRlbXNBcnJheS5wdXNoKGl0ZW0pO1xuXG5cbiAgICAgIHZhciAkdGFnID0gJCgnPHNwYW4gY2xhc3M9XCJ0YWcgJyArIGh0bWxFbmNvZGUodGFnQ2xhc3MpICsgKGl0ZW1UaXRsZSAhPT0gbnVsbCA/ICdcIiB0aXRsZT1cIicgKyBpdGVtVGl0bGUgOiAnJykgKyAnXCI+JyArIGh0bWxFbmNvZGUoaXRlbVRleHQpICsgJzxzcGFuIGRhdGEtcm9sZT1cInJlbW92ZVwiPjwvc3Bhbj48L3NwYW4+Jyk7XG4gICAgICAkdGFnLmRhdGEoJ2l0ZW0nLCBpdGVtKTtcbiAgICAgIHNlbGYuZmluZElucHV0V3JhcHBlcigpLmJlZm9yZSgkdGFnKTtcbiAgICAgICR0YWcuYWZ0ZXIoJyAnKTtcblxuICAgICAgaWYgKHNlbGYuaXNTZWxlY3QgJiYgISQoJ29wdGlvblt2YWx1ZT1cIicgKyBlbmNvZGVVUklDb21wb25lbnQoaXRlbVZhbHVlKSArICdcIl0nLCBzZWxmLiRlbGVtZW50KVswXSkge1xuICAgICAgICB2YXIgJG9wdGlvbiA9ICQoJzxvcHRpb24gc2VsZWN0ZWQ+JyArIGh0bWxFbmNvZGUoaXRlbVRleHQpICsgJzwvb3B0aW9uPicpO1xuICAgICAgICAkb3B0aW9uLmRhdGEoJ2l0ZW0nLCBpdGVtKTtcbiAgICAgICAgJG9wdGlvbi5hdHRyKCd2YWx1ZScsIGl0ZW1WYWx1ZSk7XG4gICAgICAgIHNlbGYuJGVsZW1lbnQuYXBwZW5kKCRvcHRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRvbnRQdXNoVmFsKSBzZWxmLnB1c2hWYWwoKTtcblxuICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXhUYWdzID09PSBzZWxmLml0ZW1zQXJyYXkubGVuZ3RoIHx8IHNlbGYuaXRlbXMoKS50b1N0cmluZygpLmxlbmd0aCA9PT0gc2VsZi5vcHRpb25zLm1heElucHV0TGVuZ3RoKSBzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoJ2Jvb3RzdHJhcC10YWdzaW5wdXQtbWF4Jyk7XG5cbiAgICAgIHNlbGYuJGVsZW1lbnQudHJpZ2dlcigkLkV2ZW50KCdpdGVtQWRkZWQnLCB7IGl0ZW06IGl0ZW0sIG9wdGlvbnM6IG9wdGlvbnMgfSkpO1xuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShpdGVtLCBkb250UHVzaFZhbCwgb3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAoc2VsZi5vYmplY3RJdGVtcykge1xuICAgICAgICBpZiAoKHR5cGVvZiBpdGVtID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpdGVtKSkgPT09IFwib2JqZWN0XCIpIGl0ZW0gPSAkLmdyZXAoc2VsZi5pdGVtc0FycmF5LCBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5vcHRpb25zLml0ZW1WYWx1ZShvdGhlcikgPT0gc2VsZi5vcHRpb25zLml0ZW1WYWx1ZShpdGVtKTtcbiAgICAgICAgfSk7ZWxzZSBpdGVtID0gJC5ncmVwKHNlbGYuaXRlbXNBcnJheSwgZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYub3B0aW9ucy5pdGVtVmFsdWUob3RoZXIpID09IGl0ZW07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0ZW0gPSBpdGVtW2l0ZW0ubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIHZhciBiZWZvcmVJdGVtUmVtb3ZlRXZlbnQgPSAkLkV2ZW50KCdiZWZvcmVJdGVtUmVtb3ZlJywgeyBpdGVtOiBpdGVtLCBjYW5jZWw6IGZhbHNlLCBvcHRpb25zOiBvcHRpb25zIH0pO1xuICAgICAgICBzZWxmLiRlbGVtZW50LnRyaWdnZXIoYmVmb3JlSXRlbVJlbW92ZUV2ZW50KTtcbiAgICAgICAgaWYgKGJlZm9yZUl0ZW1SZW1vdmVFdmVudC5jYW5jZWwpIHJldHVybjtcblxuICAgICAgICAkKCcudGFnJywgc2VsZi4kY29udGFpbmVyKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAkKHRoaXMpLmRhdGEoJ2l0ZW0nKSA9PT0gaXRlbTtcbiAgICAgICAgfSkucmVtb3ZlKCk7XG4gICAgICAgICQoJ29wdGlvbicsIHNlbGYuJGVsZW1lbnQpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuICQodGhpcykuZGF0YSgnaXRlbScpID09PSBpdGVtO1xuICAgICAgICB9KS5yZW1vdmUoKTtcbiAgICAgICAgaWYgKCQuaW5BcnJheShpdGVtLCBzZWxmLml0ZW1zQXJyYXkpICE9PSAtMSkgc2VsZi5pdGVtc0FycmF5LnNwbGljZSgkLmluQXJyYXkoaXRlbSwgc2VsZi5pdGVtc0FycmF5KSwgMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZG9udFB1c2hWYWwpIHNlbGYucHVzaFZhbCgpO1xuXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLm1heFRhZ3MgPiBzZWxmLml0ZW1zQXJyYXkubGVuZ3RoKSBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ2Jvb3RzdHJhcC10YWdzaW5wdXQtbWF4Jyk7XG5cbiAgICAgIHNlbGYuJGVsZW1lbnQudHJpZ2dlcigkLkV2ZW50KCdpdGVtUmVtb3ZlZCcsIHsgaXRlbTogaXRlbSwgb3B0aW9uczogb3B0aW9ucyB9KSk7XG4gICAgfSxcblxuICAgIHJlbW92ZUFsbDogZnVuY3Rpb24gcmVtb3ZlQWxsKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAkKCcudGFnJywgc2VsZi4kY29udGFpbmVyKS5yZW1vdmUoKTtcbiAgICAgICQoJ29wdGlvbicsIHNlbGYuJGVsZW1lbnQpLnJlbW92ZSgpO1xuXG4gICAgICB3aGlsZSAoc2VsZi5pdGVtc0FycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2VsZi5pdGVtc0FycmF5LnBvcCgpO1xuICAgICAgfXNlbGYucHVzaFZhbCgpO1xuICAgIH0sXG5cbiAgICByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgJCgnLnRhZycsIHNlbGYuJGNvbnRhaW5lcikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGFnID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGl0ZW0gPSAkdGFnLmRhdGEoJ2l0ZW0nKSxcbiAgICAgICAgICAgIGl0ZW1WYWx1ZSA9IHNlbGYub3B0aW9ucy5pdGVtVmFsdWUoaXRlbSksXG4gICAgICAgICAgICBpdGVtVGV4dCA9IHNlbGYub3B0aW9ucy5pdGVtVGV4dChpdGVtKSxcbiAgICAgICAgICAgIHRhZ0NsYXNzID0gc2VsZi5vcHRpb25zLnRhZ0NsYXNzKGl0ZW0pO1xuXG4gICAgICAgICR0YWcuYXR0cignY2xhc3MnLCBudWxsKTtcbiAgICAgICAgJHRhZy5hZGRDbGFzcygndGFnICcgKyBodG1sRW5jb2RlKHRhZ0NsYXNzKSk7XG4gICAgICAgICR0YWcuY29udGVudHMoKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm5vZGVUeXBlID09IDM7XG4gICAgICAgIH0pWzBdLm5vZGVWYWx1ZSA9IGh0bWxFbmNvZGUoaXRlbVRleHQpO1xuXG4gICAgICAgIGlmIChzZWxmLmlzU2VsZWN0KSB7XG4gICAgICAgICAgdmFyIG9wdGlvbiA9ICQoJ29wdGlvbicsIHNlbGYuJGVsZW1lbnQpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCdpdGVtJykgPT09IGl0ZW07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb3B0aW9uLmF0dHIoJ3ZhbHVlJywgaXRlbVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGl0ZW1zOiBmdW5jdGlvbiBpdGVtcygpIHtcbiAgICAgIHJldHVybiB0aGlzLml0ZW1zQXJyYXk7XG4gICAgfSxcblxuICAgIHB1c2hWYWw6IGZ1bmN0aW9uIHB1c2hWYWwoKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgdmFsID0gJC5tYXAoc2VsZi5pdGVtcygpLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gc2VsZi5vcHRpb25zLml0ZW1WYWx1ZShpdGVtKS50b1N0cmluZygpO1xuICAgICAgfSk7XG5cbiAgICAgIHNlbGYuJGVsZW1lbnQudmFsKHZhbCwgdHJ1ZSkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfSxcblxuICAgIGJ1aWxkOiBmdW5jdGlvbiBidWlsZChvcHRpb25zKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHNlbGYub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICBpZiAoc2VsZi5vYmplY3RJdGVtcykgc2VsZi5vcHRpb25zLmZyZWVJbnB1dCA9IGZhbHNlO1xuXG4gICAgICBtYWtlT3B0aW9uSXRlbUZ1bmN0aW9uKHNlbGYub3B0aW9ucywgJ2l0ZW1WYWx1ZScpO1xuICAgICAgbWFrZU9wdGlvbkl0ZW1GdW5jdGlvbihzZWxmLm9wdGlvbnMsICdpdGVtVGV4dCcpO1xuICAgICAgbWFrZU9wdGlvbkZ1bmN0aW9uKHNlbGYub3B0aW9ucywgJ3RhZ0NsYXNzJyk7XG5cbiAgICAgIGlmIChzZWxmLm9wdGlvbnMudHlwZWFoZWFkKSB7XG4gICAgICAgIHZhciB0eXBlYWhlYWQgPSBzZWxmLm9wdGlvbnMudHlwZWFoZWFkIHx8IHt9O1xuXG4gICAgICAgIG1ha2VPcHRpb25GdW5jdGlvbih0eXBlYWhlYWQsICdzb3VyY2UnKTtcblxuICAgICAgICBzZWxmLiRpbnB1dC50eXBlYWhlYWQoJC5leHRlbmQoe30sIHR5cGVhaGVhZCwge1xuICAgICAgICAgIHNvdXJjZTogZnVuY3Rpb24gc291cmNlKHF1ZXJ5LCBwcm9jZXNzKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBwcm9jZXNzSXRlbXMoaXRlbXMpIHtcbiAgICAgICAgICAgICAgdmFyIHRleHRzID0gW107XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gc2VsZi5vcHRpb25zLml0ZW1UZXh0KGl0ZW1zW2ldKTtcbiAgICAgICAgICAgICAgICBtYXBbdGV4dF0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICB0ZXh0cy5wdXNoKHRleHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHByb2Nlc3ModGV4dHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1hcCA9IHt9O1xuICAgICAgICAgICAgdmFyIG1hcCA9IHRoaXMubWFwLFxuICAgICAgICAgICAgICAgIGRhdGEgPSB0eXBlYWhlYWQuc291cmNlKHF1ZXJ5KTtcblxuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihkYXRhLnN1Y2Nlc3MpKSB7XG4gICAgICAgICAgICAgIGRhdGEuc3VjY2Vzcyhwcm9jZXNzSXRlbXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkLmlzRnVuY3Rpb24oZGF0YS50aGVuKSkge1xuICAgICAgICAgICAgICBkYXRhLnRoZW4ocHJvY2Vzc0l0ZW1zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICQud2hlbihkYXRhKS50aGVuKHByb2Nlc3NJdGVtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB1cGRhdGVyOiBmdW5jdGlvbiB1cGRhdGVyKHRleHQpIHtcbiAgICAgICAgICAgIHNlbGYuYWRkKHRoaXMubWFwW3RleHRdKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcFt0ZXh0XTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hdGNoZXI6IGZ1bmN0aW9uIG1hdGNoZXIodGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRoaXMucXVlcnkudHJpbSgpLnRvTG93ZXJDYXNlKCkpICE9PSAtMTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNvcnRlcjogZnVuY3Rpb24gc29ydGVyKHRleHRzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dHMuc29ydCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaGlnaGxpZ2h0ZXI6IGZ1bmN0aW9uIGhpZ2hsaWdodGVyKHRleHQpIHtcbiAgICAgICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJygnICsgdGhpcy5xdWVyeSArICcpJywgJ2dpJyk7XG4gICAgICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHJlZ2V4LCBcIjxzdHJvbmc+JDE8L3N0cm9uZz5cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLm9wdGlvbnMudHlwZWFoZWFkanMpIHtcbiAgICAgICAgdmFyIHR5cGVhaGVhZENvbmZpZyA9IG51bGw7XG4gICAgICAgIHZhciB0eXBlYWhlYWREYXRhc2V0cyA9IHt9O1xuXG4gICAgICAgIHZhciB0eXBlYWhlYWRqcyA9IHNlbGYub3B0aW9ucy50eXBlYWhlYWRqcztcbiAgICAgICAgaWYgKCQuaXNBcnJheSh0eXBlYWhlYWRqcykpIHtcbiAgICAgICAgICB0eXBlYWhlYWRDb25maWcgPSB0eXBlYWhlYWRqc1swXTtcbiAgICAgICAgICB0eXBlYWhlYWREYXRhc2V0cyA9IHR5cGVhaGVhZGpzWzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHR5cGVhaGVhZERhdGFzZXRzID0gdHlwZWFoZWFkanM7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLiRpbnB1dC50eXBlYWhlYWQodHlwZWFoZWFkQ29uZmlnLCB0eXBlYWhlYWREYXRhc2V0cykub24oJ3R5cGVhaGVhZDpzZWxlY3RlZCcsICQucHJveHkoZnVuY3Rpb24gKG9iaiwgZGF0dW0pIHtcbiAgICAgICAgICBpZiAodHlwZWFoZWFkRGF0YXNldHMudmFsdWVLZXkpIHNlbGYuYWRkKGRhdHVtW3R5cGVhaGVhZERhdGFzZXRzLnZhbHVlS2V5XSk7ZWxzZSBzZWxmLmFkZChkYXR1bSk7XG4gICAgICAgICAgc2VsZi4kaW5wdXQudHlwZWFoZWFkKCd2YWwnLCAnJyk7XG4gICAgICAgIH0sIHNlbGYpKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi4kY29udGFpbmVyLm9uKCdjbGljaycsICQucHJveHkoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghc2VsZi4kZWxlbWVudC5hdHRyKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgc2VsZi4kaW5wdXQucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLiRpbnB1dC5mb2N1cygpO1xuICAgICAgfSwgc2VsZikpO1xuXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLmFkZE9uQmx1ciAmJiBzZWxmLm9wdGlvbnMuZnJlZUlucHV0KSB7XG4gICAgICAgIHNlbGYuJGlucHV0Lm9uKCdmb2N1c291dCcsICQucHJveHkoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKCQoJy50eXBlYWhlYWQsIC50d2l0dGVyLXR5cGVhaGVhZCcsIHNlbGYuJGNvbnRhaW5lcikubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzZWxmLmFkZChzZWxmLiRpbnB1dC52YWwoKSk7XG4gICAgICAgICAgICBzZWxmLiRpbnB1dC52YWwoJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgc2VsZikpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLiRjb250YWluZXIub24oJ2tleWRvd24nLCAnaW5wdXQnLCAkLnByb3h5KGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgJGlucHV0ID0gJChldmVudC50YXJnZXQpLFxuICAgICAgICAgICAgJGlucHV0V3JhcHBlciA9IHNlbGYuZmluZElucHV0V3JhcHBlcigpO1xuXG4gICAgICAgIGlmIChzZWxmLiRlbGVtZW50LmF0dHIoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICBzZWxmLiRpbnB1dC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcbiAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICBpZiAoZG9HZXRDYXJldFBvc2l0aW9uKCRpbnB1dFswXSkgPT09IDApIHtcbiAgICAgICAgICAgICAgdmFyIHByZXYgPSAkaW5wdXRXcmFwcGVyLnByZXYoKTtcbiAgICAgICAgICAgICAgaWYgKHByZXYubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5yZW1vdmUocHJldi5kYXRhKCdpdGVtJykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgNDY6XG4gICAgICAgICAgICBpZiAoZG9HZXRDYXJldFBvc2l0aW9uKCRpbnB1dFswXSkgPT09IDApIHtcbiAgICAgICAgICAgICAgdmFyIG5leHQgPSAkaW5wdXRXcmFwcGVyLm5leHQoKTtcbiAgICAgICAgICAgICAgaWYgKG5leHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5yZW1vdmUobmV4dC5kYXRhKCdpdGVtJykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICB2YXIgJHByZXZUYWcgPSAkaW5wdXRXcmFwcGVyLnByZXYoKTtcbiAgICAgICAgICAgIGlmICgkaW5wdXQudmFsKCkubGVuZ3RoID09PSAwICYmICRwcmV2VGFnWzBdKSB7XG4gICAgICAgICAgICAgICRwcmV2VGFnLmJlZm9yZSgkaW5wdXRXcmFwcGVyKTtcbiAgICAgICAgICAgICAgJGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgdmFyICRuZXh0VGFnID0gJGlucHV0V3JhcHBlci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoJGlucHV0LnZhbCgpLmxlbmd0aCA9PT0gMCAmJiAkbmV4dFRhZ1swXSkge1xuICAgICAgICAgICAgICAkbmV4dFRhZy5hZnRlcigkaW5wdXRXcmFwcGVyKTtcbiAgICAgICAgICAgICAgJGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRleHRMZW5ndGggPSAkaW5wdXQudmFsKCkubGVuZ3RoLFxuICAgICAgICAgICAgd29yZFNwYWNlID0gTWF0aC5jZWlsKHRleHRMZW5ndGggLyA1KSxcbiAgICAgICAgICAgIHNpemUgPSB0ZXh0TGVuZ3RoICsgd29yZFNwYWNlICsgMTtcbiAgICAgICAgJGlucHV0LmF0dHIoJ3NpemUnLCBNYXRoLm1heCh0aGlzLmlucHV0U2l6ZSwgJGlucHV0LnZhbCgpLmxlbmd0aCkpO1xuICAgICAgfSwgc2VsZikpO1xuXG4gICAgICBzZWxmLiRjb250YWluZXIub24oJ2tleXByZXNzJywgJ2lucHV0JywgJC5wcm94eShmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyICRpbnB1dCA9ICQoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgICBpZiAoc2VsZi4kZWxlbWVudC5hdHRyKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgc2VsZi4kaW5wdXQuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGV4dCA9ICRpbnB1dC52YWwoKSxcbiAgICAgICAgICAgIG1heExlbmd0aFJlYWNoZWQgPSBzZWxmLm9wdGlvbnMubWF4Q2hhcnMgJiYgdGV4dC5sZW5ndGggPj0gc2VsZi5vcHRpb25zLm1heENoYXJzO1xuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmZyZWVJbnB1dCAmJiAoa2V5Q29tYmluYXRpb25Jbkxpc3QoZXZlbnQsIHNlbGYub3B0aW9ucy5jb25maXJtS2V5cykgfHwgbWF4TGVuZ3RoUmVhY2hlZCkpIHtcbiAgICAgICAgICBpZiAodGV4dC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHNlbGYuYWRkKG1heExlbmd0aFJlYWNoZWQgPyB0ZXh0LnN1YnN0cigwLCBzZWxmLm9wdGlvbnMubWF4Q2hhcnMpIDogdGV4dCk7XG4gICAgICAgICAgICAkaW5wdXQudmFsKCcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmNhbmNlbENvbmZpcm1LZXlzT25FbXB0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRleHRMZW5ndGggPSAkaW5wdXQudmFsKCkubGVuZ3RoLFxuICAgICAgICAgICAgd29yZFNwYWNlID0gTWF0aC5jZWlsKHRleHRMZW5ndGggLyA1KSxcbiAgICAgICAgICAgIHNpemUgPSB0ZXh0TGVuZ3RoICsgd29yZFNwYWNlICsgMTtcbiAgICAgICAgJGlucHV0LmF0dHIoJ3NpemUnLCBNYXRoLm1heCh0aGlzLmlucHV0U2l6ZSwgJGlucHV0LnZhbCgpLmxlbmd0aCkpO1xuICAgICAgfSwgc2VsZikpO1xuXG4gICAgICBzZWxmLiRjb250YWluZXIub24oJ2NsaWNrJywgJ1tkYXRhLXJvbGU9cmVtb3ZlXScsICQucHJveHkoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChzZWxmLiRlbGVtZW50LmF0dHIoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5yZW1vdmUoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy50YWcnKS5kYXRhKCdpdGVtJykpO1xuICAgICAgfSwgc2VsZikpO1xuXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLml0ZW1WYWx1ZSA9PT0gZGVmYXVsdE9wdGlvbnMuaXRlbVZhbHVlKSB7XG4gICAgICAgIGlmIChzZWxmLiRlbGVtZW50WzBdLnRhZ05hbWUgPT09ICdJTlBVVCcpIHtcbiAgICAgICAgICBzZWxmLmFkZChzZWxmLiRlbGVtZW50LnZhbCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKCdvcHRpb24nLCBzZWxmLiRlbGVtZW50KS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYuYWRkKCQodGhpcykuYXR0cigndmFsdWUnKSwgdHJ1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgc2VsZi4kY29udGFpbmVyLm9mZigna2V5cHJlc3MnLCAnaW5wdXQnKTtcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5vZmYoJ2NsaWNrJywgJ1tyb2xlPXJlbW92ZV0nKTtcblxuICAgICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgc2VsZi4kZWxlbWVudC5yZW1vdmVEYXRhKCd0YWdzaW5wdXQnKTtcbiAgICAgIHNlbGYuJGVsZW1lbnQuc2hvdygpO1xuICAgIH0sXG5cbiAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICB0aGlzLiRpbnB1dC5mb2N1cygpO1xuICAgIH0sXG5cbiAgICBpbnB1dDogZnVuY3Rpb24gaW5wdXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kaW5wdXQ7XG4gICAgfSxcblxuICAgIGZpbmRJbnB1dFdyYXBwZXI6IGZ1bmN0aW9uIGZpbmRJbnB1dFdyYXBwZXIoKSB7XG4gICAgICB2YXIgZWx0ID0gdGhpcy4kaW5wdXRbMF0sXG4gICAgICAgICAgY29udGFpbmVyID0gdGhpcy4kY29udGFpbmVyWzBdO1xuICAgICAgd2hpbGUgKGVsdCAmJiBlbHQucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgIGVsdCA9IGVsdC5wYXJlbnROb2RlO1xuICAgICAgfXJldHVybiAkKGVsdCk7XG4gICAgfVxuICB9O1xuXG4gICQuZm4udGFnc2lucHV0ID0gZnVuY3Rpb24gKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0YWdzaW5wdXQgPSAkKHRoaXMpLmRhdGEoJ3RhZ3NpbnB1dCcpO1xuICAgICAgaWYgKCF0YWdzaW5wdXQpIHtcbiAgICAgICAgdGFnc2lucHV0ID0gbmV3IFRhZ3NJbnB1dCh0aGlzLCBhcmcxKTtcbiAgICAgICAgJCh0aGlzKS5kYXRhKCd0YWdzaW5wdXQnLCB0YWdzaW5wdXQpO1xuICAgICAgICByZXN1bHRzLnB1c2godGFnc2lucHV0KTtcblxuICAgICAgICBpZiAodGhpcy50YWdOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgICAgICQoJ29wdGlvbicsICQodGhpcykpLmF0dHIoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMpLnZhbCgkKHRoaXMpLnZhbCgpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWFyZzEgJiYgIWFyZzIpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHRhZ3NpbnB1dCk7XG4gICAgICB9IGVsc2UgaWYgKHRhZ3NpbnB1dFthcmcxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0YWdzaW5wdXRbYXJnMV0ubGVuZ3RoID09PSAzICYmIGFyZzMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciByZXRWYWwgPSB0YWdzaW5wdXRbYXJnMV0oYXJnMiwgbnVsbCwgYXJnMyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHJldFZhbCA9IHRhZ3NpbnB1dFthcmcxXShhcmcyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0VmFsICE9PSB1bmRlZmluZWQpIHJlc3VsdHMucHVzaChyZXRWYWwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBhcmcxID09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPiAxID8gcmVzdWx0cyA6IHJlc3VsdHNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgfTtcblxuICAkLmZuLnRhZ3NpbnB1dC5Db25zdHJ1Y3RvciA9IFRhZ3NJbnB1dDtcblxuICBmdW5jdGlvbiBtYWtlT3B0aW9uSXRlbUZ1bmN0aW9uKG9wdGlvbnMsIGtleSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgcHJvcGVydHlOYW1lID0gb3B0aW9uc1trZXldO1xuICAgICAgb3B0aW9uc1trZXldID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1bcHJvcGVydHlOYW1lXTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1ha2VPcHRpb25GdW5jdGlvbihvcHRpb25zLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1trZXldO1xuICAgICAgb3B0aW9uc1trZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICB2YXIgaHRtbEVuY29kZUNvbnRhaW5lciA9ICQoJzxkaXYgLz4nKTtcbiAgZnVuY3Rpb24gaHRtbEVuY29kZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGh0bWxFbmNvZGVDb250YWluZXIudGV4dCh2YWx1ZSkuaHRtbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZG9HZXRDYXJldFBvc2l0aW9uKG9GaWVsZCkge1xuICAgIHZhciBpQ2FyZXRQb3MgPSAwO1xuICAgIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcbiAgICAgIG9GaWVsZC5mb2N1cygpO1xuICAgICAgdmFyIG9TZWwgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgIG9TZWwubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCAtb0ZpZWxkLnZhbHVlLmxlbmd0aCk7XG4gICAgICBpQ2FyZXRQb3MgPSBvU2VsLnRleHQubGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAob0ZpZWxkLnNlbGVjdGlvblN0YXJ0IHx8IG9GaWVsZC5zZWxlY3Rpb25TdGFydCA9PSAnMCcpIHtcbiAgICAgIGlDYXJldFBvcyA9IG9GaWVsZC5zZWxlY3Rpb25TdGFydDtcbiAgICB9XG4gICAgcmV0dXJuIGlDYXJldFBvcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGtleUNvbWJpbmF0aW9uSW5MaXN0KGtleVByZXNzRXZlbnQsIGxvb2t1cExpc3QpIHtcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAkLmVhY2gobG9va3VwTGlzdCwgZnVuY3Rpb24gKGluZGV4LCBrZXlDb21iaW5hdGlvbikge1xuICAgICAgaWYgKHR5cGVvZiBrZXlDb21iaW5hdGlvbiA9PT0gJ251bWJlcicgJiYga2V5UHJlc3NFdmVudC53aGljaCA9PT0ga2V5Q29tYmluYXRpb24pIHtcbiAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlQcmVzc0V2ZW50LndoaWNoID09PSBrZXlDb21iaW5hdGlvbi53aGljaCkge1xuICAgICAgICB2YXIgYWx0ID0gIWtleUNvbWJpbmF0aW9uLmhhc093blByb3BlcnR5KCdhbHRLZXknKSB8fCBrZXlQcmVzc0V2ZW50LmFsdEtleSA9PT0ga2V5Q29tYmluYXRpb24uYWx0S2V5LFxuICAgICAgICAgICAgc2hpZnQgPSAha2V5Q29tYmluYXRpb24uaGFzT3duUHJvcGVydHkoJ3NoaWZ0S2V5JykgfHwga2V5UHJlc3NFdmVudC5zaGlmdEtleSA9PT0ga2V5Q29tYmluYXRpb24uc2hpZnRLZXksXG4gICAgICAgICAgICBjdHJsID0gIWtleUNvbWJpbmF0aW9uLmhhc093blByb3BlcnR5KCdjdHJsS2V5JykgfHwga2V5UHJlc3NFdmVudC5jdHJsS2V5ID09PSBrZXlDb21iaW5hdGlvbi5jdHJsS2V5O1xuICAgICAgICBpZiAoYWx0ICYmIHNoaWZ0ICYmIGN0cmwpIHtcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm91bmQ7XG4gIH1cblxuICAkKGZ1bmN0aW9uICgpIHtcbiAgICAkKFwiaW5wdXRbZGF0YS1yb2xlPXRhZ3NpbnB1dF0sIHNlbGVjdFttdWx0aXBsZV1bZGF0YS1yb2xlPXRhZ3NpbnB1dF1cIikudGFnc2lucHV0KCk7XG4gIH0pO1xufSkod2luZG93LmpRdWVyeSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cblxuaWYgKHR5cGVvZiBqUXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeScpO1xufVxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpO1xuICBpZiAodmVyc2lvblswXSA8IDIgJiYgdmVyc2lvblsxXSA8IDkgfHwgdmVyc2lvblswXSA9PSAxICYmIHZlcnNpb25bMV0gPT0gOSAmJiB2ZXJzaW9uWzJdIDwgMSB8fCB2ZXJzaW9uWzBdID4gMykge1xuICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeSB2ZXJzaW9uIDEuOS4xIG9yIGhpZ2hlciwgYnV0IGxvd2VyIHRoYW4gdmVyc2lvbiA0Jyk7XG4gIH1cbn0oalF1ZXJ5KTtcblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib290c3RyYXAnKTtcblxuICAgIHZhciB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XG4gICAgICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICBPVHJhbnNpdGlvbjogJ29UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kJyxcbiAgICAgIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHRyYW5zRW5kRXZlbnROYW1lcykge1xuICAgICAgaWYgKGVsLnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHsgZW5kOiB0cmFuc0VuZEV2ZW50TmFtZXNbbmFtZV0gfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7IFxuICB9XG5cbiAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgJGVsID0gdGhpcztcbiAgICAkKHRoaXMpLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgIGlmICghY2FsbGVkKSAkKCRlbCkudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpO1xuICAgIH07XG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gICQoZnVuY3Rpb24gKCkge1xuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkVuZCgpO1xuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuO1xuXG4gICAgJC5ldmVudC5zcGVjaWFsLmJzVHJhbnNpdGlvbkVuZCA9IHtcbiAgICAgIGJpbmRUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICBkZWxlZ2F0ZVR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoaXMpKSByZXR1cm4gZS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xufShqUXVlcnkpO1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cblxuICB2YXIgZGlzbWlzcyA9ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nO1xuICB2YXIgQWxlcnQgPSBmdW5jdGlvbiBBbGVydChlbCkge1xuICAgICQoZWwpLm9uKCdjbGljaycsIGRpc21pc3MsIHRoaXMuY2xvc2UpO1xuICB9O1xuXG4gIEFsZXJ0LlZFUlNJT04gPSAnMy4zLjcnO1xuXG4gIEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG5cbiAgQWxlcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0Jyk7XG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKTtcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpOyBcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9ICQoc2VsZWN0b3IgPT09ICcjJyA/IFtdIDogc2VsZWN0b3IpO1xuXG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCcuYWxlcnQnKTtcbiAgICB9XG5cbiAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2Nsb3NlLmJzLmFsZXJ0JykpO1xuXG4gICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybjtcblxuICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2luJyk7XG5cbiAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KCkge1xuICAgICAgJHBhcmVudC5kZXRhY2goKS50cmlnZ2VyKCdjbG9zZWQuYnMuYWxlcnQnKS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkcGFyZW50Lmhhc0NsYXNzKCdmYWRlJykgPyAkcGFyZW50Lm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgcmVtb3ZlRWxlbWVudCkuZW11bGF0ZVRyYW5zaXRpb25FbmQoQWxlcnQuVFJBTlNJVElPTl9EVVJBVElPTikgOiByZW1vdmVFbGVtZW50KCk7XG4gIH07XG5cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKCdicy5hbGVydCcpO1xuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmFsZXJ0JywgZGF0YSA9IG5ldyBBbGVydCh0aGlzKSk7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWxlcnQ7XG5cbiAgJC5mbi5hbGVydCA9IFBsdWdpbjtcbiAgJC5mbi5hbGVydC5Db25zdHJ1Y3RvciA9IEFsZXJ0O1xuXG5cbiAgJC5mbi5hbGVydC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYWxlcnQgPSBvbGQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuYWxlcnQuZGF0YS1hcGknLCBkaXNtaXNzLCBBbGVydC5wcm90b3R5cGUuY2xvc2UpO1xufShqUXVlcnkpO1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cblxuICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gQnV0dG9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQnV0dG9uLkRFRkFVTFRTLCBvcHRpb25zKTtcbiAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICB9O1xuXG4gIEJ1dHRvbi5WRVJTSU9OID0gJzMuMy43JztcblxuICBCdXR0b24uREVGQVVMVFMgPSB7XG4gICAgbG9hZGluZ1RleHQ6ICdsb2FkaW5nLi4uJ1xuICB9O1xuXG4gIEJ1dHRvbi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB2YXIgZCA9ICdkaXNhYmxlZCc7XG4gICAgdmFyICRlbCA9IHRoaXMuJGVsZW1lbnQ7XG4gICAgdmFyIHZhbCA9ICRlbC5pcygnaW5wdXQnKSA/ICd2YWwnIDogJ2h0bWwnO1xuICAgIHZhciBkYXRhID0gJGVsLmRhdGEoKTtcblxuICAgIHN0YXRlICs9ICdUZXh0JztcblxuICAgIGlmIChkYXRhLnJlc2V0VGV4dCA9PSBudWxsKSAkZWwuZGF0YSgncmVzZXRUZXh0JywgJGVsW3ZhbF0oKSk7XG5cbiAgICBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgJGVsW3ZhbF0oZGF0YVtzdGF0ZV0gPT0gbnVsbCA/IHRoaXMub3B0aW9uc1tzdGF0ZV0gOiBkYXRhW3N0YXRlXSk7XG5cbiAgICAgIGlmIChzdGF0ZSA9PSAnbG9hZGluZ1RleHQnKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgJGVsLmFkZENsYXNzKGQpLmF0dHIoZCwgZCkucHJvcChkLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKGQpLnJlbW92ZUF0dHIoZCkucHJvcChkLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfSwgdGhpcyksIDApO1xuICB9O1xuXG4gIEJ1dHRvbi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VkID0gdHJ1ZTtcbiAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQuY2xvc2VzdCgnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScpO1xuXG4gICAgaWYgKCRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICB2YXIgJGlucHV0ID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpO1xuICAgICAgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ3JhZGlvJykge1xuICAgICAgICBpZiAoJGlucHV0LnByb3AoJ2NoZWNrZWQnKSkgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAkcGFyZW50LmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgfSBlbHNlIGlmICgkaW5wdXQucHJvcCgndHlwZScpID09ICdjaGVja2JveCcpIHtcbiAgICAgICAgaWYgKCRpbnB1dC5wcm9wKCdjaGVja2VkJykgIT09IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgfVxuICAgICAgJGlucHV0LnByb3AoJ2NoZWNrZWQnLCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSk7XG4gICAgICBpZiAoY2hhbmdlZCkgJGlucHV0LnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSk7XG4gICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG4gIH07XG5cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKCdicy5idXR0b24nKTtcbiAgICAgIHZhciBvcHRpb25zID0gKHR5cGVvZiBvcHRpb24gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9wdGlvbikpID09ICdvYmplY3QnICYmIG9wdGlvbjtcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5idXR0b24nLCBkYXRhID0gbmV3IEJ1dHRvbih0aGlzLCBvcHRpb25zKSk7XG5cbiAgICAgIGlmIChvcHRpb24gPT0gJ3RvZ2dsZScpIGRhdGEudG9nZ2xlKCk7ZWxzZSBpZiAob3B0aW9uKSBkYXRhLnNldFN0YXRlKG9wdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5idXR0b247XG5cbiAgJC5mbi5idXR0b24gPSBQbHVnaW47XG4gICQuZm4uYnV0dG9uLkNvbnN0cnVjdG9yID0gQnV0dG9uO1xuXG5cbiAgJC5mbi5idXR0b24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmJ1dHRvbiA9IG9sZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICRidG4gPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJyk7XG4gICAgUGx1Z2luLmNhbGwoJGJ0biwgJ3RvZ2dsZScpO1xuICAgIGlmICghJChlLnRhcmdldCkuaXMoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXSwgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICgkYnRuLmlzKCdpbnB1dCxidXR0b24nKSkgJGJ0bi50cmlnZ2VyKCdmb2N1cycpO2Vsc2UgJGJ0bi5maW5kKCdpbnB1dDp2aXNpYmxlLGJ1dHRvbjp2aXNpYmxlJykuZmlyc3QoKS50cmlnZ2VyKCdmb2N1cycpO1xuICAgIH1cbiAgfSkub24oJ2ZvY3VzLmJzLmJ1dHRvbi5kYXRhLWFwaSBibHVyLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJykudG9nZ2xlQ2xhc3MoJ2ZvY3VzJywgL15mb2N1cyhpbik/JC8udGVzdChlLnR5cGUpKTtcbiAgfSk7XG59KGpRdWVyeSk7XG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuXG4gIHZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uIENhcm91c2VsKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLiRpbmRpY2F0b3JzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuY2Fyb3VzZWwtaW5kaWNhdG9ycycpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5wYXVzZWQgPSBudWxsO1xuICAgIHRoaXMuc2xpZGluZyA9IG51bGw7XG4gICAgdGhpcy5pbnRlcnZhbCA9IG51bGw7XG4gICAgdGhpcy4kYWN0aXZlID0gbnVsbDtcbiAgICB0aGlzLiRpdGVtcyA9IG51bGw7XG5cbiAgICB0aGlzLm9wdGlvbnMua2V5Ym9hcmQgJiYgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5rZXlkb3duLCB0aGlzKSk7XG5cbiAgICB0aGlzLm9wdGlvbnMucGF1c2UgPT0gJ2hvdmVyJyAmJiAhKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgJiYgdGhpcy4kZWxlbWVudC5vbignbW91c2VlbnRlci5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5wYXVzZSwgdGhpcykpLm9uKCdtb3VzZWxlYXZlLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmN5Y2xlLCB0aGlzKSk7XG4gIH07XG5cbiAgQ2Fyb3VzZWwuVkVSU0lPTiA9ICczLjMuNyc7XG5cbiAgQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMDtcblxuICBDYXJvdXNlbC5ERUZBVUxUUyA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICB3cmFwOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlXG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm47XG4gICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICBjYXNlIDM3OlxuICAgICAgICB0aGlzLnByZXYoKTticmVhaztcbiAgICAgIGNhc2UgMzk6XG4gICAgICAgIHRoaXMubmV4dCgpO2JyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfTtcblxuICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gZmFsc2UpO1xuXG4gICAgdGhpcy5pbnRlcnZhbCAmJiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuXG4gICAgdGhpcy5vcHRpb25zLmludGVydmFsICYmICF0aGlzLnBhdXNlZCAmJiAodGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCQucHJveHkodGhpcy5uZXh0LCB0aGlzKSwgdGhpcy5vcHRpb25zLmludGVydmFsKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB0aGlzLiRpdGVtcyA9IGl0ZW0ucGFyZW50KCkuY2hpbGRyZW4oJy5pdGVtJyk7XG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmluZGV4KGl0ZW0gfHwgdGhpcy4kYWN0aXZlKTtcbiAgfTtcblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUZvckRpcmVjdGlvbiA9IGZ1bmN0aW9uIChkaXJlY3Rpb24sIGFjdGl2ZSkge1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGFjdGl2ZSk7XG4gICAgdmFyIHdpbGxXcmFwID0gZGlyZWN0aW9uID09ICdwcmV2JyAmJiBhY3RpdmVJbmRleCA9PT0gMCB8fCBkaXJlY3Rpb24gPT0gJ25leHQnICYmIGFjdGl2ZUluZGV4ID09IHRoaXMuJGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgaWYgKHdpbGxXcmFwICYmICF0aGlzLm9wdGlvbnMud3JhcCkgcmV0dXJuIGFjdGl2ZTtcbiAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT0gJ3ByZXYnID8gLTEgOiAxO1xuICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLiRpdGVtcy5sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmVxKGl0ZW1JbmRleCk7XG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnRvID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleCh0aGlzLiRhY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpKTtcblxuICAgIGlmIChwb3MgPiB0aGlzLiRpdGVtcy5sZW5ndGggLSAxIHx8IHBvcyA8IDApIHJldHVybjtcblxuICAgIGlmICh0aGlzLnNsaWRpbmcpIHJldHVybiB0aGlzLiRlbGVtZW50Lm9uZSgnc2xpZC5icy5jYXJvdXNlbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQudG8ocG9zKTtcbiAgICB9KTsgXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09IHBvcykgcmV0dXJuIHRoaXMucGF1c2UoKS5jeWNsZSgpO1xuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUocG9zID4gYWN0aXZlSW5kZXggPyAnbmV4dCcgOiAncHJldicsIHRoaXMuJGl0ZW1zLmVxKHBvcykpO1xuICB9O1xuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSB0cnVlKTtcblxuICAgIGlmICh0aGlzLiRlbGVtZW50LmZpbmQoJy5uZXh0LCAucHJldicpLmxlbmd0aCAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbikge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCk7XG4gICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuO1xuICAgIHJldHVybiB0aGlzLnNsaWRlKCduZXh0Jyk7XG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuO1xuICAgIHJldHVybiB0aGlzLnNsaWRlKCdwcmV2Jyk7XG4gIH07XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnNsaWRlID0gZnVuY3Rpb24gKHR5cGUsIG5leHQpIHtcbiAgICB2YXIgJGFjdGl2ZSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJyk7XG4gICAgdmFyICRuZXh0ID0gbmV4dCB8fCB0aGlzLmdldEl0ZW1Gb3JEaXJlY3Rpb24odHlwZSwgJGFjdGl2ZSk7XG4gICAgdmFyIGlzQ3ljbGluZyA9IHRoaXMuaW50ZXJ2YWw7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHR5cGUgPT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICBpZiAoJG5leHQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm4gdGhpcy5zbGlkaW5nID0gZmFsc2U7XG5cbiAgICB2YXIgcmVsYXRlZFRhcmdldCA9ICRuZXh0WzBdO1xuICAgIHZhciBzbGlkZUV2ZW50ID0gJC5FdmVudCgnc2xpZGUuYnMuY2Fyb3VzZWwnLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICB9KTtcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc2xpZGVFdmVudCk7XG4gICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybjtcblxuICAgIHRoaXMuc2xpZGluZyA9IHRydWU7XG5cbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5wYXVzZSgpO1xuXG4gICAgaWYgKHRoaXMuJGluZGljYXRvcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRpbmRpY2F0b3JzLmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICB2YXIgJG5leHRJbmRpY2F0b3IgPSAkKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleCgkbmV4dCldKTtcbiAgICAgICRuZXh0SW5kaWNhdG9yICYmICRuZXh0SW5kaWNhdG9yLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG5cbiAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudCgnc2xpZC5icy5jYXJvdXNlbCcsIHsgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCwgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfSk7IFxuICAgIGlmICgkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdzbGlkZScpKSB7XG4gICAgICAkbmV4dC5hZGRDbGFzcyh0eXBlKTtcbiAgICAgICRuZXh0WzBdLm9mZnNldFdpZHRoOyBcbiAgICAgICRhY3RpdmUuYWRkQ2xhc3MoZGlyZWN0aW9uKTtcbiAgICAgICRuZXh0LmFkZENsYXNzKGRpcmVjdGlvbik7XG4gICAgICAkYWN0aXZlLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkbmV4dC5yZW1vdmVDbGFzcyhbdHlwZSwgZGlyZWN0aW9uXS5qb2luKCcgJykpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcyhbJ2FjdGl2ZScsIGRpcmVjdGlvbl0uam9pbignICcpKTtcbiAgICAgICAgdGhhdC5zbGlkaW5nID0gZmFsc2U7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENhcm91c2VsLlRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgIH0gZWxzZSB7XG4gICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICRuZXh0LmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgIHRoaXMuc2xpZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgfVxuXG4gICAgaXNDeWNsaW5nICYmIHRoaXMuY3ljbGUoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnKTtcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIENhcm91c2VsLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksICh0eXBlb2Ygb3B0aW9uID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvcHRpb24pKSA9PSAnb2JqZWN0JyAmJiBvcHRpb24pO1xuICAgICAgdmFyIGFjdGlvbiA9IHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgPyBvcHRpb24gOiBvcHRpb25zLnNsaWRlO1xuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJywgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBvcHRpb25zKSk7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnbnVtYmVyJykgZGF0YS50byhvcHRpb24pO2Vsc2UgaWYgKGFjdGlvbikgZGF0YVthY3Rpb25dKCk7ZWxzZSBpZiAob3B0aW9ucy5pbnRlcnZhbCkgZGF0YS5wYXVzZSgpLmN5Y2xlKCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jYXJvdXNlbDtcblxuICAkLmZuLmNhcm91c2VsID0gUGx1Z2luO1xuICAkLmZuLmNhcm91c2VsLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWw7XG5cblxuICAkLmZuLmNhcm91c2VsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jYXJvdXNlbCA9IG9sZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiBjbGlja0hhbmRsZXIoZSkge1xuICAgIHZhciBocmVmO1xuICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgdmFyICR0YXJnZXQgPSAkKCR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgKGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKTsgXG4gICAgaWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKCdjYXJvdXNlbCcpKSByZXR1cm47XG4gICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSk7XG4gICAgdmFyIHNsaWRlSW5kZXggPSAkdGhpcy5hdHRyKCdkYXRhLXNsaWRlLXRvJyk7XG4gICAgaWYgKHNsaWRlSW5kZXgpIG9wdGlvbnMuaW50ZXJ2YWwgPSBmYWxzZTtcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICR0YXJnZXQuZGF0YSgnYnMuY2Fyb3VzZWwnKS50byhzbGlkZUluZGV4KTtcbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpJywgJ1tkYXRhLXNsaWRlXScsIGNsaWNrSGFuZGxlcikub24oJ2NsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpJywgJ1tkYXRhLXNsaWRlLXRvXScsIGNsaWNrSGFuZGxlcik7XG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRjYXJvdXNlbCA9ICQodGhpcyk7XG4gICAgICBQbHVnaW4uY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpO1xuICAgIH0pO1xuICB9KTtcbn0oalF1ZXJ5KTtcblxuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cblxuICB2YXIgQ29sbGFwc2UgPSBmdW5jdGlvbiBDb2xsYXBzZShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKTtcbiAgICB0aGlzLiR0cmlnZ2VyID0gJCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1baHJlZj1cIiMnICsgZWxlbWVudC5pZCArICdcIl0sJyArICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMnICsgZWxlbWVudC5pZCArICdcIl0nKTtcbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJHRyaWdnZXIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMudG9nZ2xlKSB0aGlzLnRvZ2dsZSgpO1xuICB9O1xuXG4gIENvbGxhcHNlLlZFUlNJT04gPSAnMy4zLjcnO1xuXG4gIENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzNTA7XG5cbiAgQ29sbGFwc2UuREVGQVVMVFMgPSB7XG4gICAgdG9nZ2xlOiB0cnVlXG4gIH07XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmRpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzV2lkdGggPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCd3aWR0aCcpO1xuICAgIHJldHVybiBoYXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgfTtcblxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVybjtcblxuICAgIHZhciBhY3RpdmVzRGF0YTtcbiAgICB2YXIgYWN0aXZlcyA9IHRoaXMuJHBhcmVudCAmJiB0aGlzLiRwYXJlbnQuY2hpbGRyZW4oJy5wYW5lbCcpLmNoaWxkcmVuKCcuaW4sIC5jb2xsYXBzaW5nJyk7XG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgYWN0aXZlc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJyk7XG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEudHJhbnNpdGlvbmluZykgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnc2hvdy5icy5jb2xsYXBzZScpO1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KTtcbiAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuO1xuXG4gICAgaWYgKGFjdGl2ZXMgJiYgYWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIFBsdWdpbi5jYWxsKGFjdGl2ZXMsICdoaWRlJyk7XG4gICAgICBhY3RpdmVzRGF0YSB8fCBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJywgbnVsbCk7XG4gICAgfVxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKCk7XG5cbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpLmFkZENsYXNzKCdjb2xsYXBzaW5nJylbZGltZW5zaW9uXSgwKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICB0aGlzLiR0cmlnZ2VyLnJlbW92ZUNsYXNzKCdjb2xsYXBzZWQnKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxO1xuXG4gICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJykuYWRkQ2xhc3MoJ2NvbGxhcHNlIGluJylbZGltZW5zaW9uXSgnJyk7XG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwO1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93bi5icy5jb2xsYXBzZScpO1xuICAgIH07XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKTtcblxuICAgIHZhciBzY3JvbGxTaXplID0gJC5jYW1lbENhc2UoWydzY3JvbGwnLCBkaW1lbnNpb25dLmpvaW4oJy0nKSk7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04pW2RpbWVuc2lvbl0odGhpcy4kZWxlbWVudFswXVtzY3JvbGxTaXplXSk7XG4gIH07XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSkgcmV0dXJuO1xuXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdoaWRlLmJzLmNvbGxhcHNlJyk7XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm47XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKTtcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0O1xuXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnY29sbGFwc2luZycpLnJlbW92ZUNsYXNzKCdjb2xsYXBzZSBpbicpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG5cbiAgICB0aGlzLiR0cmlnZ2VyLmFkZENsYXNzKCdjb2xsYXBzZWQnKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMTtcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMDtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKS5hZGRDbGFzcygnY29sbGFwc2UnKS50cmlnZ2VyKCdoaWRkZW4uYnMuY29sbGFwc2UnKTtcbiAgICB9O1xuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuIGNvbXBsZXRlLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oMCkub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTik7XG4gIH07XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzW3RoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykgPyAnaGlkZScgOiAnc2hvdyddKCk7XG4gIH07XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJCh0aGlzLm9wdGlvbnMucGFyZW50KS5maW5kKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXBhcmVudD1cIicgKyB0aGlzLm9wdGlvbnMucGFyZW50ICsgJ1wiXScpLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGdldFRhcmdldEZyb21UcmlnZ2VyKCRlbGVtZW50KSwgJGVsZW1lbnQpO1xuICAgIH0sIHRoaXMpKS5lbmQoKTtcbiAgfTtcblxuICBDb2xsYXBzZS5wcm90b3R5cGUuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gKCRlbGVtZW50LCAkdHJpZ2dlcikge1xuICAgIHZhciBpc09wZW4gPSAkZWxlbWVudC5oYXNDbGFzcygnaW4nKTtcblxuICAgICRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pO1xuICAgICR0cmlnZ2VyLnRvZ2dsZUNsYXNzKCdjb2xsYXBzZWQnLCAhaXNPcGVuKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKTtcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRUYXJnZXRGcm9tVHJpZ2dlcigkdHJpZ2dlcikge1xuICAgIHZhciBocmVmO1xuICAgIHZhciB0YXJnZXQgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmID0gJHRyaWdnZXIuYXR0cignaHJlZicpKSAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKTsgXG5cbiAgICByZXR1cm4gJCh0YXJnZXQpO1xuICB9XG5cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScpO1xuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ29sbGFwc2UuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgKHR5cGVvZiBvcHRpb24gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9wdGlvbikpID09ICdvYmplY3QnICYmIG9wdGlvbik7XG5cbiAgICAgIGlmICghZGF0YSAmJiBvcHRpb25zLnRvZ2dsZSAmJiAvc2hvd3xoaWRlLy50ZXN0KG9wdGlvbikpIG9wdGlvbnMudG9nZ2xlID0gZmFsc2U7XG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmNvbGxhcHNlJywgZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBvcHRpb25zKSk7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jb2xsYXBzZTtcblxuICAkLmZuLmNvbGxhcHNlID0gUGx1Z2luO1xuICAkLmZuLmNvbGxhcHNlLkNvbnN0cnVjdG9yID0gQ29sbGFwc2U7XG5cblxuICAkLmZuLmNvbGxhcHNlLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jb2xsYXBzZSA9IG9sZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5jb2xsYXBzZS5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKTtcblxuICAgIGlmICghJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdmFyICR0YXJnZXQgPSBnZXRUYXJnZXRGcm9tVHJpZ2dlcigkdGhpcyk7XG4gICAgdmFyIGRhdGEgPSAkdGFyZ2V0LmRhdGEoJ2JzLmNvbGxhcHNlJyk7XG4gICAgdmFyIG9wdGlvbiA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0aGlzLmRhdGEoKTtcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbik7XG4gIH0pO1xufShqUXVlcnkpO1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cblxuICB2YXIgYmFja2Ryb3AgPSAnLmRyb3Bkb3duLWJhY2tkcm9wJztcbiAgdmFyIHRvZ2dsZSA9ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXSc7XG4gIHZhciBEcm9wZG93biA9IGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLm9uKCdjbGljay5icy5kcm9wZG93bicsIHRoaXMudG9nZ2xlKTtcbiAgfTtcblxuICBEcm9wZG93bi5WRVJTSU9OID0gJzMuMy43JztcblxuICBmdW5jdGlvbiBnZXRQYXJlbnQoJHRoaXMpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpO1xuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJyk7XG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIC8jW0EtWmEtel0vLnRlc3Qoc2VsZWN0b3IpICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKTsgXG4gICAgfVxuXG4gICAgdmFyICRwYXJlbnQgPSBzZWxlY3RvciAmJiAkKHNlbGVjdG9yKTtcblxuICAgIHJldHVybiAkcGFyZW50ICYmICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICR0aGlzLnBhcmVudCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJNZW51cyhlKSB7XG4gICAgaWYgKGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICAgICQoYmFja2Ryb3ApLnJlbW92ZSgpO1xuICAgICQodG9nZ2xlKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICB2YXIgJHBhcmVudCA9IGdldFBhcmVudCgkdGhpcyk7XG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9O1xuXG4gICAgICBpZiAoISRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKSkgcmV0dXJuO1xuXG4gICAgICBpZiAoZSAmJiBlLnR5cGUgPT0gJ2NsaWNrJyAmJiAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpICYmICQuY29udGFpbnMoJHBhcmVudFswXSwgZS50YXJnZXQpKSByZXR1cm47XG5cbiAgICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnaGlkZS5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKTtcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybjtcblxuICAgICAgJHRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgJHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbicpLnRyaWdnZXIoJC5FdmVudCgnaGlkZGVuLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpO1xuICAgIH0pO1xuICB9XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKTtcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuO1xuXG4gICAgdmFyICRwYXJlbnQgPSBnZXRQYXJlbnQoJHRoaXMpO1xuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKTtcblxuICAgIGNsZWFyTWVudXMoKTtcblxuICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgISRwYXJlbnQuY2xvc2VzdCgnLm5hdmJhci1uYXYnKS5sZW5ndGgpIHtcbiAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJhY2tkcm9wJykuaW5zZXJ0QWZ0ZXIoJCh0aGlzKSkub24oJ2NsaWNrJywgY2xlYXJNZW51cyk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH07XG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ3Nob3cuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSk7XG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm47XG5cbiAgICAgICR0aGlzLnRyaWdnZXIoJ2ZvY3VzJykuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG5cbiAgICAgICRwYXJlbnQudG9nZ2xlQ2xhc3MoJ29wZW4nKS50cmlnZ2VyKCQuRXZlbnQoJ3Nob3duLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCEvKDM4fDQwfDI3fDMyKS8udGVzdChlLndoaWNoKSB8fCAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm47XG5cbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVybjtcblxuICAgIHZhciAkcGFyZW50ID0gZ2V0UGFyZW50KCR0aGlzKTtcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJyk7XG5cbiAgICBpZiAoIWlzQWN0aXZlICYmIGUud2hpY2ggIT0gMjcgfHwgaXNBY3RpdmUgJiYgZS53aGljaCA9PSAyNykge1xuICAgICAgaWYgKGUud2hpY2ggPT0gMjcpICRwYXJlbnQuZmluZCh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICByZXR1cm4gJHRoaXMudHJpZ2dlcignY2xpY2snKTtcbiAgICB9XG5cbiAgICB2YXIgZGVzYyA9ICcgbGk6bm90KC5kaXNhYmxlZCk6dmlzaWJsZSBhJztcbiAgICB2YXIgJGl0ZW1zID0gJHBhcmVudC5maW5kKCcuZHJvcGRvd24tbWVudScgKyBkZXNjKTtcblxuICAgIGlmICghJGl0ZW1zLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgdmFyIGluZGV4ID0gJGl0ZW1zLmluZGV4KGUudGFyZ2V0KTtcblxuICAgIGlmIChlLndoaWNoID09IDM4ICYmIGluZGV4ID4gMCkgaW5kZXgtLTsgXG4gICAgaWYgKGUud2hpY2ggPT0gNDAgJiYgaW5kZXggPCAkaXRlbXMubGVuZ3RoIC0gMSkgaW5kZXgrKzsgXG4gICAgaWYgKCF+aW5kZXgpIGluZGV4ID0gMDtcblxuICAgICRpdGVtcy5lcShpbmRleCkudHJpZ2dlcignZm9jdXMnKTtcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJyk7XG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nLCBkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMpKTtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcyk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5kcm9wZG93bjtcblxuICAkLmZuLmRyb3Bkb3duID0gUGx1Z2luO1xuICAkLmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yID0gRHJvcGRvd247XG5cblxuICAkLmZuLmRyb3Bkb3duLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5kcm9wZG93biA9IG9sZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIGNsZWFyTWVudXMpLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24gZm9ybScsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSkub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlKS5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgJy5kcm9wZG93bi1tZW51JywgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pO1xufShqUXVlcnkpO1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cblxuICB2YXIgTW9kYWwgPSBmdW5jdGlvbiBNb2RhbChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLiRib2R5ID0gJChkb2N1bWVudC5ib2R5KTtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLiRkaWFsb2cgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5tb2RhbC1kaWFsb2cnKTtcbiAgICB0aGlzLiRiYWNrZHJvcCA9IG51bGw7XG4gICAgdGhpcy5pc1Nob3duID0gbnVsbDtcbiAgICB0aGlzLm9yaWdpbmFsQm9keVBhZCA9IG51bGw7XG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IDA7XG4gICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlbW90ZSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCcubW9kYWwtY29udGVudCcpLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignbG9hZGVkLmJzLm1vZGFsJyk7XG4gICAgICB9LCB0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLlZFUlNJT04gPSAnMy4zLjcnO1xuXG4gIE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDA7XG4gIE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG5cbiAgTW9kYWwuREVGQVVMVFMgPSB7XG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgc2hvdzogdHJ1ZVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coX3JlbGF0ZWRUYXJnZXQpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSk7XG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSk7XG5cbiAgICBpZiAodGhpcy5pc1Nob3duIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybjtcblxuICAgIHRoaXMuaXNTaG93biA9IHRydWU7XG5cbiAgICB0aGlzLmNoZWNrU2Nyb2xsYmFyKCk7XG4gICAgdGhpcy5zZXRTY3JvbGxiYXIoKTtcbiAgICB0aGlzLiRib2R5LmFkZENsYXNzKCdtb2RhbC1vcGVuJyk7XG5cbiAgICB0aGlzLmVzY2FwZSgpO1xuICAgIHRoaXMucmVzaXplKCk7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsICQucHJveHkodGhpcy5oaWRlLCB0aGlzKSk7XG5cbiAgICB0aGlzLiRkaWFsb2cub24oJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vbmUoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGF0LiRlbGVtZW50KSkgdGhhdC5pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoYXQuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKTtcblxuICAgICAgaWYgKCF0aGF0LiRlbGVtZW50LnBhcmVudCgpLmxlbmd0aCkge1xuICAgICAgICB0aGF0LiRlbGVtZW50LmFwcGVuZFRvKHRoYXQuJGJvZHkpOyBcbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudC5zaG93KCkuc2Nyb2xsVG9wKDApO1xuXG4gICAgICB0aGF0LmFkanVzdERpYWxvZygpO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB0aGF0LiRlbGVtZW50WzBdLm9mZnNldFdpZHRoOyBcbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudC5hZGRDbGFzcygnaW4nKTtcblxuICAgICAgdGhhdC5lbmZvcmNlRm9jdXMoKTtcblxuICAgICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93bi5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSk7XG5cbiAgICAgIHRyYW5zaXRpb24gPyB0aGF0LiRkaWFsb2cgXG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpO1xuICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOiB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKTtcbiAgICB9KTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGUgPSAkLkV2ZW50KCdoaWRlLmJzLm1vZGFsJyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSk7XG5cbiAgICBpZiAoIXRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm47XG5cbiAgICB0aGlzLmlzU2hvd24gPSBmYWxzZTtcblxuICAgIHRoaXMuZXNjYXBlKCk7XG4gICAgdGhpcy5yZXNpemUoKTtcblxuICAgICQoZG9jdW1lbnQpLm9mZignZm9jdXNpbi5icy5tb2RhbCcpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaW4nKS5vZmYoJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnKS5vZmYoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcpO1xuXG4gICAgdGhpcy4kZGlhbG9nLm9mZignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnKTtcblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/IHRoaXMuJGVsZW1lbnQub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KHRoaXMuaGlkZU1vZGFsLCB0aGlzKSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOiB0aGlzLmhpZGVNb2RhbCgpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgJChkb2N1bWVudCkub2ZmKCdmb2N1c2luLmJzLm1vZGFsJykgXG4gICAgLm9uKCdmb2N1c2luLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGRvY3VtZW50ICE9PSBlLnRhcmdldCAmJiB0aGlzLiRlbGVtZW50WzBdICE9PSBlLnRhcmdldCAmJiAhdGhpcy4kZWxlbWVudC5oYXMoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICB9XG4gICAgfSwgdGhpcykpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5lc2NhcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNTaG93biAmJiB0aGlzLm9wdGlvbnMua2V5Ym9hcmQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS53aGljaCA9PSAyNyAmJiB0aGlzLmhpZGUoKTtcbiAgICAgIH0sIHRoaXMpKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5icy5tb2RhbCcsICQucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsIHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLmJzLm1vZGFsJyk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpO1xuICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kYm9keS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpO1xuICAgICAgdGhhdC5yZXNldEFkanVzdG1lbnRzKCk7XG4gICAgICB0aGF0LnJlc2V0U2Nyb2xsYmFyKCk7XG4gICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2hpZGRlbi5icy5tb2RhbCcpO1xuICAgIH0pO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5yZW1vdmVCYWNrZHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRiYWNrZHJvcCAmJiB0aGlzLiRiYWNrZHJvcC5yZW1vdmUoKTtcbiAgICB0aGlzLiRiYWNrZHJvcCA9IG51bGw7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmJhY2tkcm9wID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJyc7XG5cbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgdmFyIGRvQW5pbWF0ZSA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIGFuaW1hdGU7XG5cbiAgICAgIHRoaXMuJGJhY2tkcm9wID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MoJ21vZGFsLWJhY2tkcm9wICcgKyBhbmltYXRlKS5hcHBlbmRUbyh0aGlzLiRib2R5KTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuO1xuICAgICAgICB0aGlzLm9wdGlvbnMuYmFja2Ryb3AgPT0gJ3N0YXRpYycgPyB0aGlzLiRlbGVtZW50WzBdLmZvY3VzKCkgOiB0aGlzLmhpZGUoKTtcbiAgICAgIH0sIHRoaXMpKTtcblxuICAgICAgaWYgKGRvQW5pbWF0ZSkgdGhpcy4kYmFja2Ryb3BbMF0ub2Zmc2V0V2lkdGg7IFxuXG4gICAgICB0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKTtcblxuICAgICAgaWYgKCFjYWxsYmFjaykgcmV0dXJuO1xuXG4gICAgICBkb0FuaW1hdGUgPyB0aGlzLiRiYWNrZHJvcC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKSA6IGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1Nob3duICYmIHRoaXMuJGJhY2tkcm9wKSB7XG4gICAgICB0aGlzLiRiYWNrZHJvcC5yZW1vdmVDbGFzcygnaW4nKTtcblxuICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7XG4gICAgICAgIHRoYXQucmVtb3ZlQmFja2Ryb3AoKTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgIH07XG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgPyB0aGlzLiRiYWNrZHJvcC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrUmVtb3ZlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKSA6IGNhbGxiYWNrUmVtb3ZlKCk7XG4gICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG5cblxuICBNb2RhbC5wcm90b3R5cGUuaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRqdXN0RGlhbG9nKCk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmFkanVzdERpYWxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbW9kYWxJc092ZXJmbG93aW5nID0gdGhpcy4kZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICF0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmIG1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJyxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiAhbW9kYWxJc092ZXJmbG93aW5nID8gdGhpcy5zY3JvbGxiYXJXaWR0aCA6ICcnXG4gICAgfSk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICcnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnJ1xuICAgIH0pO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnVsbFdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgaWYgKCFmdWxsV2luZG93V2lkdGgpIHtcbiAgICAgIHZhciBkb2N1bWVudEVsZW1lbnRSZWN0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgZnVsbFdpbmRvd1dpZHRoID0gZG9jdW1lbnRFbGVtZW50UmVjdC5yaWdodCAtIE1hdGguYWJzKGRvY3VtZW50RWxlbWVudFJlY3QubGVmdCk7XG4gICAgfVxuICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoO1xuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB0aGlzLm1lYXN1cmVTY3JvbGxiYXIoKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQodGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCB8fCAnJztcbiAgICBpZiAodGhpcy5ib2R5SXNPdmVyZmxvd2luZykgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBib2R5UGFkICsgdGhpcy5zY3JvbGxiYXJXaWR0aCk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgdGhpcy5vcmlnaW5hbEJvZHlQYWQpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5tZWFzdXJlU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJztcbiAgICB0aGlzLiRib2R5LmFwcGVuZChzY3JvbGxEaXYpO1xuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICB0aGlzLiRib2R5WzBdLnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoO1xuICB9O1xuXG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbiwgX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoJ2JzLm1vZGFsJyk7XG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBNb2RhbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCAodHlwZW9mIG9wdGlvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob3B0aW9uKSkgPT0gJ29iamVjdCcgJiYgb3B0aW9uKTtcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5tb2RhbCcsIGRhdGEgPSBuZXcgTW9kYWwodGhpcywgb3B0aW9ucykpO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXShfcmVsYXRlZFRhcmdldCk7ZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ubW9kYWw7XG5cbiAgJC5mbi5tb2RhbCA9IFBsdWdpbjtcbiAgJC5mbi5tb2RhbC5Db25zdHJ1Y3RvciA9IE1vZGFsO1xuXG5cbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ubW9kYWwgPSBvbGQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMubW9kYWwuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgdmFyIGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJyk7XG4gICAgdmFyICR0YXJnZXQgPSAkKCR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgaHJlZiAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSk7IFxuICAgIHZhciBvcHRpb24gPSAkdGFyZ2V0LmRhdGEoJ2JzLm1vZGFsJykgPyAndG9nZ2xlJyA6ICQuZXh0ZW5kKHsgcmVtb3RlOiAhLyMvLnRlc3QoaHJlZikgJiYgaHJlZiB9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKTtcblxuICAgIGlmICgkdGhpcy5pcygnYScpKSBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAkdGFyZ2V0Lm9uZSgnc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybjsgXG4gICAgICAkdGFyZ2V0Lm9uZSgnaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGhpcy5pcygnOnZpc2libGUnKSAmJiAkdGhpcy50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uLCB0aGlzKTtcbiAgfSk7XG59KGpRdWVyeSk7XG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuXG4gIHZhciBUb29sdGlwID0gZnVuY3Rpb24gVG9vbHRpcChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gbnVsbDtcbiAgICB0aGlzLm9wdGlvbnMgPSBudWxsO1xuICAgIHRoaXMuZW5hYmxlZCA9IG51bGw7XG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgICB0aGlzLmhvdmVyU3RhdGUgPSBudWxsO1xuICAgIHRoaXMuJGVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuaW5TdGF0ZSA9IG51bGw7XG5cbiAgICB0aGlzLmluaXQoJ3Rvb2x0aXAnLCBlbGVtZW50LCBvcHRpb25zKTtcbiAgfTtcblxuICBUb29sdGlwLlZFUlNJT04gPSAnMy4zLjcnO1xuXG4gIFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MDtcblxuICBUb29sdGlwLkRFRkFVTFRTID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIHZpZXdwb3J0OiB7XG4gICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgcGFkZGluZzogMFxuICAgIH1cbiAgfTtcblxuICBUb29sdGlwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHR5cGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgdGhpcy5vcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgIHRoaXMuJHZpZXdwb3J0ID0gdGhpcy5vcHRpb25zLnZpZXdwb3J0ICYmICQoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy52aWV3cG9ydCkgPyB0aGlzLm9wdGlvbnMudmlld3BvcnQuY2FsbCh0aGlzLCB0aGlzLiRlbGVtZW50KSA6IHRoaXMub3B0aW9ucy52aWV3cG9ydC5zZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMudmlld3BvcnQpO1xuICAgIHRoaXMuaW5TdGF0ZSA9IHsgY2xpY2s6IGZhbHNlLCBob3ZlcjogZmFsc2UsIGZvY3VzOiBmYWxzZSB9O1xuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0gaW5zdGFuY2VvZiBkb2N1bWVudC5jb25zdHJ1Y3RvciAmJiAhdGhpcy5vcHRpb25zLnNlbGVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BzZWxlY3RvcmAgb3B0aW9uIG11c3QgYmUgc3BlY2lmaWVkIHdoZW4gaW5pdGlhbGl6aW5nICcgKyB0aGlzLnR5cGUgKyAnIG9uIHRoZSB3aW5kb3cuZG9jdW1lbnQgb2JqZWN0IScpO1xuICAgIH1cblxuICAgIHZhciB0cmlnZ2VycyA9IHRoaXMub3B0aW9ucy50cmlnZ2VyLnNwbGl0KCcgJyk7XG5cbiAgICBmb3IgKHZhciBpID0gdHJpZ2dlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgdHJpZ2dlciA9IHRyaWdnZXJzW2ldO1xuXG4gICAgICBpZiAodHJpZ2dlciA9PSAnY2xpY2snKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLnRvZ2dsZSwgdGhpcykpO1xuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9ICdtYW51YWwnKSB7XG4gICAgICAgIHZhciBldmVudEluID0gdHJpZ2dlciA9PSAnaG92ZXInID8gJ21vdXNlZW50ZXInIDogJ2ZvY3VzaW4nO1xuICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VsZWF2ZScgOiAnZm9jdXNvdXQnO1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRJbiArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMuZW50ZXIsIHRoaXMpKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudE91dCArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMubGVhdmUsIHRoaXMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMuc2VsZWN0b3IgPyB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgeyB0cmlnZ2VyOiAnbWFudWFsJywgc2VsZWN0b3I6ICcnIH0pIDogdGhpcy5maXhUaXRsZSgpO1xuICB9O1xuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUb29sdGlwLkRFRkFVTFRTO1xuICB9O1xuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5nZXREZWZhdWx0cygpLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICBpZiAob3B0aW9ucy5kZWxheSAmJiB0eXBlb2Ygb3B0aW9ucy5kZWxheSA9PSAnbnVtYmVyJykge1xuICAgICAgb3B0aW9ucy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogb3B0aW9ucy5kZWxheSxcbiAgICAgICAgaGlkZTogb3B0aW9ucy5kZWxheVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfTtcblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmdldERlZmF1bHRzKCk7XG5cbiAgICB0aGlzLl9vcHRpb25zICYmICQuZWFjaCh0aGlzLl9vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGRlZmF1bHRzW2tleV0gIT0gdmFsdWUpIG9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZW50ZXIgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHNlbGYgPSBvYmogaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yID8gb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSk7XG5cbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSk7XG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKTtcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c2luJyA/ICdmb2N1cycgOiAnaG92ZXInXSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgfHwgc2VsZi5ob3ZlclN0YXRlID09ICdpbicpIHtcbiAgICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdpbic7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dCk7XG5cbiAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nO1xuXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5zaG93KSByZXR1cm4gc2VsZi5zaG93KCk7XG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykgc2VsZi5zaG93KCk7XG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LnNob3cpO1xuICB9O1xuXG4gIFRvb2x0aXAucHJvdG90eXBlLmlzSW5TdGF0ZVRydWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuaW5TdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuaW5TdGF0ZVtrZXldKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHNlbGYgPSBvYmogaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yID8gb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSk7XG5cbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSk7XG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKTtcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c291dCcgPyAnZm9jdXMnIDogJ2hvdmVyJ10gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5pc0luU3RhdGVUcnVlKCkpIHJldHVybjtcblxuICAgIGNsZWFyVGltZW91dChzZWxmLnRpbWVvdXQpO1xuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ291dCc7XG5cbiAgICBpZiAoIXNlbGYub3B0aW9ucy5kZWxheSB8fCAhc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpIHJldHVybiBzZWxmLmhpZGUoKTtcblxuICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnb3V0Jykgc2VsZi5oaWRlKCk7XG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpO1xuICB9O1xuXG4gIFRvb2x0aXAucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93LmJzLicgKyB0aGlzLnR5cGUpO1xuXG4gICAgaWYgKHRoaXMuaGFzQ29udGVudCgpICYmIHRoaXMuZW5hYmxlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpO1xuXG4gICAgICB2YXIgaW5Eb20gPSAkLmNvbnRhaW5zKHRoaXMuJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuJGVsZW1lbnRbMF0pO1xuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgIWluRG9tKSByZXR1cm47XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKTtcblxuICAgICAgdmFyIHRpcElkID0gdGhpcy5nZXRVSUQodGhpcy50eXBlKTtcblxuICAgICAgdGhpcy5zZXRDb250ZW50KCk7XG4gICAgICAkdGlwLmF0dHIoJ2lkJywgdGlwSWQpO1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgJHRpcC5hZGRDbGFzcygnZmFkZScpO1xuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6IHRoaXMub3B0aW9ucy5wbGFjZW1lbnQ7XG5cbiAgICAgIHZhciBhdXRvVG9rZW4gPSAvXFxzP2F1dG8/XFxzPy9pO1xuICAgICAgdmFyIGF1dG9QbGFjZSA9IGF1dG9Ub2tlbi50ZXN0KHBsYWNlbWVudCk7XG4gICAgICBpZiAoYXV0b1BsYWNlKSBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShhdXRvVG9rZW4sICcnKSB8fCAndG9wJztcblxuICAgICAgJHRpcC5kZXRhY2goKS5jc3MoeyB0b3A6IDAsIGxlZnQ6IDAsIGRpc3BsYXk6ICdibG9jaycgfSkuYWRkQ2xhc3MocGxhY2VtZW50KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCB0aGlzKTtcblxuICAgICAgdGhpcy5vcHRpb25zLmNvbnRhaW5lciA/ICR0aXAuYXBwZW5kVG8odGhpcy5vcHRpb25zLmNvbnRhaW5lcikgOiAkdGlwLmluc2VydEFmdGVyKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnNlcnRlZC5icy4nICsgdGhpcy50eXBlKTtcblxuICAgICAgdmFyIHBvcyA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgIHZhciBhY3R1YWxXaWR0aCA9ICR0aXBbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICB2YXIgYWN0dWFsSGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgdmFyIG9yZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgICAgdmFyIHZpZXdwb3J0RGltID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydCk7XG5cbiAgICAgICAgcGxhY2VtZW50ID0gcGxhY2VtZW50ID09ICdib3R0b20nICYmIHBvcy5ib3R0b20gKyBhY3R1YWxIZWlnaHQgPiB2aWV3cG9ydERpbS5ib3R0b20gPyAndG9wJyA6IHBsYWNlbWVudCA9PSAndG9wJyAmJiBwb3MudG9wIC0gYWN0dWFsSGVpZ2h0IDwgdmlld3BvcnREaW0udG9wID8gJ2JvdHRvbScgOiBwbGFjZW1lbnQgPT0gJ3JpZ2h0JyAmJiBwb3MucmlnaHQgKyBhY3R1YWxXaWR0aCA+IHZpZXdwb3J0RGltLndpZHRoID8gJ2xlZnQnIDogcGxhY2VtZW50ID09ICdsZWZ0JyAmJiBwb3MubGVmdCAtIGFjdHVhbFdpZHRoIDwgdmlld3BvcnREaW0ubGVmdCA/ICdyaWdodCcgOiBwbGFjZW1lbnQ7XG5cbiAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyhvcmdQbGFjZW1lbnQpLmFkZENsYXNzKHBsYWNlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjYWxjdWxhdGVkT2Zmc2V0ID0gdGhpcy5nZXRDYWxjdWxhdGVkT2Zmc2V0KHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KTtcblxuICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gdGhhdC5ob3ZlclN0YXRlO1xuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ3Nob3duLmJzLicgKyB0aGF0LnR5cGUpO1xuICAgICAgICB0aGF0LmhvdmVyU3RhdGUgPSBudWxsO1xuXG4gICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PSAnb3V0JykgdGhhdC5sZWF2ZSh0aGF0KTtcbiAgICAgIH07XG5cbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJHRpcC5oYXNDbGFzcygnZmFkZScpID8gJHRpcC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04pIDogY29tcGxldGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuYXBwbHlQbGFjZW1lbnQgPSBmdW5jdGlvbiAob2Zmc2V0LCBwbGFjZW1lbnQpIHtcbiAgICB2YXIgJHRpcCA9IHRoaXMudGlwKCk7XG4gICAgdmFyIHdpZHRoID0gJHRpcFswXS5vZmZzZXRXaWR0aDtcbiAgICB2YXIgaGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHQ7XG5cbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi10b3AnKSwgMTApO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi1sZWZ0JyksIDEwKTtcblxuICAgIGlmIChpc05hTihtYXJnaW5Ub3ApKSBtYXJnaW5Ub3AgPSAwO1xuICAgIGlmIChpc05hTihtYXJnaW5MZWZ0KSkgbWFyZ2luTGVmdCA9IDA7XG5cbiAgICBvZmZzZXQudG9wICs9IG1hcmdpblRvcDtcbiAgICBvZmZzZXQubGVmdCArPSBtYXJnaW5MZWZ0O1xuXG4gICAgJC5vZmZzZXQuc2V0T2Zmc2V0KCR0aXBbMF0sICQuZXh0ZW5kKHtcbiAgICAgIHVzaW5nOiBmdW5jdGlvbiB1c2luZyhwcm9wcykge1xuICAgICAgICAkdGlwLmNzcyh7XG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKHByb3BzLnRvcCksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChwcm9wcy5sZWZ0KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCBvZmZzZXQpLCAwKTtcblxuICAgICR0aXAuYWRkQ2xhc3MoJ2luJyk7XG5cbiAgICB2YXIgYWN0dWFsV2lkdGggPSAkdGlwWzBdLm9mZnNldFdpZHRoO1xuICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodDtcblxuICAgIGlmIChwbGFjZW1lbnQgPT0gJ3RvcCcgJiYgYWN0dWFsSGVpZ2h0ICE9IGhlaWdodCkge1xuICAgICAgb2Zmc2V0LnRvcCA9IG9mZnNldC50b3AgKyBoZWlnaHQgLSBhY3R1YWxIZWlnaHQ7XG4gICAgfVxuXG4gICAgdmFyIGRlbHRhID0gdGhpcy5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEocGxhY2VtZW50LCBvZmZzZXQsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpO1xuXG4gICAgaWYgKGRlbHRhLmxlZnQpIG9mZnNldC5sZWZ0ICs9IGRlbHRhLmxlZnQ7ZWxzZSBvZmZzZXQudG9wICs9IGRlbHRhLnRvcDtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gL3RvcHxib3R0b20vLnRlc3QocGxhY2VtZW50KTtcbiAgICB2YXIgYXJyb3dEZWx0YSA9IGlzVmVydGljYWwgPyBkZWx0YS5sZWZ0ICogMiAtIHdpZHRoICsgYWN0dWFsV2lkdGggOiBkZWx0YS50b3AgKiAyIC0gaGVpZ2h0ICsgYWN0dWFsSGVpZ2h0O1xuICAgIHZhciBhcnJvd09mZnNldFBvc2l0aW9uID0gaXNWZXJ0aWNhbCA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0JztcblxuICAgICR0aXAub2Zmc2V0KG9mZnNldCk7XG4gICAgdGhpcy5yZXBsYWNlQXJyb3coYXJyb3dEZWx0YSwgJHRpcFswXVthcnJvd09mZnNldFBvc2l0aW9uXSwgaXNWZXJ0aWNhbCk7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUucmVwbGFjZUFycm93ID0gZnVuY3Rpb24gKGRlbHRhLCBkaW1lbnNpb24sIGlzVmVydGljYWwpIHtcbiAgICB0aGlzLmFycm93KCkuY3NzKGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJywgNTAgKiAoMSAtIGRlbHRhIC8gZGltZW5zaW9uKSArICclJykuY3NzKGlzVmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JywgJycpO1xuICB9O1xuXG4gIFRvb2x0aXAucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpO1xuICAgIHZhciB0aXRsZSA9IHRoaXMuZ2V0VGl0bGUoKTtcblxuICAgICR0aXAuZmluZCgnLnRvb2x0aXAtaW5uZXInKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpO1xuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgaW4gdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0Jyk7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB2YXIgJHRpcCA9ICQodGhpcy4kdGlwKTtcbiAgICB2YXIgZSA9ICQuRXZlbnQoJ2hpZGUuYnMuJyArIHRoaXMudHlwZSk7XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICh0aGF0LmhvdmVyU3RhdGUgIT0gJ2luJykgJHRpcC5kZXRhY2goKTtcbiAgICAgIGlmICh0aGF0LiRlbGVtZW50KSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnQucmVtb3ZlQXR0cignYXJpYS1kZXNjcmliZWRieScpLnRyaWdnZXIoJ2hpZGRlbi5icy4nICsgdGhhdC50eXBlKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpO1xuXG4gICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybjtcblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2luJyk7XG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkdGlwLmhhc0NsYXNzKCdmYWRlJykgPyAkdGlwLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOiBjb21wbGV0ZSgpO1xuXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnQ7XG4gICAgaWYgKCRlLmF0dHIoJ3RpdGxlJykgfHwgdHlwZW9mICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKSAhPSAnc3RyaW5nJykge1xuICAgICAgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScsICRlLmF0dHIoJ3RpdGxlJykgfHwgJycpLmF0dHIoJ3RpdGxlJywgJycpO1xuICAgIH1cbiAgfTtcblxuICBUb29sdGlwLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCk7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoJGVsZW1lbnQpIHtcbiAgICAkZWxlbWVudCA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnQ7XG5cbiAgICB2YXIgZWwgPSAkZWxlbWVudFswXTtcbiAgICB2YXIgaXNCb2R5ID0gZWwudGFnTmFtZSA9PSAnQk9EWSc7XG5cbiAgICB2YXIgZWxSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7XG4gICAgICBlbFJlY3QgPSAkLmV4dGVuZCh7fSwgZWxSZWN0LCB7IHdpZHRoOiBlbFJlY3QucmlnaHQgLSBlbFJlY3QubGVmdCwgaGVpZ2h0OiBlbFJlY3QuYm90dG9tIC0gZWxSZWN0LnRvcCB9KTtcbiAgICB9XG4gICAgdmFyIGlzU3ZnID0gd2luZG93LlNWR0VsZW1lbnQgJiYgZWwgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudDtcbiAgICB2YXIgZWxPZmZzZXQgPSBpc0JvZHkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogaXNTdmcgPyBudWxsIDogJGVsZW1lbnQub2Zmc2V0KCk7XG4gICAgdmFyIHNjcm9sbCA9IHsgc2Nyb2xsOiBpc0JvZHkgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIDogJGVsZW1lbnQuc2Nyb2xsVG9wKCkgfTtcbiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsO1xuXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHNjcm9sbCwgb3V0ZXJEaW1zLCBlbE9mZnNldCk7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Q2FsY3VsYXRlZE9mZnNldCA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMiB9IDogcGxhY2VtZW50ID09ICd0b3AnID8geyB0b3A6IHBvcy50b3AgLSBhY3R1YWxIZWlnaHQsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMiB9IDogcGxhY2VtZW50ID09ICdsZWZ0JyA/IHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCAvIDIgLSBhY3R1YWxIZWlnaHQgLyAyLCBsZWZ0OiBwb3MubGVmdCAtIGFjdHVhbFdpZHRoIH0gOlxueyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH07XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgdmFyIGRlbHRhID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgICBpZiAoIXRoaXMuJHZpZXdwb3J0KSByZXR1cm4gZGVsdGE7XG5cbiAgICB2YXIgdmlld3BvcnRQYWRkaW5nID0gdGhpcy5vcHRpb25zLnZpZXdwb3J0ICYmIHRoaXMub3B0aW9ucy52aWV3cG9ydC5wYWRkaW5nIHx8IDA7XG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpO1xuXG4gICAgaWYgKC9yaWdodHxsZWZ0Ly50ZXN0KHBsYWNlbWVudCkpIHtcbiAgICAgIHZhciB0b3BFZGdlT2Zmc2V0ID0gcG9zLnRvcCAtIHZpZXdwb3J0UGFkZGluZyAtIHZpZXdwb3J0RGltZW5zaW9ucy5zY3JvbGw7XG4gICAgICB2YXIgYm90dG9tRWRnZU9mZnNldCA9IHBvcy50b3AgKyB2aWV3cG9ydFBhZGRpbmcgLSB2aWV3cG9ydERpbWVuc2lvbnMuc2Nyb2xsICsgYWN0dWFsSGVpZ2h0O1xuICAgICAgaWYgKHRvcEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMudG9wKSB7XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgLSB0b3BFZGdlT2Zmc2V0O1xuICAgICAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQpIHtcbiAgICAgICAgZGVsdGEudG9wID0gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQgLSBib3R0b21FZGdlT2Zmc2V0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVmdEVkZ2VPZmZzZXQgPSBwb3MubGVmdCAtIHZpZXdwb3J0UGFkZGluZztcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoO1xuICAgICAgaWYgKGxlZnRFZGdlT2Zmc2V0IDwgdmlld3BvcnREaW1lbnNpb25zLmxlZnQpIHtcbiAgICAgICAgZGVsdGEubGVmdCA9IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0IC0gbGVmdEVkZ2VPZmZzZXQ7XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy5yaWdodCkge1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgKyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGggLSByaWdodEVkZ2VPZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbHRhO1xuICB9O1xuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aXRsZTtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50O1xuICAgIHZhciBvID0gdGhpcy5vcHRpb25zO1xuXG4gICAgdGl0bGUgPSAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJykgfHwgKHR5cGVvZiBvLnRpdGxlID09ICdmdW5jdGlvbicgPyBvLnRpdGxlLmNhbGwoJGVbMF0pIDogby50aXRsZSk7XG5cbiAgICByZXR1cm4gdGl0bGU7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VUlEID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGRvIHtcbiAgICAgIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCk7XG4gICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG4gICAgcmV0dXJuIHByZWZpeDtcbiAgfTtcblxuICBUb29sdGlwLnByb3RvdHlwZS50aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiR0aXApIHtcbiAgICAgIHRoaXMuJHRpcCA9ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKTtcbiAgICAgIGlmICh0aGlzLiR0aXAubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMudHlwZSArICcgYHRlbXBsYXRlYCBvcHRpb24gbXVzdCBjb25zaXN0IG9mIGV4YWN0bHkgMSB0b3AtbGV2ZWwgZWxlbWVudCEnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJHRpcDtcbiAgfTtcblxuICBUb29sdGlwLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy50b29sdGlwLWFycm93Jyk7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGVFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9ICF0aGlzLmVuYWJsZWQ7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYgPSAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSk7XG4gICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSk7XG4gICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZSkge1xuICAgICAgc2VsZi5pblN0YXRlLmNsaWNrID0gIXNlbGYuaW5TdGF0ZS5jbGljaztcbiAgICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgc2VsZi5lbnRlcihzZWxmKTtlbHNlIHNlbGYubGVhdmUoc2VsZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKTtcbiAgICB9XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgdGhpcy5oaWRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGVsZW1lbnQub2ZmKCcuJyArIHRoYXQudHlwZSkucmVtb3ZlRGF0YSgnYnMuJyArIHRoYXQudHlwZSk7XG4gICAgICBpZiAodGhhdC4kdGlwKSB7XG4gICAgICAgIHRoYXQuJHRpcC5kZXRhY2goKTtcbiAgICAgIH1cbiAgICAgIHRoYXQuJHRpcCA9IG51bGw7XG4gICAgICB0aGF0LiRhcnJvdyA9IG51bGw7XG4gICAgICB0aGF0LiR2aWV3cG9ydCA9IG51bGw7XG4gICAgICB0aGF0LiRlbGVtZW50ID0gbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnKTtcbiAgICAgIHZhciBvcHRpb25zID0gKHR5cGVvZiBvcHRpb24gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9wdGlvbikpID09ICdvYmplY3QnICYmIG9wdGlvbjtcblxuICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3Qob3B0aW9uKSkgcmV0dXJuO1xuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50b29sdGlwJywgZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIG9wdGlvbnMpKTtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnRvb2x0aXA7XG5cbiAgJC5mbi50b29sdGlwID0gUGx1Z2luO1xuICAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IgPSBUb29sdGlwO1xuXG5cbiAgJC5mbi50b29sdGlwLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi50b29sdGlwID0gb2xkO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xufShqUXVlcnkpO1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cblxuICB2YXIgUG9wb3ZlciA9IGZ1bmN0aW9uIFBvcG92ZXIoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdCgncG9wb3ZlcicsIGVsZW1lbnQsIG9wdGlvbnMpO1xuICB9O1xuXG4gIGlmICghJC5mbi50b29sdGlwKSB0aHJvdyBuZXcgRXJyb3IoJ1BvcG92ZXIgcmVxdWlyZXMgdG9vbHRpcC5qcycpO1xuXG4gIFBvcG92ZXIuVkVSU0lPTiA9ICczLjMuNyc7XG5cbiAgUG9wb3Zlci5ERUZBVUxUUyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IuREVGQVVMVFMsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+J1xuICB9KTtcblxuXG4gIFBvcG92ZXIucHJvdG90eXBlID0gJC5leHRlbmQoe30sICQuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xuXG4gIFBvcG92ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9wb3ZlcjtcblxuICBQb3BvdmVyLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUG9wb3Zlci5ERUZBVUxUUztcbiAgfTtcblxuICBQb3BvdmVyLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwID0gdGhpcy50aXAoKTtcbiAgICB2YXIgdGl0bGUgPSB0aGlzLmdldFRpdGxlKCk7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldENvbnRlbnQoKTtcblxuICAgICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpO1xuICAgICR0aXAuZmluZCgnLnBvcG92ZXItY29udGVudCcpLmNoaWxkcmVuKCkuZGV0YWNoKCkuZW5kKClbXG4gICAgdGhpcy5vcHRpb25zLmh0bWwgPyB0eXBlb2YgY29udGVudCA9PSAnc3RyaW5nJyA/ICdodG1sJyA6ICdhcHBlbmQnIDogJ3RleHQnXShjb250ZW50KTtcblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluJyk7XG5cbiAgICBpZiAoISR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5odG1sKCkpICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5oaWRlKCk7XG4gIH07XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuaGFzQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuZ2V0Q29udGVudCgpO1xuICB9O1xuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudDtcbiAgICB2YXIgbyA9IHRoaXMub3B0aW9ucztcblxuICAgIHJldHVybiAkZS5hdHRyKCdkYXRhLWNvbnRlbnQnKSB8fCAodHlwZW9mIG8uY29udGVudCA9PSAnZnVuY3Rpb24nID8gby5jb250ZW50LmNhbGwoJGVbMF0pIDogby5jb250ZW50KTtcbiAgfTtcblxuICBQb3BvdmVyLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy5hcnJvdycpO1xuICB9O1xuXG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicpO1xuICAgICAgdmFyIG9wdGlvbnMgPSAodHlwZW9mIG9wdGlvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob3B0aW9uKSkgPT0gJ29iamVjdCcgJiYgb3B0aW9uO1xuXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChvcHRpb24pKSByZXR1cm47XG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnBvcG92ZXInLCBkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgb3B0aW9ucykpO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ucG9wb3ZlcjtcblxuICAkLmZuLnBvcG92ZXIgPSBQbHVnaW47XG4gICQuZm4ucG9wb3Zlci5Db25zdHJ1Y3RvciA9IFBvcG92ZXI7XG5cblxuICAkLmZuLnBvcG92ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnBvcG92ZXIgPSBvbGQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KGpRdWVyeSk7XG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuXG4gIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kYm9keSA9ICQoZG9jdW1lbnQuYm9keSk7XG4gICAgdGhpcy4kc2Nyb2xsRWxlbWVudCA9ICQoZWxlbWVudCkuaXMoZG9jdW1lbnQuYm9keSkgPyAkKHdpbmRvdykgOiAkKGVsZW1lbnQpO1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBTY3JvbGxTcHkuREVGQVVMVFMsIG9wdGlvbnMpO1xuICAgIHRoaXMuc2VsZWN0b3IgPSAodGhpcy5vcHRpb25zLnRhcmdldCB8fCAnJykgKyAnIC5uYXYgbGkgPiBhJztcbiAgICB0aGlzLm9mZnNldHMgPSBbXTtcbiAgICB0aGlzLnRhcmdldHMgPSBbXTtcbiAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgPSAwO1xuXG4gICAgdGhpcy4kc2Nyb2xsRWxlbWVudC5vbignc2Nyb2xsLmJzLnNjcm9sbHNweScsICQucHJveHkodGhpcy5wcm9jZXNzLCB0aGlzKSk7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgdGhpcy5wcm9jZXNzKCk7XG4gIH1cblxuICBTY3JvbGxTcHkuVkVSU0lPTiA9ICczLjMuNyc7XG5cbiAgU2Nyb2xsU3B5LkRFRkFVTFRTID0ge1xuICAgIG9mZnNldDogMTBcbiAgfTtcblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpO1xuICB9O1xuXG4gIFNjcm9sbFNweS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdmFyIG9mZnNldE1ldGhvZCA9ICdvZmZzZXQnO1xuICAgIHZhciBvZmZzZXRCYXNlID0gMDtcblxuICAgIHRoaXMub2Zmc2V0cyA9IFtdO1xuICAgIHRoaXMudGFyZ2V0cyA9IFtdO1xuICAgIHRoaXMuc2Nyb2xsSGVpZ2h0ID0gdGhpcy5nZXRTY3JvbGxIZWlnaHQoKTtcblxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xuICAgICAgb2Zmc2V0TWV0aG9kID0gJ3Bvc2l0aW9uJztcbiAgICAgIG9mZnNldEJhc2UgPSB0aGlzLiRzY3JvbGxFbGVtZW50LnNjcm9sbFRvcCgpO1xuICAgIH1cblxuICAgIHRoaXMuJGJvZHkuZmluZCh0aGlzLnNlbGVjdG9yKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRlbCA9ICQodGhpcyk7XG4gICAgICB2YXIgaHJlZiA9ICRlbC5kYXRhKCd0YXJnZXQnKSB8fCAkZWwuYXR0cignaHJlZicpO1xuICAgICAgdmFyICRocmVmID0gL14jLi8udGVzdChocmVmKSAmJiAkKGhyZWYpO1xuXG4gICAgICByZXR1cm4gJGhyZWYgJiYgJGhyZWYubGVuZ3RoICYmICRocmVmLmlzKCc6dmlzaWJsZScpICYmIFtbJGhyZWZbb2Zmc2V0TWV0aG9kXSgpLnRvcCArIG9mZnNldEJhc2UsIGhyZWZdXSB8fCBudWxsO1xuICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICB9KS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQub2Zmc2V0cy5wdXNoKHRoaXNbMF0pO1xuICAgICAgdGhhdC50YXJnZXRzLnB1c2godGhpc1sxXSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLiRzY3JvbGxFbGVtZW50LnNjcm9sbFRvcCgpICsgdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gdGhpcy5nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICB2YXIgbWF4U2Nyb2xsID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KCk7XG4gICAgdmFyIG9mZnNldHMgPSB0aGlzLm9mZnNldHM7XG4gICAgdmFyIHRhcmdldHMgPSB0aGlzLnRhcmdldHM7XG4gICAgdmFyIGFjdGl2ZVRhcmdldCA9IHRoaXMuYWN0aXZlVGFyZ2V0O1xuICAgIHZhciBpO1xuXG4gICAgaWYgKHRoaXMuc2Nyb2xsSGVpZ2h0ICE9IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcbiAgICAgIHJldHVybiBhY3RpdmVUYXJnZXQgIT0gKGkgPSB0YXJnZXRzW3RhcmdldHMubGVuZ3RoIC0gMV0pICYmIHRoaXMuYWN0aXZhdGUoaSk7XG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCBvZmZzZXRzWzBdKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5jbGVhcigpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IG9mZnNldHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICBhY3RpdmVUYXJnZXQgIT0gdGFyZ2V0c1tpXSAmJiBzY3JvbGxUb3AgPj0gb2Zmc2V0c1tpXSAmJiAob2Zmc2V0c1tpICsgMV0gPT09IHVuZGVmaW5lZCB8fCBzY3JvbGxUb3AgPCBvZmZzZXRzW2kgKyAxXSkgJiYgdGhpcy5hY3RpdmF0ZSh0YXJnZXRzW2ldKTtcbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IHRhcmdldDtcblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgKyAnW2RhdGEtdGFyZ2V0PVwiJyArIHRhcmdldCArICdcIl0sJyArIHRoaXMuc2VsZWN0b3IgKyAnW2hyZWY9XCInICsgdGFyZ2V0ICsgJ1wiXSc7XG5cbiAgICB2YXIgYWN0aXZlID0gJChzZWxlY3RvcikucGFyZW50cygnbGknKS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cbiAgICBpZiAoYWN0aXZlLnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKS5sZW5ndGgpIHtcbiAgICAgIGFjdGl2ZSA9IGFjdGl2ZS5jbG9zZXN0KCdsaS5kcm9wZG93bicpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG5cbiAgICBhY3RpdmUudHJpZ2dlcignYWN0aXZhdGUuYnMuc2Nyb2xsc3B5Jyk7XG4gIH07XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMuc2VsZWN0b3IpLnBhcmVudHNVbnRpbCh0aGlzLm9wdGlvbnMudGFyZ2V0LCAnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScpO1xuICAgICAgdmFyIG9wdGlvbnMgPSAodHlwZW9mIG9wdGlvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob3B0aW9uKSkgPT0gJ29iamVjdCcgJiYgb3B0aW9uO1xuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScsIGRhdGEgPSBuZXcgU2Nyb2xsU3B5KHRoaXMsIG9wdGlvbnMpKTtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnNjcm9sbHNweTtcblxuICAkLmZuLnNjcm9sbHNweSA9IFBsdWdpbjtcbiAgJC5mbi5zY3JvbGxzcHkuQ29uc3RydWN0b3IgPSBTY3JvbGxTcHk7XG5cblxuICAkLmZuLnNjcm9sbHNweS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uc2Nyb2xsc3B5ID0gb2xkO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkLmJzLnNjcm9sbHNweS5kYXRhLWFwaScsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCdbZGF0YS1zcHk9XCJzY3JvbGxcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkc3B5ID0gJCh0aGlzKTtcbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksICRzcHkuZGF0YSgpKTtcbiAgICB9KTtcbiAgfSk7XG59KGpRdWVyeSk7XG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuXG4gIHZhciBUYWIgPSBmdW5jdGlvbiBUYWIoZWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gIH07XG5cbiAgVGFiLlZFUlNJT04gPSAnMy4zLjcnO1xuXG4gIFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuXG4gIFRhYi5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRoaXMgPSB0aGlzLmVsZW1lbnQ7XG4gICAgdmFyICR1bCA9ICR0aGlzLmNsb3Nlc3QoJ3VsOm5vdCguZHJvcGRvd24tbWVudSknKTtcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5kYXRhKCd0YXJnZXQnKTtcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpO1xuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJyk7IFxuICAgIH1cblxuICAgIGlmICgkdGhpcy5wYXJlbnQoJ2xpJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm47XG5cbiAgICB2YXIgJHByZXZpb3VzID0gJHVsLmZpbmQoJy5hY3RpdmU6bGFzdCBhJyk7XG4gICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMudGFiJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICB9KTtcbiAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudCgnc2hvdy5icy50YWInLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cbiAgICB9KTtcblxuICAgICRwcmV2aW91cy50cmlnZ2VyKGhpZGVFdmVudCk7XG4gICAgJHRoaXMudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybjtcblxuICAgIHZhciAkdGFyZ2V0ID0gJChzZWxlY3Rvcik7XG5cbiAgICB0aGlzLmFjdGl2YXRlKCR0aGlzLmNsb3Nlc3QoJ2xpJyksICR1bCk7XG4gICAgdGhpcy5hY3RpdmF0ZSgkdGFyZ2V0LCAkdGFyZ2V0LnBhcmVudCgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkcHJldmlvdXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdoaWRkZW4uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICAgIH0pO1xuICAgICAgJHRoaXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdzaG93bi5icy50YWInLFxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFRhYi5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIHZhciAkYWN0aXZlID0gY29udGFpbmVyLmZpbmQoJz4gLmFjdGl2ZScpO1xuICAgIHZhciB0cmFuc2l0aW9uID0gY2FsbGJhY2sgJiYgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgKCRhY3RpdmUubGVuZ3RoICYmICRhY3RpdmUuaGFzQ2xhc3MoJ2ZhZGUnKSB8fCAhIWNvbnRhaW5lci5maW5kKCc+IC5mYWRlJykubGVuZ3RoKTtcblxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKS5maW5kKCc+IC5kcm9wZG93bi1tZW51ID4gLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKS5lbmQoKS5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdhY3RpdmUnKS5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7IFxuICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdpbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmFkZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnQuY2xvc2VzdCgnbGkuZHJvcGRvd24nKS5hZGRDbGFzcygnYWN0aXZlJykuZW5kKCkuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJykuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgICRhY3RpdmUubGVuZ3RoICYmIHRyYW5zaXRpb24gPyAkYWN0aXZlLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgbmV4dCkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVGFiLlRSQU5TSVRJT05fRFVSQVRJT04pIDogbmV4dCgpO1xuXG4gICAgJGFjdGl2ZS5yZW1vdmVDbGFzcygnaW4nKTtcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoJ2JzLnRhYicpO1xuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRhYicsIGRhdGEgPSBuZXcgVGFiKHRoaXMpKTtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnRhYjtcblxuICAkLmZuLnRhYiA9IFBsdWdpbjtcbiAgJC5mbi50YWIuQ29uc3RydWN0b3IgPSBUYWI7XG5cblxuICAkLmZuLnRhYi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udGFiID0gb2xkO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIGNsaWNrSGFuZGxlcihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIFBsdWdpbi5jYWxsKCQodGhpcyksICdzaG93Jyk7XG4gIH07XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLnRhYi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nLCBjbGlja0hhbmRsZXIpLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwicGlsbFwiXScsIGNsaWNrSGFuZGxlcik7XG59KGpRdWVyeSk7XG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uIEFmZml4KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQWZmaXguREVGQVVMVFMsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJCh0aGlzLm9wdGlvbnMudGFyZ2V0KS5vbignc2Nyb2xsLmJzLmFmZml4LmRhdGEtYXBpJywgJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sIHRoaXMpKS5vbignY2xpY2suYnMuYWZmaXguZGF0YS1hcGknLCAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AsIHRoaXMpKTtcblxuICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgIHRoaXMuYWZmaXhlZCA9IG51bGw7XG4gICAgdGhpcy51bnBpbiA9IG51bGw7XG4gICAgdGhpcy5waW5uZWRPZmZzZXQgPSBudWxsO1xuXG4gICAgdGhpcy5jaGVja1Bvc2l0aW9uKCk7XG4gIH07XG5cbiAgQWZmaXguVkVSU0lPTiA9ICczLjMuNyc7XG5cbiAgQWZmaXguUkVTRVQgPSAnYWZmaXggYWZmaXgtdG9wIGFmZml4LWJvdHRvbSc7XG5cbiAgQWZmaXguREVGQVVMVFMgPSB7XG4gICAgb2Zmc2V0OiAwLFxuICAgIHRhcmdldDogd2luZG93XG4gIH07XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSkge1xuICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKCk7XG4gICAgdmFyIHBvc2l0aW9uID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKTtcbiAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gdGhpcy4kdGFyZ2V0LmhlaWdodCgpO1xuXG4gICAgaWYgKG9mZnNldFRvcCAhPSBudWxsICYmIHRoaXMuYWZmaXhlZCA9PSAndG9wJykgcmV0dXJuIHNjcm9sbFRvcCA8IG9mZnNldFRvcCA/ICd0b3AnIDogZmFsc2U7XG5cbiAgICBpZiAodGhpcy5hZmZpeGVkID09ICdib3R0b20nKSB7XG4gICAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwpIHJldHVybiBzY3JvbGxUb3AgKyB0aGlzLnVucGluIDw9IHBvc2l0aW9uLnRvcCA/IGZhbHNlIDogJ2JvdHRvbSc7XG4gICAgICByZXR1cm4gc2Nyb2xsVG9wICsgdGFyZ2V0SGVpZ2h0IDw9IHNjcm9sbEhlaWdodCAtIG9mZnNldEJvdHRvbSA/IGZhbHNlIDogJ2JvdHRvbSc7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyA9IHRoaXMuYWZmaXhlZCA9PSBudWxsO1xuICAgIHZhciBjb2xsaWRlclRvcCA9IGluaXRpYWxpemluZyA/IHNjcm9sbFRvcCA6IHBvc2l0aW9uLnRvcDtcbiAgICB2YXIgY29sbGlkZXJIZWlnaHQgPSBpbml0aWFsaXppbmcgPyB0YXJnZXRIZWlnaHQgOiBoZWlnaHQ7XG5cbiAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwgJiYgc2Nyb2xsVG9wIDw9IG9mZnNldFRvcCkgcmV0dXJuICd0b3AnO1xuICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiBjb2xsaWRlclRvcCArIGNvbGxpZGVySGVpZ2h0ID49IHNjcm9sbEhlaWdodCAtIG9mZnNldEJvdHRvbSkgcmV0dXJuICdib3R0b20nO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRQaW5uZWRPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucGlubmVkT2Zmc2V0KSByZXR1cm4gdGhpcy5waW5uZWRPZmZzZXQ7XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVCkuYWRkQ2xhc3MoJ2FmZml4Jyk7XG4gICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpO1xuICAgIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldCA9IHBvc2l0aW9uLnRvcCAtIHNjcm9sbFRvcDtcbiAgfTtcblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dCgkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcyksIDEpO1xuICB9O1xuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuO1xuXG4gICAgdmFyIGhlaWdodCA9IHRoaXMuJGVsZW1lbnQuaGVpZ2h0KCk7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMub3B0aW9ucy5vZmZzZXQ7XG4gICAgdmFyIG9mZnNldFRvcCA9IG9mZnNldC50b3A7XG4gICAgdmFyIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b207XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IE1hdGgubWF4KCQoZG9jdW1lbnQpLmhlaWdodCgpLCAkKGRvY3VtZW50LmJvZHkpLmhlaWdodCgpKTtcblxuICAgIGlmICgodHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2Zmc2V0KSkgIT0gJ29iamVjdCcpIG9mZnNldEJvdHRvbSA9IG9mZnNldFRvcCA9IG9mZnNldDtcbiAgICBpZiAodHlwZW9mIG9mZnNldFRvcCA9PSAnZnVuY3Rpb24nKSBvZmZzZXRUb3AgPSBvZmZzZXQudG9wKHRoaXMuJGVsZW1lbnQpO1xuICAgIGlmICh0eXBlb2Ygb2Zmc2V0Qm90dG9tID09ICdmdW5jdGlvbicpIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b20odGhpcy4kZWxlbWVudCk7XG5cbiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSk7XG5cbiAgICBpZiAodGhpcy5hZmZpeGVkICE9IGFmZml4KSB7XG4gICAgICBpZiAodGhpcy51bnBpbiAhPSBudWxsKSB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgJycpO1xuXG4gICAgICB2YXIgYWZmaXhUeXBlID0gJ2FmZml4JyArIChhZmZpeCA/ICctJyArIGFmZml4IDogJycpO1xuICAgICAgdmFyIGUgPSAkLkV2ZW50KGFmZml4VHlwZSArICcuYnMuYWZmaXgnKTtcblxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpO1xuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuO1xuXG4gICAgICB0aGlzLmFmZml4ZWQgPSBhZmZpeDtcbiAgICAgIHRoaXMudW5waW4gPSBhZmZpeCA9PSAnYm90dG9tJyA/IHRoaXMuZ2V0UGlubmVkT2Zmc2V0KCkgOiBudWxsO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKEFmZml4LlJFU0VUKS5hZGRDbGFzcyhhZmZpeFR5cGUpLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKTtcbiAgICB9XG5cbiAgICBpZiAoYWZmaXggPT0gJ2JvdHRvbScpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2Zmc2V0KHtcbiAgICAgICAgdG9wOiBzY3JvbGxIZWlnaHQgLSBoZWlnaHQgLSBvZmZzZXRCb3R0b21cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoJ2JzLmFmZml4Jyk7XG4gICAgICB2YXIgb3B0aW9ucyA9ICh0eXBlb2Ygb3B0aW9uID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvcHRpb24pKSA9PSAnb2JqZWN0JyAmJiBvcHRpb247XG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWZmaXgnLCBkYXRhID0gbmV3IEFmZml4KHRoaXMsIG9wdGlvbnMpKTtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmFmZml4O1xuXG4gICQuZm4uYWZmaXggPSBQbHVnaW47XG4gICQuZm4uYWZmaXguQ29uc3RydWN0b3IgPSBBZmZpeDtcblxuXG4gICQuZm4uYWZmaXgubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFmZml4ID0gb2xkO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cImFmZml4XCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICRzcHkuZGF0YSgpO1xuXG4gICAgICBkYXRhLm9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt9O1xuXG4gICAgICBpZiAoZGF0YS5vZmZzZXRCb3R0b20gIT0gbnVsbCkgZGF0YS5vZmZzZXQuYm90dG9tID0gZGF0YS5vZmZzZXRCb3R0b207XG4gICAgICBpZiAoZGF0YS5vZmZzZXRUb3AgIT0gbnVsbCkgZGF0YS5vZmZzZXQudG9wID0gZGF0YS5vZmZzZXRUb3A7XG5cbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksIGRhdGEpO1xuICAgIH0pO1xuICB9KTtcbn0oalF1ZXJ5KTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5cbihmdW5jdGlvbiAoKSB7XG4gIChmdW5jdGlvbiAobikge1xuICAgIHZhciB4ID0gdGhpcyB8fCAoMCwgZXZhbCkoXCJ0aGlzXCIpLFxuICAgICAgICB0ID0geC5kb2N1bWVudCxcbiAgICAgICAgTSA9IHgubmF2aWdhdG9yLFxuICAgICAgICB1ID0geC5qUXVlcnksXG4gICAgICAgIEggPSB4LkpTT047KGZ1bmN0aW9uIChuKSB7XG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbXCJleHBvcnRzXCIsIFwicmVxdWlyZVwiXSwgbikgOiBcIm9iamVjdFwiID09PSAodHlwZW9mIGV4cG9ydHMgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihleHBvcnRzKSkgJiYgXCJvYmplY3RcIiA9PT0gKHR5cGVvZiBtb2R1bGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSA/IG4obW9kdWxlLmV4cG9ydHMgfHwgZXhwb3J0cykgOiBuKHgua28gPSB7fSk7XG4gICAgfSkoZnVuY3Rpb24gKE4sIE8pIHtcbiAgICAgIGZ1bmN0aW9uIEooYSwgYykge1xuICAgICAgICByZXR1cm4gbnVsbCA9PT0gYSB8fCAodHlwZW9mIGEgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihhKSkgaW4gUiA/IGEgPT09IGMgOiAhMTtcbiAgICAgIH1mdW5jdGlvbiBTKGIsIGMpIHtcbiAgICAgICAgdmFyIGQ7cmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkIHx8IChkID0gYS5hLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZCA9IG47YigpO1xuICAgICAgICAgIH0sIGMpKTtcbiAgICAgICAgfTtcbiAgICAgIH1mdW5jdGlvbiBUKGIsIGMpIHtcbiAgICAgICAgdmFyIGQ7cmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoZCk7ZCA9IGEuYS5zZXRUaW1lb3V0KGIsIGMpO1xuICAgICAgICB9O1xuICAgICAgfWZ1bmN0aW9uIFUoYSwgYykge1xuICAgICAgICBjICYmIGMgIT09IEUgPyBcImJlZm9yZUNoYW5nZVwiID09PSBjID8gdGhpcy5PYihhKSA6IHRoaXMuSmEoYSwgYykgOiB0aGlzLlBiKGEpO1xuICAgICAgfWZ1bmN0aW9uIFYoYSwgYykge1xuICAgICAgICBudWxsICE9PSBjICYmIGMuayAmJiBjLmsoKTtcbiAgICAgIH1mdW5jdGlvbiBXKGEsIGMpIHtcbiAgICAgICAgdmFyIGQgPSB0aGlzLk1jLFxuICAgICAgICAgICAgZSA9IGRbc107ZS5UIHx8ICh0aGlzLm9iICYmIHRoaXMuT2FbY10gPyAoZC5TYihjLCBhLCB0aGlzLk9hW2NdKSwgdGhpcy5PYVtjXSA9IG51bGwsIC0tdGhpcy5vYikgOiBlLnNbY10gfHwgZC5TYihjLCBhLCBlLnQgPyB7ICQ6IGEgfSA6IGQueWMoYSkpLCBhLkhhICYmIGEuSGMoKSk7XG4gICAgICB9ZnVuY3Rpb24gSyhiLCBjLCBkLCBlKSB7XG4gICAgICAgIGEuZFtiXSA9IHsgaW5pdDogZnVuY3Rpb24gaW5pdChiLCBnLCBoLCBsLCBtKSB7XG4gICAgICAgICAgICB2YXIgaywgcjthLm0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgcSA9IGcoKSxcbiAgICAgICAgICAgICAgICAgIHAgPSBhLmEuYyhxKSxcbiAgICAgICAgICAgICAgICAgIHAgPSAhZCAhPT0gIXAsXG4gICAgICAgICAgICAgICAgICBBID0gIXI7aWYgKEEgfHwgYyB8fCBwICE9PSBrKSBBICYmIGEueGEuQ2EoKSAmJiAociA9IGEuYS53YShhLmYuY2hpbGROb2RlcyhiKSwgITApKSwgcCA/IChBIHx8IGEuZi5mYShiLCBhLmEud2EocikpLCBhLmhiKGUgPyBlKG0sIHEpIDogbSwgYikpIDogYS5mLnphKGIpLCBrID0gcDtcbiAgICAgICAgICAgIH0sIG51bGwsIHsgaTogYiB9KTtyZXR1cm4geyBjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczogITAgfTtcbiAgICAgICAgICB9IH07YS5oLnZhW2JdID0gITE7YS5mLmFhW2JdID0gITA7XG4gICAgICB9dmFyIGEgPSBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgTiA/IE4gOiB7fTthLmIgPSBmdW5jdGlvbiAoYiwgYykge1xuICAgICAgICBmb3IgKHZhciBkID0gYi5zcGxpdChcIi5cIiksIGUgPSBhLCBmID0gMDsgZiA8IGQubGVuZ3RoIC0gMTsgZisrKSB7XG4gICAgICAgICAgZSA9IGVbZFtmXV07XG4gICAgICAgIH1lW2RbZC5sZW5ndGggLSAxXV0gPSBjO1xuICAgICAgfTthLkggPSBmdW5jdGlvbiAoYSwgYywgZCkge1xuICAgICAgICBhW2NdID0gZDtcbiAgICAgIH07YS52ZXJzaW9uID0gXCIzLjQuMlwiO2EuYihcInZlcnNpb25cIiwgYS52ZXJzaW9uKTthLm9wdGlvbnMgPSB7IGRlZmVyVXBkYXRlczogITEsIHVzZU9ubHlOYXRpdmVFdmVudHM6ICExIH07YS5hID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBiKGEsIGIpIHtcbiAgICAgICAgICBmb3IgKHZhciBjIGluIGEpIHtcbiAgICAgICAgICAgIGEuaGFzT3duUHJvcGVydHkoYykgJiYgYihjLCBhW2NdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1mdW5jdGlvbiBjKGEsIGIpIHtcbiAgICAgICAgICBpZiAoYikgZm9yICh2YXIgYyBpbiBiKSB7XG4gICAgICAgICAgICBiLmhhc093blByb3BlcnR5KGMpICYmIChhW2NdID0gYltjXSk7XG4gICAgICAgICAgfXJldHVybiBhO1xuICAgICAgICB9ZnVuY3Rpb24gZChhLCBiKSB7XG4gICAgICAgICAgYS5fX3Byb3RvX18gPSBiO3JldHVybiBhO1xuICAgICAgICB9ZnVuY3Rpb24gZShiLCBjLCBkLCBlKSB7XG4gICAgICAgICAgdmFyIG0gPSBiW2NdLm1hdGNoKHIpIHx8IFtdO2EuYS5yKGQubWF0Y2gociksIGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICBhLmEucmEobSwgYiwgZSk7XG4gICAgICAgICAgfSk7YltjXSA9IG0uam9pbihcIiBcIik7XG4gICAgICAgIH12YXIgZiA9IHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXksXG4gICAgICAgICAgICBnID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgU3ltYm9sLFxuICAgICAgICAgICAgaCA9IHt9LFxuICAgICAgICAgICAgbCA9IHt9O2hbTSAmJiAvRmlyZWZveFxcLzIvaS50ZXN0KE0udXNlckFnZW50KSA/IFwiS2V5Ym9hcmRFdmVudFwiIDogXCJVSUV2ZW50c1wiXSA9IFtcImtleXVwXCIsIFwia2V5ZG93blwiLCBcImtleXByZXNzXCJdO2guTW91c2VFdmVudHMgPSBcImNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlXCIuc3BsaXQoXCIgXCIpO2IoaCwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICBpZiAoYi5sZW5ndGgpIGZvciAodmFyIGMgPSAwLCBkID0gYi5sZW5ndGg7IGMgPCBkOyBjKyspIHtcbiAgICAgICAgICAgIGxbYltjXV0gPSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7dmFyIG0gPSB7IHByb3BlcnR5Y2hhbmdlOiAhMCB9LFxuICAgICAgICAgICAgayA9IHQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIGEgPSAzLCBiID0gdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCBjID0gYi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlcIik7IGIuaW5uZXJIVE1MID0gXCJcXHgzYyEtLVtpZiBndCBJRSBcIiArICsrYSArIFwiXT48aT48L2k+PCFbZW5kaWZdLS1cXHgzZVwiLCBjWzBdOykge31yZXR1cm4gNCA8IGEgPyBhIDogbjtcbiAgICAgICAgfSgpLFxuICAgICAgICAgICAgciA9IC9cXFMrL2c7cmV0dXJuIHsgZ2M6IFtcImF1dGhlbnRpY2l0eV90b2tlblwiLCAvXl9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuKF8uKik/JC9dLCByOiBmdW5jdGlvbiByKGEsIGIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSAwLCBkID0gYS5sZW5ndGg7IGMgPCBkOyBjKyspIHtcbiAgICAgICAgICAgICAgYihhW2NdLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBvOiBmdW5jdGlvbiBvKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhLCBiKTtmb3IgKHZhciBjID0gMCwgZCA9IGEubGVuZ3RoOyBjIDwgZDsgYysrKSB7XG4gICAgICAgICAgICAgIGlmIChhW2NdID09PSBiKSByZXR1cm4gYztcbiAgICAgICAgICAgIH1yZXR1cm4gLTE7XG4gICAgICAgICAgfSwgVmI6IGZ1bmN0aW9uIFZiKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGQgPSAwLCBlID0gYS5sZW5ndGg7IGQgPCBlOyBkKyspIHtcbiAgICAgICAgICAgICAgaWYgKGIuY2FsbChjLCBhW2RdLCBkKSkgcmV0dXJuIGFbZF07XG4gICAgICAgICAgICB9cmV0dXJuIG51bGw7XG4gICAgICAgICAgfSwgTmE6IGZ1bmN0aW9uIE5hKGIsIGMpIHtcbiAgICAgICAgICAgIHZhciBkID0gYS5hLm8oYiwgYyk7MCA8IGQgPyBiLnNwbGljZShkLCAxKSA6IDAgPT09IGQgJiYgYi5zaGlmdCgpO1xuICAgICAgICAgIH0sIFdiOiBmdW5jdGlvbiBXYihiKSB7XG4gICAgICAgICAgICBiID0gYiB8fCBbXTtmb3IgKHZhciBjID0gW10sIGQgPSAwLCBlID0gYi5sZW5ndGg7IGQgPCBlOyBkKyspIHtcbiAgICAgICAgICAgICAgMCA+IGEuYS5vKGMsIGJbZF0pICYmIGMucHVzaChiW2RdKTtcbiAgICAgICAgICAgIH1yZXR1cm4gYztcbiAgICAgICAgICB9LCBpYjogZnVuY3Rpb24gaWIoYSwgYikge1xuICAgICAgICAgICAgYSA9IGEgfHwgW107Zm9yICh2YXIgYyA9IFtdLCBkID0gMCwgZSA9IGEubGVuZ3RoOyBkIDwgZTsgZCsrKSB7XG4gICAgICAgICAgICAgIGMucHVzaChiKGFbZF0sIGQpKTtcbiAgICAgICAgICAgIH1yZXR1cm4gYztcbiAgICAgICAgICB9LCBNYTogZnVuY3Rpb24gTWEoYSwgYikge1xuICAgICAgICAgICAgYSA9IGEgfHwgW107Zm9yICh2YXIgYyA9IFtdLCBkID0gMCwgZSA9IGEubGVuZ3RoOyBkIDwgZTsgZCsrKSB7XG4gICAgICAgICAgICAgIGIoYVtkXSwgZCkgJiYgYy5wdXNoKGFbZF0pO1xuICAgICAgICAgICAgfXJldHVybiBjO1xuICAgICAgICAgIH0sIHRhOiBmdW5jdGlvbiB0YShhLCBiKSB7XG4gICAgICAgICAgICBpZiAoYiBpbnN0YW5jZW9mIEFycmF5KSBhLnB1c2guYXBwbHkoYSwgYik7ZWxzZSBmb3IgKHZhciBjID0gMCwgZCA9IGIubGVuZ3RoOyBjIDwgZDsgYysrKSB7XG4gICAgICAgICAgICAgIGEucHVzaChiW2NdKTtcbiAgICAgICAgICAgIH1yZXR1cm4gYTtcbiAgICAgICAgICB9LCByYTogZnVuY3Rpb24gcmEoYiwgYywgZCkge1xuICAgICAgICAgICAgdmFyIGUgPSBhLmEubyhhLmEuQmIoYiksIGMpOzAgPiBlID8gZCAmJiBiLnB1c2goYykgOiBkIHx8IGIuc3BsaWNlKGUsIDEpO1xuICAgICAgICAgIH0sIGxhOiBmLCBleHRlbmQ6IGMsICRhOiBkLCBhYjogZiA/IGQgOiBjLCBEOiBiLCBFYTogZnVuY3Rpb24gRWEoYSwgYikge1xuICAgICAgICAgICAgaWYgKCFhKSByZXR1cm4gYTt2YXIgYyA9IHt9LFxuICAgICAgICAgICAgICAgIGQ7Zm9yIChkIGluIGEpIHtcbiAgICAgICAgICAgICAgYS5oYXNPd25Qcm9wZXJ0eShkKSAmJiAoY1tkXSA9IGIoYVtkXSwgZCwgYSkpO1xuICAgICAgICAgICAgfXJldHVybiBjO1xuICAgICAgICAgIH0sIHJiOiBmdW5jdGlvbiByYihiKSB7XG4gICAgICAgICAgICBmb3IgKDsgYi5maXJzdENoaWxkOykge1xuICAgICAgICAgICAgICBhLnJlbW92ZU5vZGUoYi5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBuYzogZnVuY3Rpb24gbmMoYikge1xuICAgICAgICAgICAgYiA9IGEuYS5XKGIpO2ZvciAodmFyIGMgPSAoYlswXSAmJiBiWzBdLm93bmVyRG9jdW1lbnQgfHwgdCkuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgZCA9IDAsIGUgPSBiLmxlbmd0aDsgZCA8IGU7IGQrKykge1xuICAgICAgICAgICAgICBjLmFwcGVuZENoaWxkKGEuYmEoYltkXSkpO1xuICAgICAgICAgICAgfXJldHVybiBjO1xuICAgICAgICAgIH0sIHdhOiBmdW5jdGlvbiB3YShiLCBjKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBkID0gMCwgZSA9IGIubGVuZ3RoLCBtID0gW107IGQgPCBlOyBkKyspIHtcbiAgICAgICAgICAgICAgdmFyIGsgPSBiW2RdLmNsb25lTm9kZSghMCk7bS5wdXNoKGMgPyBhLmJhKGspIDogayk7XG4gICAgICAgICAgICB9cmV0dXJuIG07XG4gICAgICAgICAgfSwgZmE6IGZ1bmN0aW9uIGZhKGIsIGMpIHtcbiAgICAgICAgICAgIGEuYS5yYihiKTtpZiAoYykgZm9yICh2YXIgZCA9IDAsIGUgPSBjLmxlbmd0aDsgZCA8IGU7IGQrKykge1xuICAgICAgICAgICAgICBiLmFwcGVuZENoaWxkKGNbZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHVjOiBmdW5jdGlvbiB1YyhiLCBjKSB7XG4gICAgICAgICAgICB2YXIgZCA9IGIubm9kZVR5cGUgPyBbYl0gOiBiO2lmICgwIDwgZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IGRbMF0sIG0gPSBlLnBhcmVudE5vZGUsIGsgPSAwLCBmID0gYy5sZW5ndGg7IGsgPCBmOyBrKyspIHtcbiAgICAgICAgICAgICAgICBtLmluc2VydEJlZm9yZShjW2tdLCBlKTtcbiAgICAgICAgICAgICAgfWsgPSAwO2ZvciAoZiA9IGQubGVuZ3RoOyBrIDwgZjsgaysrKSB7XG4gICAgICAgICAgICAgICAgYS5yZW1vdmVOb2RlKGRba10pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgQmE6IGZ1bmN0aW9uIEJhKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChhLmxlbmd0aCkge1xuICAgICAgICAgICAgICBmb3IgKGIgPSA4ID09PSBiLm5vZGVUeXBlICYmIGIucGFyZW50Tm9kZSB8fCBiOyBhLmxlbmd0aCAmJiBhWzBdLnBhcmVudE5vZGUgIT09IGI7KSB7XG4gICAgICAgICAgICAgICAgYS5zcGxpY2UoMCwgMSk7XG4gICAgICAgICAgICAgIH1mb3IgKDsgMSA8IGEubGVuZ3RoICYmIGFbYS5sZW5ndGggLSAxXS5wYXJlbnROb2RlICE9PSBiOykge1xuICAgICAgICAgICAgICAgIGEubGVuZ3RoLS07XG4gICAgICAgICAgICAgIH1pZiAoMSA8IGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBhWzBdLFxuICAgICAgICAgICAgICAgICAgICBkID0gYVthLmxlbmd0aCAtIDFdO2ZvciAoYS5sZW5ndGggPSAwOyBjICE9PSBkOykge1xuICAgICAgICAgICAgICAgICAgYS5wdXNoKGMpLCBjID0gYy5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICB9YS5wdXNoKGQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9cmV0dXJuIGE7XG4gICAgICAgICAgfSwgd2M6IGZ1bmN0aW9uIHdjKGEsIGIpIHtcbiAgICAgICAgICAgIDcgPiBrID8gYS5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiLCBiKSA6IGEuc2VsZWN0ZWQgPSBiO1xuICAgICAgICAgIH0sIGNiOiBmdW5jdGlvbiBjYihhKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gYSB8fCBhID09PSBuID8gXCJcIiA6IGEudHJpbSA/IGEudHJpbSgpIDogYS50b1N0cmluZygpLnJlcGxhY2UoL15bXFxzXFx4YTBdK3xbXFxzXFx4YTBdKyQvZywgXCJcIik7XG4gICAgICAgICAgfSwgc2Q6IGZ1bmN0aW9uIHNkKGEsIGIpIHtcbiAgICAgICAgICAgIGEgPSBhIHx8IFwiXCI7cmV0dXJuIGIubGVuZ3RoID4gYS5sZW5ndGggPyAhMSA6IGEuc3Vic3RyaW5nKDAsIGIubGVuZ3RoKSA9PT0gYjtcbiAgICAgICAgICB9LCBSYzogZnVuY3Rpb24gUmMoYSwgYikge1xuICAgICAgICAgICAgaWYgKGEgPT09IGIpIHJldHVybiAhMDtpZiAoMTEgPT09IGEubm9kZVR5cGUpIHJldHVybiAhMTtpZiAoYi5jb250YWlucykgcmV0dXJuIGIuY29udGFpbnMoMyA9PT0gYS5ub2RlVHlwZSA/IGEucGFyZW50Tm9kZSA6IGEpO2lmIChiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSByZXR1cm4gMTYgPT0gKGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSkgJiAxNik7Zm9yICg7IGEgJiYgYSAhPSBiOykge1xuICAgICAgICAgICAgICBhID0gYS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfXJldHVybiAhIWE7XG4gICAgICAgICAgfSwgcWI6IGZ1bmN0aW9uIHFiKGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLmEuUmMoYiwgYi5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgICAgICAgfSwgVGI6IGZ1bmN0aW9uIFRiKGIpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWEuYS5WYihiLCBhLmEucWIpO1xuICAgICAgICAgIH0sIEE6IGZ1bmN0aW9uIEEoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGEgJiYgYS50YWdOYW1lICYmIGEudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIH0sIFpiOiBmdW5jdGlvbiBaYihiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5vbkVycm9yID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBhLm9uRXJyb3IgJiYgYS5vbkVycm9yKGMpLCBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IDogYjtcbiAgICAgICAgICB9LCBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoX3NldFRpbWVvdXQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldFRpbWVvdXQoX3gsIF94Mikge1xuICAgICAgICAgICAgICByZXR1cm4gX3NldFRpbWVvdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0VGltZW91dC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9zZXRUaW1lb3V0LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dDtcbiAgICAgICAgICB9KGZ1bmN0aW9uIChiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChhLmEuWmIoYiksIGMpO1xuICAgICAgICAgIH0pLCBkYzogZnVuY3Rpb24gZGMoYikge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGEub25FcnJvciAmJiBhLm9uRXJyb3IoYik7dGhyb3cgYjtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIH0sIHE6IGZ1bmN0aW9uIHEoYiwgYywgZCkge1xuICAgICAgICAgICAgdmFyIGUgPSBhLmEuWmIoZCk7ZCA9IGsgJiYgbVtjXTtpZiAoYS5vcHRpb25zLnVzZU9ubHlOYXRpdmVFdmVudHMgfHwgZCB8fCAhdSkge1xuICAgICAgICAgICAgICBpZiAoZCB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGIuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBiLmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZiA9IGZ1bmN0aW9uIGYoYSkge1xuICAgICAgICAgICAgICAgICAgICBlLmNhbGwoYiwgYSk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGwgPSBcIm9uXCIgKyBjO2IuYXR0YWNoRXZlbnQobCwgZik7YS5hLkcucWEoYiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBiLmRldGFjaEV2ZW50KGwsIGYpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHRocm93IEVycm9yKFwiQnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgYWRkRXZlbnRMaXN0ZW5lciBvciBhdHRhY2hFdmVudFwiKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGIuYWRkRXZlbnRMaXN0ZW5lcihjLCBlLCAhMSk7XG4gICAgICAgICAgICB9IGVsc2UgdShiKS5iaW5kKGMsIGUpO1xuICAgICAgICAgIH0sIEZhOiBmdW5jdGlvbiBGYShiLCBjKSB7XG4gICAgICAgICAgICBpZiAoIWIgfHwgIWIubm9kZVR5cGUpIHRocm93IEVycm9yKFwiZWxlbWVudCBtdXN0IGJlIGEgRE9NIG5vZGUgd2hlbiBjYWxsaW5nIHRyaWdnZXJFdmVudFwiKTt2YXIgZDtcImlucHV0XCIgPT09IGEuYS5BKGIpICYmIGIudHlwZSAmJiBcImNsaWNrXCIgPT0gYy50b0xvd2VyQ2FzZSgpID8gKGQgPSBiLnR5cGUsIGQgPSBcImNoZWNrYm94XCIgPT0gZCB8fCBcInJhZGlvXCIgPT0gZCkgOiBkID0gITE7aWYgKGEub3B0aW9ucy51c2VPbmx5TmF0aXZlRXZlbnRzIHx8ICF1IHx8IGQpIHtcbiAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdC5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGIuZGlzcGF0Y2hFdmVudCkgZCA9IHQuY3JlYXRlRXZlbnQobFtjXSB8fCBcIkhUTUxFdmVudHNcIiksIGQuaW5pdEV2ZW50KGMsICEwLCAhMCwgeCwgMCwgMCwgMCwgMCwgMCwgITEsICExLCAhMSwgITEsIDAsIGIpLCBiLmRpc3BhdGNoRXZlbnQoZCk7ZWxzZSB0aHJvdyBFcnJvcihcIlRoZSBzdXBwbGllZCBlbGVtZW50IGRvZXNuJ3Qgc3VwcG9ydCBkaXNwYXRjaEV2ZW50XCIpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQgJiYgYi5jbGljaykgYi5jbGljaygpO2Vsc2UgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGIuZmlyZUV2ZW50KSBiLmZpcmVFdmVudChcIm9uXCIgKyBjKTtlbHNlIHRocm93IEVycm9yKFwiQnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdHJpZ2dlcmluZyBldmVudHNcIik7XG4gICAgICAgICAgICB9IGVsc2UgdShiKS50cmlnZ2VyKGMpO1xuICAgICAgICAgIH0sIGM6IGZ1bmN0aW9uIGMoYikge1xuICAgICAgICAgICAgcmV0dXJuIGEuSShiKSA/IGIoKSA6IGI7XG4gICAgICAgICAgfSwgQmI6IGZ1bmN0aW9uIEJiKGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLkkoYikgPyBiLnAoKSA6IGI7XG4gICAgICAgICAgfSwgZmI6IGZ1bmN0aW9uIGZiKGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHZhciBrO2MgJiYgKFwib2JqZWN0XCIgPT09IF90eXBlb2YoYi5jbGFzc0xpc3QpID8gKGsgPSBiLmNsYXNzTGlzdFtkID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdLCBhLmEucihjLm1hdGNoKHIpLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICBrLmNhbGwoYi5jbGFzc0xpc3QsIGEpO1xuICAgICAgICAgICAgfSkpIDogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGIuY2xhc3NOYW1lLmJhc2VWYWwgPyBlKGIuY2xhc3NOYW1lLCBcImJhc2VWYWxcIiwgYywgZCkgOiBlKGIsIFwiY2xhc3NOYW1lXCIsIGMsIGQpKTtcbiAgICAgICAgICB9LCBiYjogZnVuY3Rpb24gYmIoYiwgYykge1xuICAgICAgICAgICAgdmFyIGQgPSBhLmEuYyhjKTtpZiAobnVsbCA9PT0gZCB8fCBkID09PSBuKSBkID0gXCJcIjt2YXIgZSA9IGEuZi5maXJzdENoaWxkKGIpOyFlIHx8IDMgIT0gZS5ub2RlVHlwZSB8fCBhLmYubmV4dFNpYmxpbmcoZSkgPyBhLmYuZmEoYiwgW2Iub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkKV0pIDogZS5kYXRhID0gZDthLmEuV2MoYik7XG4gICAgICAgICAgfSwgdmM6IGZ1bmN0aW9uIHZjKGEsIGIpIHtcbiAgICAgICAgICAgIGEubmFtZSA9IGI7aWYgKDcgPj0gaykgdHJ5IHtcbiAgICAgICAgICAgICAgYS5tZXJnZUF0dHJpYnV0ZXModC5jcmVhdGVFbGVtZW50KFwiPGlucHV0IG5hbWU9J1wiICsgYS5uYW1lICsgXCInLz5cIiksICExKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGMpIHt9XG4gICAgICAgICAgfSwgV2M6IGZ1bmN0aW9uIFdjKGEpIHtcbiAgICAgICAgICAgIDkgPD0gayAmJiAoYSA9IDEgPT0gYS5ub2RlVHlwZSA/IGEgOiBhLnBhcmVudE5vZGUsIGEuc3R5bGUgJiYgKGEuc3R5bGUuem9vbSA9IGEuc3R5bGUuem9vbSkpO1xuICAgICAgICAgIH0sIFNjOiBmdW5jdGlvbiBTYyhhKSB7XG4gICAgICAgICAgICBpZiAoaykge1xuICAgICAgICAgICAgICB2YXIgYiA9IGEuc3R5bGUud2lkdGg7YS5zdHlsZS53aWR0aCA9IDA7YS5zdHlsZS53aWR0aCA9IGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgbmQ6IGZ1bmN0aW9uIG5kKGIsIGMpIHtcbiAgICAgICAgICAgIGIgPSBhLmEuYyhiKTtjID0gYS5hLmMoYyk7Zm9yICh2YXIgZCA9IFtdLCBlID0gYjsgZSA8PSBjOyBlKyspIHtcbiAgICAgICAgICAgICAgZC5wdXNoKGUpO1xuICAgICAgICAgICAgfXJldHVybiBkO1xuICAgICAgICAgIH0sIFc6IGZ1bmN0aW9uIFcoYSkge1xuICAgICAgICAgICAgZm9yICh2YXIgYiA9IFtdLCBjID0gMCwgZCA9IGEubGVuZ3RoOyBjIDwgZDsgYysrKSB7XG4gICAgICAgICAgICAgIGIucHVzaChhW2NdKTtcbiAgICAgICAgICAgIH1yZXR1cm4gYjtcbiAgICAgICAgICB9LCBiYzogZnVuY3Rpb24gYmMoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGcgPyBTeW1ib2woYSkgOiBhO1xuICAgICAgICAgIH0sIHhkOiA2ID09PSBrLFxuICAgICAgICAgIHlkOiA3ID09PSBrLCBDOiBrLCBpYzogZnVuY3Rpb24gaWMoYiwgYykge1xuICAgICAgICAgICAgZm9yICh2YXIgZCA9IGEuYS5XKGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKSkuY29uY2F0KGEuYS5XKGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZXh0YXJlYVwiKSkpLCBlID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgYyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLm5hbWUgPT09IGM7XG4gICAgICAgICAgICB9IDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGMudGVzdChhLm5hbWUpO1xuICAgICAgICAgICAgfSwgayA9IFtdLCBtID0gZC5sZW5ndGggLSAxOyAwIDw9IG07IG0tLSkge1xuICAgICAgICAgICAgICBlKGRbbV0pICYmIGsucHVzaChkW21dKTtcbiAgICAgICAgICAgIH1yZXR1cm4gaztcbiAgICAgICAgICB9LCBrZDogZnVuY3Rpb24ga2QoYikge1xuICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIGIgJiYgKGIgPSBhLmEuY2IoYikpID8gSCAmJiBILnBhcnNlID8gSC5wYXJzZShiKSA6IG5ldyBGdW5jdGlvbihcInJldHVybiBcIiArIGIpKCkgOiBudWxsO1xuICAgICAgICAgIH0sIEdiOiBmdW5jdGlvbiBHYihiLCBjLCBkKSB7XG4gICAgICAgICAgICBpZiAoIUggfHwgIUguc3RyaW5naWZ5KSB0aHJvdyBFcnJvcihcIkNhbm5vdCBmaW5kIEpTT04uc3RyaW5naWZ5KCkuIFNvbWUgYnJvd3NlcnMgKGUuZy4sIElFIDwgOCkgZG9uJ3Qgc3VwcG9ydCBpdCBuYXRpdmVseSwgYnV0IHlvdSBjYW4gb3ZlcmNvbWUgdGhpcyBieSBhZGRpbmcgYSBzY3JpcHQgcmVmZXJlbmNlIHRvIGpzb24yLmpzLCBkb3dubG9hZGFibGUgZnJvbSBodHRwOi8vd3d3Lmpzb24ub3JnL2pzb24yLmpzXCIpO1xuICAgICAgICAgICAgcmV0dXJuIEguc3RyaW5naWZ5KGEuYS5jKGIpLCBjLCBkKTtcbiAgICAgICAgICB9LCBsZDogZnVuY3Rpb24gbGQoYywgZCwgZSkge1xuICAgICAgICAgICAgZSA9IGUgfHwge307dmFyIGsgPSBlLnBhcmFtcyB8fCB7fSxcbiAgICAgICAgICAgICAgICBtID0gZS5pbmNsdWRlRmllbGRzIHx8IHRoaXMuZ2MsXG4gICAgICAgICAgICAgICAgZiA9IGM7aWYgKFwib2JqZWN0XCIgPT0gKHR5cGVvZiBjID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYykpICYmIFwiZm9ybVwiID09PSBhLmEuQShjKSkgZm9yICh2YXIgZiA9IGMuYWN0aW9uLCBsID0gbS5sZW5ndGggLSAxOyAwIDw9IGw7IGwtLSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBnID0gYS5hLmljKGMsIG1bbF0pLCBoID0gZy5sZW5ndGggLSAxOyAwIDw9IGg7IGgtLSkge1xuICAgICAgICAgICAgICAgIGtbZ1toXS5uYW1lXSA9IGdbaF0udmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1kID0gYS5hLmMoZCk7dmFyIHIgPSB0LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO3Iuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO3IuYWN0aW9uID0gZjtyLm1ldGhvZCA9IFwicG9zdFwiO2ZvciAodmFyIG4gaW4gZCkge1xuICAgICAgICAgICAgICBjID0gdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksIGMudHlwZSA9IFwiaGlkZGVuXCIsIGMubmFtZSA9IG4sIGMudmFsdWUgPSBhLmEuR2IoYS5hLmMoZFtuXSkpLCByLmFwcGVuZENoaWxkKGMpO1xuICAgICAgICAgICAgfWIoaywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgdmFyIGMgPSB0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgYy50eXBlID0gXCJoaWRkZW5cIjtjLm5hbWUgPSBhO2MudmFsdWUgPSBiO3IuYXBwZW5kQ2hpbGQoYyk7XG4gICAgICAgICAgICB9KTt0LmJvZHkuYXBwZW5kQ2hpbGQocik7ZS5zdWJtaXR0ZXIgPyBlLnN1Ym1pdHRlcihyKSA6IHIuc3VibWl0KCk7c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIH0gfTtcbiAgICAgIH0oKTthLmIoXCJ1dGlsc1wiLCBhLmEpO2EuYihcInV0aWxzLmFycmF5Rm9yRWFjaFwiLCBhLmEucik7YS5iKFwidXRpbHMuYXJyYXlGaXJzdFwiLCBhLmEuVmIpO2EuYihcInV0aWxzLmFycmF5RmlsdGVyXCIsIGEuYS5NYSk7YS5iKFwidXRpbHMuYXJyYXlHZXREaXN0aW5jdFZhbHVlc1wiLCBhLmEuV2IpO2EuYihcInV0aWxzLmFycmF5SW5kZXhPZlwiLCBhLmEubyk7YS5iKFwidXRpbHMuYXJyYXlNYXBcIiwgYS5hLmliKTthLmIoXCJ1dGlscy5hcnJheVB1c2hBbGxcIiwgYS5hLnRhKTthLmIoXCJ1dGlscy5hcnJheVJlbW92ZUl0ZW1cIiwgYS5hLk5hKTthLmIoXCJ1dGlscy5leHRlbmRcIiwgYS5hLmV4dGVuZCk7YS5iKFwidXRpbHMuZmllbGRzSW5jbHVkZWRXaXRoSnNvblBvc3RcIiwgYS5hLmdjKTthLmIoXCJ1dGlscy5nZXRGb3JtRmllbGRzXCIsIGEuYS5pYyk7YS5iKFwidXRpbHMucGVla09ic2VydmFibGVcIiwgYS5hLkJiKTthLmIoXCJ1dGlscy5wb3N0SnNvblwiLCBhLmEubGQpO2EuYihcInV0aWxzLnBhcnNlSnNvblwiLCBhLmEua2QpO2EuYihcInV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyXCIsIGEuYS5xKTthLmIoXCJ1dGlscy5zdHJpbmdpZnlKc29uXCIsIGEuYS5HYik7YS5iKFwidXRpbHMucmFuZ2VcIiwgYS5hLm5kKTthLmIoXCJ1dGlscy50b2dnbGVEb21Ob2RlQ3NzQ2xhc3NcIiwgYS5hLmZiKTthLmIoXCJ1dGlscy50cmlnZ2VyRXZlbnRcIiwgYS5hLkZhKTthLmIoXCJ1dGlscy51bndyYXBPYnNlcnZhYmxlXCIsIGEuYS5jKTthLmIoXCJ1dGlscy5vYmplY3RGb3JFYWNoXCIsIGEuYS5EKTthLmIoXCJ1dGlscy5hZGRPclJlbW92ZUl0ZW1cIiwgYS5hLnJhKTthLmIoXCJ1dGlscy5zZXRUZXh0Q29udGVudFwiLCBhLmEuYmIpO2EuYihcInVud3JhcFwiLCBhLmEuYyk7RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIGMgPSB0aGlzO2lmICgxID09PSBhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjLmFwcGx5KGEsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07dmFyIGQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO3JldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSBkLnNsaWNlKDApO2UucHVzaC5hcHBseShlLCBhcmd1bWVudHMpO3JldHVybiBjLmFwcGx5KGEsIGUpO1xuICAgICAgICB9O1xuICAgICAgfSk7YS5hLmUgPSBuZXcgZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBhKGIsIGcpIHtcbiAgICAgICAgICB2YXIgaCA9IGJbZF07aWYgKCFoIHx8IFwibnVsbFwiID09PSBoIHx8ICFlW2hdKSB7XG4gICAgICAgICAgICBpZiAoIWcpIHJldHVybiBuO2ggPSBiW2RdID0gXCJrb1wiICsgYysrO2VbaF0gPSB7fTtcbiAgICAgICAgICB9cmV0dXJuIGVbaF07XG4gICAgICAgIH12YXIgYyA9IDAsXG4gICAgICAgICAgICBkID0gXCJfX2tvX19cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgZSA9IHt9O3JldHVybiB7IGdldDogZnVuY3Rpb24gZ2V0KGMsIGQpIHtcbiAgICAgICAgICAgIHZhciBlID0gYShjLCAhMSk7cmV0dXJuIGUgPT09IG4gPyBuIDogZVtkXTtcbiAgICAgICAgICB9LCBzZXQ6IGZ1bmN0aW9uIHNldChjLCBkLCBlKSB7XG4gICAgICAgICAgICBpZiAoZSAhPT0gbiB8fCBhKGMsICExKSAhPT0gbikgYShjLCAhMClbZF0gPSBlO1xuICAgICAgICAgIH0sIGNsZWFyOiBmdW5jdGlvbiBjbGVhcihhKSB7XG4gICAgICAgICAgICB2YXIgYiA9IGFbZF07cmV0dXJuIGIgPyAoZGVsZXRlIGVbYl0sIGFbZF0gPSBudWxsLCAhMCkgOiAhMTtcbiAgICAgICAgICB9LCBKOiBmdW5jdGlvbiBKKCkge1xuICAgICAgICAgICAgcmV0dXJuIGMrKyArIGQ7XG4gICAgICAgICAgfSB9O1xuICAgICAgfSgpO2EuYihcInV0aWxzLmRvbURhdGFcIiwgYS5hLmUpO2EuYihcInV0aWxzLmRvbURhdGEuY2xlYXJcIiwgYS5hLmUuY2xlYXIpO2EuYS5HID0gbmV3IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYihiLCBjKSB7XG4gICAgICAgICAgdmFyIGUgPSBhLmEuZS5nZXQoYiwgZCk7ZSA9PT0gbiAmJiBjICYmIChlID0gW10sIGEuYS5lLnNldChiLCBkLCBlKSk7cmV0dXJuIGU7XG4gICAgICAgIH1mdW5jdGlvbiBjKGQpIHtcbiAgICAgICAgICB2YXIgZSA9IGIoZCwgITEpO2lmIChlKSBmb3IgKHZhciBlID0gZS5zbGljZSgwKSwgbCA9IDA7IGwgPCBlLmxlbmd0aDsgbCsrKSB7XG4gICAgICAgICAgICBlW2xdKGQpO1xuICAgICAgICAgIH1hLmEuZS5jbGVhcihkKTthLmEuRy5jbGVhbkV4dGVybmFsRGF0YShkKTtpZiAoZltkLm5vZGVUeXBlXSkgZm9yIChlID0gZC5maXJzdENoaWxkOyBkID0gZTspIHtcbiAgICAgICAgICAgIGUgPSBkLm5leHRTaWJsaW5nLCA4ID09PSBkLm5vZGVUeXBlICYmIGMoZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9dmFyIGQgPSBhLmEuZS5KKCksXG4gICAgICAgICAgICBlID0geyAxOiAhMCwgODogITAsIDk6ICEwIH0sXG4gICAgICAgICAgICBmID0geyAxOiAhMCwgOTogITAgfTtyZXR1cm4geyBxYTogZnVuY3Rpb24gcWEoYSwgYykge1xuICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgYykgdGhyb3cgRXJyb3IoXCJDYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb25cIik7YihhLCAhMCkucHVzaChjKTtcbiAgICAgICAgICB9LCB0YzogZnVuY3Rpb24gdGMoYywgZSkge1xuICAgICAgICAgICAgdmFyIGYgPSBiKGMsICExKTtmICYmIChhLmEuTmEoZiwgZSksIDAgPT0gZi5sZW5ndGggJiYgYS5hLmUuc2V0KGMsIGQsIG4pKTtcbiAgICAgICAgICB9LCBiYTogZnVuY3Rpb24gYmEoYikge1xuICAgICAgICAgICAgaWYgKGVbYi5ub2RlVHlwZV0gJiYgKGMoYiksIGZbYi5ub2RlVHlwZV0pKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gW107YS5hLnRhKGQsIGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpKTtmb3IgKHZhciBsID0gMCwgbSA9IGQubGVuZ3RoOyBsIDwgbTsgbCsrKSB7XG4gICAgICAgICAgICAgICAgYyhkW2xdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfXJldHVybiBiO1xuICAgICAgICAgIH0sIHJlbW92ZU5vZGU6IGZ1bmN0aW9uIHJlbW92ZU5vZGUoYikge1xuICAgICAgICAgICAgYS5iYShiKTtiLnBhcmVudE5vZGUgJiYgYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpO1xuICAgICAgICAgIH0sIGNsZWFuRXh0ZXJuYWxEYXRhOiBmdW5jdGlvbiBjbGVhbkV4dGVybmFsRGF0YShhKSB7XG4gICAgICAgICAgICB1ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdS5jbGVhbkRhdGEgJiYgdS5jbGVhbkRhdGEoW2FdKTtcbiAgICAgICAgICB9IH07XG4gICAgICB9KCk7XG4gICAgICBhLmJhID0gYS5hLkcuYmE7YS5yZW1vdmVOb2RlID0gYS5hLkcucmVtb3ZlTm9kZTthLmIoXCJjbGVhbk5vZGVcIiwgYS5iYSk7YS5iKFwicmVtb3ZlTm9kZVwiLCBhLnJlbW92ZU5vZGUpO2EuYihcInV0aWxzLmRvbU5vZGVEaXNwb3NhbFwiLCBhLmEuRyk7YS5iKFwidXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFja1wiLCBhLmEuRy5xYSk7YS5iKFwidXRpbHMuZG9tTm9kZURpc3Bvc2FsLnJlbW92ZURpc3Bvc2VDYWxsYmFja1wiLCBhLmEuRy50Yyk7KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGIgPSBbMCwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICBjID0gWzEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCJdLFxuICAgICAgICAgICAgZCA9IFszLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxcbiAgICAgICAgICAgIGUgPSBbMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCJdLFxuICAgICAgICAgICAgZiA9IHsgdGhlYWQ6IGMsIHRib2R5OiBjLCB0Zm9vdDogYywgdHI6IFsyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiXSwgdGQ6IGQsIHRoOiBkLCBvcHRpb246IGUsIG9wdGdyb3VwOiBlIH0sXG4gICAgICAgICAgICBnID0gOCA+PSBhLmEuQzthLmEubmEgPSBmdW5jdGlvbiAoYywgZCkge1xuICAgICAgICAgIHZhciBlO2lmICh1KSB7XG4gICAgICAgICAgICBpZiAodS5wYXJzZUhUTUwpIGUgPSB1LnBhcnNlSFRNTChjLCBkKSB8fCBbXTtlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKChlID0gdS5jbGVhbihbY10sIGQpKSAmJiBlWzBdKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IGVbMF07IGsucGFyZW50Tm9kZSAmJiAxMSAhPT0gay5wYXJlbnROb2RlLm5vZGVUeXBlOykge1xuICAgICAgICAgICAgICAgICAgayA9IGsucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB9ay5wYXJlbnROb2RlICYmIGsucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoZSA9IGQpIHx8IChlID0gdCk7dmFyIGsgPSBlLnBhcmVudFdpbmRvdyB8fCBlLmRlZmF1bHRWaWV3IHx8IHgsXG4gICAgICAgICAgICAgICAgciA9IGEuYS5jYihjKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgIHEgPSBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICAgICAgICAgICAgcDtwID0gKHIgPSByLm1hdGNoKC9ePChbYS16XSspWyA+XS8pKSAmJiBmW3JbMV1dIHx8IGI7ciA9IHBbMF07cCA9IFwiaWdub3JlZDxkaXY+XCIgKyBwWzFdICsgYyArIHBbMl0gKyBcIjwvZGl2PlwiO1wiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygay5pbm5lclNoaXYgPyBxLmFwcGVuZENoaWxkKGsuaW5uZXJTaGl2KHApKSA6IChnICYmIGUuYXBwZW5kQ2hpbGQocSksIHEuaW5uZXJIVE1MID0gcCwgZyAmJiBxLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocSkpO2ZvciAoOyByLS07KSB7XG4gICAgICAgICAgICAgIHEgPSBxLmxhc3RDaGlsZDtcbiAgICAgICAgICAgIH1lID0gYS5hLlcocS5sYXN0Q2hpbGQuY2hpbGROb2Rlcyk7XG4gICAgICAgICAgfXJldHVybiBlO1xuICAgICAgICB9O2EuYS5FYiA9IGZ1bmN0aW9uIChiLCBjKSB7XG4gICAgICAgICAgYS5hLnJiKGIpO2MgPSBhLmEuYyhjKTtpZiAobnVsbCAhPT0gYyAmJiBjICE9PSBuKSBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgYyAmJiAoYyA9IGMudG9TdHJpbmcoKSksIHUpIHUoYikuaHRtbChjKTtlbHNlIGZvciAodmFyIGQgPSBhLmEubmEoYywgYi5vd25lckRvY3VtZW50KSwgZSA9IDA7IGUgPCBkLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICBiLmFwcGVuZENoaWxkKGRbZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKCk7YS5iKFwidXRpbHMucGFyc2VIdG1sRnJhZ21lbnRcIiwgYS5hLm5hKTthLmIoXCJ1dGlscy5zZXRIdG1sXCIsIGEuYS5FYik7YS5OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBiKGMsIGUpIHtcbiAgICAgICAgICBpZiAoYykgaWYgKDggPT0gYy5ub2RlVHlwZSkge1xuICAgICAgICAgICAgdmFyIGYgPSBhLk4ucGMoYy5ub2RlVmFsdWUpO251bGwgIT0gZiAmJiBlLnB1c2goeyBRYzogYywgaGQ6IGYgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgxID09IGMubm9kZVR5cGUpIGZvciAodmFyIGYgPSAwLCBnID0gYy5jaGlsZE5vZGVzLCBoID0gZy5sZW5ndGg7IGYgPCBoOyBmKyspIHtcbiAgICAgICAgICAgIGIoZ1tmXSwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9dmFyIGMgPSB7fTtyZXR1cm4geyB5YjogZnVuY3Rpb24geWIoYSkge1xuICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgYSkgdGhyb3cgRXJyb3IoXCJZb3UgY2FuIG9ubHkgcGFzcyBhIGZ1bmN0aW9uIHRvIGtvLm1lbW9pemF0aW9uLm1lbW9pemUoKVwiKTt2YXIgYiA9ICg0Mjk0OTY3Mjk2ICogKDEgKyBNYXRoLnJhbmRvbSgpKSB8IDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSkgKyAoNDI5NDk2NzI5NiAqICgxICsgTWF0aC5yYW5kb20oKSkgfCAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO2NbYl0gPSBhO3JldHVybiBcIlxceDNjIS0tW2tvX21lbW86XCIgKyBiICsgXCJdLS1cXHgzZVwiO1xuICAgICAgICAgIH0sIEJjOiBmdW5jdGlvbiBCYyhhLCBiKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGNbYV07aWYgKGYgPT09IG4pIHRocm93IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhbnkgbWVtbyB3aXRoIElEIFwiICsgYSArIFwiLiBQZXJoYXBzIGl0J3MgYWxyZWFkeSBiZWVuIHVubWVtb2l6ZWQuXCIpO3RyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBmLmFwcGx5KG51bGwsIGIgfHwgW10pLCAhMDtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBjW2FdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIENjOiBmdW5jdGlvbiBDYyhjLCBlKSB7XG4gICAgICAgICAgICB2YXIgZiA9IFtdO2IoYywgZik7Zm9yICh2YXIgZyA9IDAsIGggPSBmLmxlbmd0aDsgZyA8IGg7IGcrKykge1xuICAgICAgICAgICAgICB2YXIgbCA9IGZbZ10uUWMsXG4gICAgICAgICAgICAgICAgICBtID0gW2xdO2UgJiYgYS5hLnRhKG0sIGUpO2EuTi5CYyhmW2ddLmhkLCBtKTtsLm5vZGVWYWx1ZSA9IFwiXCI7bC5wYXJlbnROb2RlICYmIGwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBwYzogZnVuY3Rpb24gcGMoYSkge1xuICAgICAgICAgICAgcmV0dXJuIChhID0gYS5tYXRjaCgvXlxcW2tvX21lbW9cXDooLio/KVxcXSQvKSkgPyBhWzFdIDogbnVsbDtcbiAgICAgICAgICB9IH07XG4gICAgICB9KCk7YS5iKFwibWVtb2l6YXRpb25cIiwgYS5OKTthLmIoXCJtZW1vaXphdGlvbi5tZW1vaXplXCIsIGEuTi55Yik7YS5iKFwibWVtb2l6YXRpb24udW5tZW1vaXplXCIsIGEuTi5CYyk7YS5iKFwibWVtb2l6YXRpb24ucGFyc2VNZW1vVGV4dFwiLCBhLk4ucGMpO2EuYihcIm1lbW9pemF0aW9uLnVubWVtb2l6ZURvbU5vZGVBbmREZXNjZW5kYW50c1wiLCBhLk4uQ2MpO2EuWiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYigpIHtcbiAgICAgICAgICBpZiAoZSkgZm9yICh2YXIgYiA9IGUsIGMgPSAwLCBtOyBnIDwgZTspIHtcbiAgICAgICAgICAgIGlmIChtID0gZFtnKytdKSB7XG4gICAgICAgICAgICAgIGlmIChnID4gYikge1xuICAgICAgICAgICAgICAgIGlmICg1RTMgPD0gKytjKSB7XG4gICAgICAgICAgICAgICAgICBnID0gZTthLmEuZGMoRXJyb3IoXCInVG9vIG11Y2ggcmVjdXJzaW9uJyBhZnRlciBwcm9jZXNzaW5nIFwiICsgYyArIFwiIHRhc2sgZ3JvdXBzLlwiKSk7YnJlYWs7XG4gICAgICAgICAgICAgICAgfWIgPSBlO1xuICAgICAgICAgICAgICB9dHJ5IHtcbiAgICAgICAgICAgICAgICBtKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGspIHtcbiAgICAgICAgICAgICAgICBhLmEuZGMoayk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1mdW5jdGlvbiBjKCkge1xuICAgICAgICAgIGIoKTtnID0gZSA9IGQubGVuZ3RoID0gMDtcbiAgICAgICAgfXZhciBkID0gW10sXG4gICAgICAgICAgICBlID0gMCxcbiAgICAgICAgICAgIGYgPSAxLFxuICAgICAgICAgICAgZyA9IDA7cmV0dXJuIHsgc2NoZWR1bGVyOiB4Lk11dGF0aW9uT2JzZXJ2ZXIgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgdmFyIGIgPSB0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmV3IE11dGF0aW9uT2JzZXJ2ZXIoYSkub2JzZXJ2ZShiLCB7IGF0dHJpYnV0ZXM6ICEwIH0pO3JldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGIuY2xhc3NMaXN0LnRvZ2dsZShcImZvb1wiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfShjKSA6IHQgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiB0LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgdmFyIGIgPSB0LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7Yi5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDt0LmRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZChiKTtiID0gbnVsbDthKCk7XG4gICAgICAgICAgICB9O3QuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGIpO1xuICAgICAgICAgIH0gOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChhLCAwKTtcbiAgICAgICAgICB9LCBaYTogZnVuY3Rpb24gWmEoYikge1xuICAgICAgICAgICAgZSB8fCBhLlouc2NoZWR1bGVyKGMpO2RbZSsrXSA9IGI7cmV0dXJuIGYrKztcbiAgICAgICAgICB9LCBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbChhKSB7XG4gICAgICAgICAgICBhIC09IGYgLSBlO2EgPj0gZyAmJiBhIDwgZSAmJiAoZFthXSA9IG51bGwpO1xuICAgICAgICAgIH0sIHJlc2V0Rm9yVGVzdGluZzogZnVuY3Rpb24gcmVzZXRGb3JUZXN0aW5nKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBlIC0gZztnID0gZSA9IGQubGVuZ3RoID0gMDtyZXR1cm4gYTtcbiAgICAgICAgICB9LCByZDogYiB9O1xuICAgICAgfSgpO2EuYihcInRhc2tzXCIsIGEuWik7YS5iKFwidGFza3Muc2NoZWR1bGVcIiwgYS5aLlphKTthLmIoXCJ0YXNrcy5ydW5FYXJseVwiLCBhLloucmQpO2EuQWEgPSB7IHRocm90dGxlOiBmdW5jdGlvbiB0aHJvdHRsZShiLCBjKSB7XG4gICAgICAgICAgYi50aHJvdHRsZUV2YWx1YXRpb24gPSBjO3ZhciBkID0gbnVsbDtyZXR1cm4gYS5CKHsgcmVhZDogYiwgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKGUpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGQpO1xuICAgICAgICAgICAgICBkID0gYS5hLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGIoZSk7XG4gICAgICAgICAgICAgIH0sIGMpO1xuICAgICAgICAgICAgfSB9KTtcbiAgICAgICAgfSwgcmF0ZUxpbWl0OiBmdW5jdGlvbiByYXRlTGltaXQoYSwgYykge1xuICAgICAgICAgIHZhciBkLCBlLCBmO1wibnVtYmVyXCIgPT0gdHlwZW9mIGMgPyBkID0gYyA6IChkID0gYy50aW1lb3V0LCBlID0gYy5tZXRob2QpO2EuZ2IgPSAhMTtmID0gXCJub3RpZnlXaGVuQ2hhbmdlc1N0b3BcIiA9PSBlID8gVCA6IFM7YS5XYShmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGYoYSwgZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGRlZmVycmVkOiBmdW5jdGlvbiBkZWZlcnJlZChiLCBjKSB7XG4gICAgICAgICAgaWYgKCEwICE9PSBjKSB0aHJvdyBFcnJvcihcIlRoZSAnZGVmZXJyZWQnIGV4dGVuZGVyIG9ubHkgYWNjZXB0cyB0aGUgdmFsdWUgJ3RydWUnLCBiZWNhdXNlIGl0IGlzIG5vdCBzdXBwb3J0ZWQgdG8gdHVybiBkZWZlcnJhbCBvZmYgb25jZSBlbmFibGVkLlwiKTtiLmdiIHx8IChiLmdiID0gITAsIGIuV2EoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgIGYgPSAhMTtyZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIWYpIHtcbiAgICAgICAgICAgICAgICBhLlouY2FuY2VsKGUpO2UgPSBhLlouWmEoYyk7dHJ5IHtcbiAgICAgICAgICAgICAgICAgIGYgPSAhMCwgYi5ub3RpZnlTdWJzY3JpYmVycyhuLCBcImRpcnR5XCIpO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICBmID0gITE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoYSwgYykge1xuICAgICAgICAgIGEuZXF1YWxpdHlDb21wYXJlciA9IFwiYWx3YXlzXCIgPT0gYyA/IG51bGwgOiBKO1xuICAgICAgICB9IH07dmFyIFIgPSB7IHVuZGVmaW5lZDogMSwgXCJib29sZWFuXCI6IDEsIG51bWJlcjogMSwgc3RyaW5nOiAxIH07YS5iKFwiZXh0ZW5kZXJzXCIsIGEuQWEpO2EuemMgPSBmdW5jdGlvbiAoYiwgYywgZCkge1xuICAgICAgICB0aGlzLiQgPSBiO3RoaXMuamIgPSBjO3RoaXMuUGMgPSBkO3RoaXMuVCA9ICExO2EuSCh0aGlzLCBcImRpc3Bvc2VcIiwgdGhpcy5rKTtcbiAgICAgIH07YS56Yy5wcm90b3R5cGUuayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5UID0gITA7dGhpcy5QYygpO1xuICAgICAgfTthLksgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGEuYS5hYih0aGlzLCBEKTtELnViKHRoaXMpO1xuICAgICAgfTt2YXIgRSA9IFwiY2hhbmdlXCIsXG4gICAgICAgICAgRCA9IHsgdWI6IGZ1bmN0aW9uIHViKGEpIHtcbiAgICAgICAgICBhLkYgPSB7IGNoYW5nZTogW10gfTthLlFiID0gMTtcbiAgICAgICAgfSwgWTogZnVuY3Rpb24gWShiLCBjLCBkKSB7XG4gICAgICAgICAgdmFyIGUgPSB0aGlzO2QgPSBkIHx8IEU7dmFyIGYgPSBuZXcgYS56YyhlLCBjID8gYi5iaW5kKGMpIDogYiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYS5hLk5hKGUuRltkXSwgZik7ZS5LYSAmJiBlLkthKGQpO1xuICAgICAgICAgIH0pO2UudWEgJiYgZS51YShkKTtcbiAgICAgICAgICBlLkZbZF0gfHwgKGUuRltkXSA9IFtdKTtlLkZbZF0ucHVzaChmKTtyZXR1cm4gZjtcbiAgICAgICAgfSwgbm90aWZ5U3Vic2NyaWJlcnM6IGZ1bmN0aW9uIG5vdGlmeVN1YnNjcmliZXJzKGIsIGMpIHtcbiAgICAgICAgICBjID0gYyB8fCBFO2MgPT09IEUgJiYgdGhpcy5LYigpO2lmICh0aGlzLlJhKGMpKSB7XG4gICAgICAgICAgICB2YXIgZCA9IGMgPT09IEUgJiYgdGhpcy5GYyB8fCB0aGlzLkZbY10uc2xpY2UoMCk7dHJ5IHtcbiAgICAgICAgICAgICAgYS5sLlhiKCk7Zm9yICh2YXIgZSA9IDAsIGY7IGYgPSBkW2VdOyArK2UpIHtcbiAgICAgICAgICAgICAgICBmLlQgfHwgZi5qYihiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgYS5sLmVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgUGE6IGZ1bmN0aW9uIFBhKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLlFiO1xuICAgICAgICB9LCBaYzogZnVuY3Rpb24gWmMoYSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLlBhKCkgIT09IGE7XG4gICAgICAgIH0sIEtiOiBmdW5jdGlvbiBLYigpIHtcbiAgICAgICAgICArK3RoaXMuUWI7XG4gICAgICAgIH0sIFdhOiBmdW5jdGlvbiBXYShiKSB7XG4gICAgICAgICAgdmFyIGMgPSB0aGlzLFxuICAgICAgICAgICAgICBkID0gYS5JKGMpLFxuICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICBoO2MuSmEgfHwgKGMuSmEgPSBjLm5vdGlmeVN1YnNjcmliZXJzLCBjLm5vdGlmeVN1YnNjcmliZXJzID0gVSk7dmFyIGwgPSBiKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGMuSGEgPSAhMTtkICYmIGggPT09IGMgJiYgKGggPSBjLk1iID8gYy5NYigpIDogYygpKTt2YXIgYSA9IGYgfHwgYy5VYShnLCBoKTtmID0gZSA9ICExO1xuICAgICAgICAgICAgYSAmJiBjLkphKGcgPSBoKTtcbiAgICAgICAgICB9KTtjLlBiID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGMuRmMgPSBjLkZbRV0uc2xpY2UoMCk7Yy5IYSA9IGUgPSAhMDtoID0gYTtsKCk7XG4gICAgICAgICAgfTtjLk9iID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGUgfHwgKGcgPSBhLCBjLkphKGEsIFwiYmVmb3JlQ2hhbmdlXCIpKTtcbiAgICAgICAgICB9O2MuSGMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjLlVhKGcsIGMucCghMCkpICYmIChmID0gITApO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sIFJhOiBmdW5jdGlvbiBSYShhKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuRlthXSAmJiB0aGlzLkZbYV0ubGVuZ3RoO1xuICAgICAgICB9LCBYYzogZnVuY3Rpb24gWGMoYikge1xuICAgICAgICAgIGlmIChiKSByZXR1cm4gdGhpcy5GW2JdICYmIHRoaXMuRltiXS5sZW5ndGggfHwgMDt2YXIgYyA9IDA7YS5hLkQodGhpcy5GLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgXCJkaXJ0eVwiICE9PSBhICYmIChjICs9IGIubGVuZ3RoKTtcbiAgICAgICAgICB9KTtyZXR1cm4gYztcbiAgICAgICAgfSwgVWE6IGZ1bmN0aW9uIFVhKGEsIGMpIHtcbiAgICAgICAgICByZXR1cm4gIXRoaXMuZXF1YWxpdHlDb21wYXJlciB8fCAhdGhpcy5lcXVhbGl0eUNvbXBhcmVyKGEsIGMpO1xuICAgICAgICB9LCBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChiKSB7XG4gICAgICAgICAgdmFyIGMgPSB0aGlzO2IgJiYgYS5hLkQoYiwgZnVuY3Rpb24gKGIsIGUpIHtcbiAgICAgICAgICAgIHZhciBmID0gYS5BYVtiXTtcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGYgJiYgKGMgPSBmKGMsIGUpIHx8IGMpO1xuICAgICAgICAgIH0pO3JldHVybiBjO1xuICAgICAgICB9IH07YS5IKEQsIFwic3Vic2NyaWJlXCIsIEQuWSk7YS5IKEQsIFwiZXh0ZW5kXCIsIEQuZXh0ZW5kKTthLkgoRCwgXCJnZXRTdWJzY3JpcHRpb25zQ291bnRcIiwgRC5YYyk7YS5hLmxhICYmIGEuYS4kYShELCBGdW5jdGlvbi5wcm90b3R5cGUpO2EuSy5mbiA9IEQ7YS5sYyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9IGEgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBhLlkgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBhLm5vdGlmeVN1YnNjcmliZXJzO1xuICAgICAgfTthLmIoXCJzdWJzY3JpYmFibGVcIiwgYS5LKTthLmIoXCJpc1N1YnNjcmliYWJsZVwiLCBhLmxjKTthLnhhID0gYS5sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBiKGEpIHtcbiAgICAgICAgICBkLnB1c2goZSk7ZSA9IGE7XG4gICAgICAgIH1mdW5jdGlvbiBjKCkge1xuICAgICAgICAgIGUgPSBkLnBvcCgpO1xuICAgICAgICB9dmFyIGQgPSBbXSxcbiAgICAgICAgICAgIGUsXG4gICAgICAgICAgICBmID0gMDtyZXR1cm4geyBYYjogYiwgZW5kOiBjLCBzYzogZnVuY3Rpb24gc2MoYikge1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgaWYgKCFhLmxjKGIpKSB0aHJvdyBFcnJvcihcIk9ubHkgc3Vic2NyaWJhYmxlIHRoaW5ncyBjYW4gYWN0IGFzIGRlcGVuZGVuY2llc1wiKTtcbiAgICAgICAgICAgICAgZS5qYi5jYWxsKGUuTGMsIGIsIGIuR2MgfHwgKGIuR2MgPSArK2YpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB3OiBmdW5jdGlvbiB3KGEsIGQsIGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBiKCksIGEuYXBwbHkoZCwgZSB8fCBbXSk7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBjKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgQ2E6IGZ1bmN0aW9uIENhKCkge1xuICAgICAgICAgICAgaWYgKGUpIHJldHVybiBlLm0uQ2EoKTtcbiAgICAgICAgICB9LCBWYTogZnVuY3Rpb24gVmEoKSB7XG4gICAgICAgICAgICBpZiAoZSkgcmV0dXJuIGUuVmE7XG4gICAgICAgICAgfSB9O1xuICAgICAgfSgpO2EuYihcImNvbXB1dGVkQ29udGV4dFwiLCBhLnhhKTthLmIoXCJjb21wdXRlZENvbnRleHQuZ2V0RGVwZW5kZW5jaWVzQ291bnRcIiwgYS54YS5DYSk7YS5iKFwiY29tcHV0ZWRDb250ZXh0LmlzSW5pdGlhbFwiLCBhLnhhLlZhKTthLmIoXCJpZ25vcmVEZXBlbmRlbmNpZXNcIiwgYS53ZCA9IGEubC53KTt2YXIgRiA9IGEuYS5iYyhcIl9sYXRlc3RWYWx1ZVwiKTthLk8gPSBmdW5jdGlvbiAoYikge1xuICAgICAgICBmdW5jdGlvbiBjKCkge1xuICAgICAgICAgIGlmICgwIDwgYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGMuVWEoY1tGXSwgYXJndW1lbnRzWzBdKSAmJiAoYy5pYSgpLCBjW0ZdID0gYXJndW1lbnRzWzBdLCBjLmhhKCkpLCB0aGlzO2EubC5zYyhjKTtyZXR1cm4gY1tGXTtcbiAgICAgICAgfVxuICAgICAgICBjW0ZdID0gYjthLmEubGEgfHwgYS5hLmV4dGVuZChjLCBhLksuZm4pO2EuSy5mbi51YihjKTthLmEuYWIoYywgQik7YS5vcHRpb25zLmRlZmVyVXBkYXRlcyAmJiBhLkFhLmRlZmVycmVkKGMsICEwKTtyZXR1cm4gYztcbiAgICAgIH07dmFyIEIgPSB7IGVxdWFsaXR5Q29tcGFyZXI6IEosIHA6IGZ1bmN0aW9uIHAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbRl07XG4gICAgICAgIH0sIGhhOiBmdW5jdGlvbiBoYSgpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKHRoaXNbRl0pO1xuICAgICAgICB9LCBpYTogZnVuY3Rpb24gaWEoKSB7XG4gICAgICAgICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycyh0aGlzW0ZdLCBcImJlZm9yZUNoYW5nZVwiKTtcbiAgICAgICAgfSB9O2EuYS5sYSAmJiBhLmEuJGEoQiwgYS5LLmZuKTt2YXIgSSA9IGEuTy5tZCA9IFwiX19rb19wcm90b19fXCI7QltJXSA9IGEuTzthLlFhID0gZnVuY3Rpb24gKGIsIGMpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgPT09IGIgfHwgYiA9PT0gbiB8fCBiW0ldID09PSBuID8gITEgOiBiW0ldID09PSBjID8gITAgOiBhLlFhKGJbSV0sIGMpO1xuICAgICAgfTthLkkgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICByZXR1cm4gYS5RYShiLCBhLk8pO1xuICAgICAgfTthLkRhID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYiAmJiBiW0ldID09PSBhLk8gfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBiICYmIGJbSV0gPT09IGEuQiAmJiBiLiRjID8gITAgOiAhMTtcbiAgICAgIH07YS5iKFwib2JzZXJ2YWJsZVwiLCBhLk8pO2EuYihcImlzT2JzZXJ2YWJsZVwiLCBhLkkpO2EuYihcImlzV3JpdGVhYmxlT2JzZXJ2YWJsZVwiLCBhLkRhKTthLmIoXCJpc1dyaXRhYmxlT2JzZXJ2YWJsZVwiLCBhLkRhKTthLmIoXCJvYnNlcnZhYmxlLmZuXCIsIEIpO2EuSChCLCBcInBlZWtcIiwgQi5wKTthLkgoQiwgXCJ2YWx1ZUhhc011dGF0ZWRcIiwgQi5oYSk7YS5IKEIsIFwidmFsdWVXaWxsTXV0YXRlXCIsIEIuaWEpO2EubWEgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICBiID0gYiB8fCBbXTtpZiAoXCJvYmplY3RcIiAhPSAodHlwZW9mIGIgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihiKSkgfHwgIShcImxlbmd0aFwiIGluIGIpKSB0aHJvdyBFcnJvcihcIlRoZSBhcmd1bWVudCBwYXNzZWQgd2hlbiBpbml0aWFsaXppbmcgYW4gb2JzZXJ2YWJsZSBhcnJheSBtdXN0IGJlIGFuIGFycmF5LCBvciBudWxsLCBvciB1bmRlZmluZWQuXCIpO2IgPSBhLk8oYik7YS5hLmFiKGIsIGEubWEuZm4pO3JldHVybiBiLmV4dGVuZCh7IHRyYWNrQXJyYXlDaGFuZ2VzOiAhMCB9KTtcbiAgICAgIH07XG4gICAgICBhLm1hLmZuID0geyByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShiKSB7XG4gICAgICAgICAgZm9yICh2YXIgYyA9IHRoaXMucCgpLCBkID0gW10sIGUgPSBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGIgfHwgYS5JKGIpID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBhID09PSBiO1xuICAgICAgICAgIH0gOiBiLCBmID0gMDsgZiA8IGMubGVuZ3RoOyBmKyspIHtcbiAgICAgICAgICAgIHZhciBnID0gY1tmXTtlKGcpICYmICgwID09PSBkLmxlbmd0aCAmJiB0aGlzLmlhKCksIGQucHVzaChnKSwgYy5zcGxpY2UoZiwgMSksIGYtLSk7XG4gICAgICAgICAgfWQubGVuZ3RoICYmIHRoaXMuaGEoKTtyZXR1cm4gZDtcbiAgICAgICAgfSwgcmVtb3ZlQWxsOiBmdW5jdGlvbiByZW1vdmVBbGwoYikge1xuICAgICAgICAgIGlmIChiID09PSBuKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHRoaXMucCgpLFxuICAgICAgICAgICAgICAgIGQgPSBjLnNsaWNlKDApO3RoaXMuaWEoKTtjLnNwbGljZSgwLCBjLmxlbmd0aCk7dGhpcy5oYSgpO3JldHVybiBkO1xuICAgICAgICAgIH1yZXR1cm4gYiA/IHRoaXMucmVtb3ZlKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gMCA8PSBhLmEubyhiLCBjKTtcbiAgICAgICAgICB9KSA6IFtdO1xuICAgICAgICB9LCBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KGIpIHtcbiAgICAgICAgICB2YXIgYyA9IHRoaXMucCgpLFxuICAgICAgICAgICAgICBkID0gXCJmdW5jdGlvblwiICE9IHR5cGVvZiBiIHx8IGEuSShiKSA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICByZXR1cm4gYSA9PT0gYjtcbiAgICAgICAgICB9IDogYjt0aGlzLmlhKCk7XG4gICAgICAgICAgZm9yICh2YXIgZSA9IGMubGVuZ3RoIC0gMTsgMCA8PSBlOyBlLS0pIHtcbiAgICAgICAgICAgIGQoY1tlXSkgJiYgKGNbZV0uX2Rlc3Ryb3kgPSAhMCk7XG4gICAgICAgICAgfXRoaXMuaGEoKTtcbiAgICAgICAgfSwgZGVzdHJveUFsbDogZnVuY3Rpb24gZGVzdHJveUFsbChiKSB7XG4gICAgICAgICAgcmV0dXJuIGIgPT09IG4gPyB0aGlzLmRlc3Ryb3koZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgIH0pIDogYiA/IHRoaXMuZGVzdHJveShmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIDAgPD0gYS5hLm8oYiwgYyk7XG4gICAgICAgICAgfSkgOiBbXTtcbiAgICAgICAgfSwgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihiKSB7XG4gICAgICAgICAgdmFyIGMgPSB0aGlzKCk7cmV0dXJuIGEuYS5vKGMsIGIpO1xuICAgICAgICB9LCByZXBsYWNlOiBmdW5jdGlvbiByZXBsYWNlKGEsIGMpIHtcbiAgICAgICAgICB2YXIgZCA9IHRoaXMuaW5kZXhPZihhKTswIDw9IGQgJiYgKHRoaXMuaWEoKSwgdGhpcy5wKClbZF0gPSBjLCB0aGlzLmhhKCkpO1xuICAgICAgICB9IH07YS5hLmxhICYmIGEuYS4kYShhLm1hLmZuLCBhLk8uZm4pO2EuYS5yKFwicG9wIHB1c2ggcmV2ZXJzZSBzaGlmdCBzb3J0IHNwbGljZSB1bnNoaWZ0XCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAoYikge1xuICAgICAgICBhLm1hLmZuW2JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpcy5wKCk7dGhpcy5pYSgpO3RoaXMuWWIoYSwgYiwgYXJndW1lbnRzKTtcbiAgICAgICAgICB2YXIgZCA9IGFbYl0uYXBwbHkoYSwgYXJndW1lbnRzKTt0aGlzLmhhKCk7cmV0dXJuIGQgPT09IGEgPyB0aGlzIDogZDtcbiAgICAgICAgfTtcbiAgICAgIH0pO2EuYS5yKFtcInNsaWNlXCJdLCBmdW5jdGlvbiAoYikge1xuICAgICAgICBhLm1hLmZuW2JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpcygpO3JldHVybiBhW2JdLmFwcGx5KGEsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KTthLmIoXCJvYnNlcnZhYmxlQXJyYXlcIiwgYS5tYSk7YS5BYS50cmFja0FycmF5Q2hhbmdlcyA9IGZ1bmN0aW9uIChiLCBjKSB7XG4gICAgICAgIGZ1bmN0aW9uIGQoKSB7XG4gICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICBlID0gITA7bCA9IGIubm90aWZ5U3Vic2NyaWJlcnM7Yi5ub3RpZnlTdWJzY3JpYmVycyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIGIgJiYgYiAhPT0gRSB8fCArK2g7cmV0dXJuIGwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07dmFyIGMgPSBbXS5jb25jYXQoYi5wKCkgfHwgW10pO2YgPSBudWxsO2cgPSBiLlkoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgZCA9IFtdLmNvbmNhdChkIHx8IFtdKTtpZiAoYi5SYShcImFycmF5Q2hhbmdlXCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGU7aWYgKCFmIHx8IDEgPCBoKSBmID0gYS5hLmxiKGMsIGQsIGIua2IpO2UgPSBmO1xuICAgICAgICAgICAgICB9YyA9IGQ7ZiA9IG51bGw7aCA9IDA7XG4gICAgICAgICAgICAgIGUgJiYgZS5sZW5ndGggJiYgYi5ub3RpZnlTdWJzY3JpYmVycyhlLCBcImFycmF5Q2hhbmdlXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9Yi5rYiA9IHt9O2MgJiYgXCJvYmplY3RcIiA9PSAodHlwZW9mIGMgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjKSkgJiYgYS5hLmV4dGVuZChiLmtiLCBjKTtiLmtiLnNwYXJzZSA9ICEwO2lmICghYi5ZYikge1xuICAgICAgICAgIHZhciBlID0gITEsXG4gICAgICAgICAgICAgIGYgPSBudWxsLFxuICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICBoID0gMCxcbiAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgbSA9IGIudWEsXG4gICAgICAgICAgICAgIGsgPSBiLkthO2IudWEgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgbSAmJiBtLmNhbGwoYiwgYSk7XCJhcnJheUNoYW5nZVwiID09PSBhICYmIGQoKTtcbiAgICAgICAgICB9O2IuS2EgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgayAmJiBrLmNhbGwoYiwgYSk7XCJhcnJheUNoYW5nZVwiICE9PSBhIHx8IGIuUmEoXCJhcnJheUNoYW5nZVwiKSB8fCAobCAmJiAoYi5ub3RpZnlTdWJzY3JpYmVycyA9IGwsIGwgPSBuKSwgZy5rKCksIGUgPSAhMSk7XG4gICAgICAgICAgfTtiLlliID0gZnVuY3Rpb24gKGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGsoYSwgYiwgYykge1xuICAgICAgICAgICAgICByZXR1cm4gbVttLmxlbmd0aF0gPSB7IHN0YXR1czogYSwgdmFsdWU6IGIsIGluZGV4OiBjIH07XG4gICAgICAgICAgICB9aWYgKGUgJiYgIWgpIHtcbiAgICAgICAgICAgICAgdmFyIG0gPSBbXSxcbiAgICAgICAgICAgICAgICAgIGwgPSBiLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgIGcgPSBkLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgIEcgPSAwO3N3aXRjaCAoYykge2Nhc2UgXCJwdXNoXCI6XG4gICAgICAgICAgICAgICAgICBHID0gbDtjYXNlIFwidW5zaGlmdFwiOlxuICAgICAgICAgICAgICAgICAgZm9yIChjID0gMDsgYyA8IGc7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICBrKFwiYWRkZWRcIiwgZFtjXSwgRyArIGMpO1xuICAgICAgICAgICAgICAgICAgfWJyZWFrO2Nhc2UgXCJwb3BcIjpcbiAgICAgICAgICAgICAgICAgIEcgPSBsIC0gMTtjYXNlIFwic2hpZnRcIjpcbiAgICAgICAgICAgICAgICAgIGwgJiYgayhcImRlbGV0ZWRcIiwgYltHXSwgRyk7YnJlYWs7Y2FzZSBcInNwbGljZVwiOlxuICAgICAgICAgICAgICAgICAgYyA9IE1hdGgubWluKE1hdGgubWF4KDAsIDAgPiBkWzBdID8gbCArIGRbMF0gOiBkWzBdKSwgbCk7Zm9yICh2YXIgbCA9IDEgPT09IGcgPyBsIDogTWF0aC5taW4oYyArIChkWzFdIHx8IDApLCBsKSwgZyA9IGMgKyBnIC0gMiwgRyA9IE1hdGgubWF4KGwsIGcpLCBuID0gW10sIHMgPSBbXSwgdyA9IDI7IGMgPCBHOyArK2MsICsrdykge1xuICAgICAgICAgICAgICAgICAgICBjIDwgbCAmJiBzLnB1c2goayhcImRlbGV0ZWRcIiwgYltjXSwgYykpLCBjIDwgZyAmJiBuLnB1c2goayhcImFkZGVkXCIsIGRbd10sIGMpKTtcbiAgICAgICAgICAgICAgICAgIH1hLmEuaGMocywgbik7YnJlYWs7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIHJldHVybjt9ZiA9IG07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTt2YXIgcyA9IGEuYS5iYyhcIl9zdGF0ZVwiKTthLm0gPSBhLkIgPSBmdW5jdGlvbiAoYiwgYywgZCkge1xuICAgICAgICBmdW5jdGlvbiBlKCkge1xuICAgICAgICAgIGlmICgwIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGYpIGYuYXBwbHkoZy5zYiwgYXJndW1lbnRzKTtlbHNlIHRocm93IEVycm9yKFwiQ2Fubm90IHdyaXRlIGEgdmFsdWUgdG8gYSBrby5jb21wdXRlZCB1bmxlc3MgeW91IHNwZWNpZnkgYSAnd3JpdGUnIG9wdGlvbi4gSWYgeW91IHdpc2ggdG8gcmVhZCB0aGUgY3VycmVudCB2YWx1ZSwgZG9uJ3QgcGFzcyBhbnkgcGFyYW1ldGVycy5cIik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9YS5sLnNjKGUpOyhnLlYgfHwgZy50ICYmIGUuU2EoKSkgJiYgZS5VKCk7cmV0dXJuIGcuTTtcbiAgICAgICAgfVwib2JqZWN0XCIgPT09ICh0eXBlb2YgYiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGIpKSA/IGQgPSBiIDogKGQgPSBkIHx8IHt9LCBiICYmIChkLnJlYWQgPSBiKSk7aWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZC5yZWFkKSB0aHJvdyBFcnJvcihcIlBhc3MgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBrby5jb21wdXRlZFwiKTt2YXIgZiA9IGQud3JpdGUsXG4gICAgICAgICAgICBnID0geyBNOiBuLCBkYTogITAsIFY6ICEwLCBUYTogITEsIEhiOiAhMSwgVDogITEsIFlhOiAhMSwgdDogITEsIG9kOiBkLnJlYWQsIHNiOiBjIHx8IGQub3duZXIsIGk6IGQuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkIHx8IGQuaSB8fCBudWxsLCB5YTogZC5kaXNwb3NlV2hlbiB8fCBkLnlhLCBwYjogbnVsbCwgczoge30sIEw6IDAsIGZjOiBudWxsIH07ZVtzXSA9IGc7ZS4kYyA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGY7YS5hLmxhIHx8IGEuYS5leHRlbmQoZSwgYS5LLmZuKTthLksuZm4udWIoZSk7YS5hLmFiKGUsIHopO2QucHVyZSA/IChnLllhID0gITAsIGcudCA9ICEwLCBhLmEuZXh0ZW5kKGUsIFkpKSA6IGQuZGVmZXJFdmFsdWF0aW9uICYmIGEuYS5leHRlbmQoZSwgWik7YS5vcHRpb25zLmRlZmVyVXBkYXRlcyAmJiBhLkFhLmRlZmVycmVkKGUsICEwKTtnLmkgJiYgKGcuSGIgPSAhMCwgZy5pLm5vZGVUeXBlIHx8IChnLmkgPSBudWxsKSk7Zy50IHx8IGQuZGVmZXJFdmFsdWF0aW9uIHx8IGUuVSgpO2cuaSAmJiBlLmNhKCkgJiYgYS5hLkcucWEoZy5pLCBnLnBiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGUuaygpO1xuICAgICAgICB9KTtyZXR1cm4gZTtcbiAgICAgIH07dmFyIHogPSB7IGVxdWFsaXR5Q29tcGFyZXI6IEosIENhOiBmdW5jdGlvbiBDYSgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1tzXS5MO1xuICAgICAgICB9LCBTYjogZnVuY3Rpb24gU2IoYSwgYywgZCkge1xuICAgICAgICAgIGlmICh0aGlzW3NdLllhICYmIGMgPT09IHRoaXMpIHRocm93IEVycm9yKFwiQSAncHVyZScgY29tcHV0ZWQgbXVzdCBub3QgYmUgY2FsbGVkIHJlY3Vyc2l2ZWx5XCIpO3RoaXNbc10uc1thXSA9IGQ7ZC5JYSA9IHRoaXNbc10uTCsrO2QucGEgPSBjLlBhKCk7XG4gICAgICAgIH0sIFNhOiBmdW5jdGlvbiBTYSgpIHtcbiAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgZCA9IHRoaXNbc10ucztmb3IgKGEgaW4gZCkge1xuICAgICAgICAgICAgaWYgKGQuaGFzT3duUHJvcGVydHkoYSkgJiYgKGMgPSBkW2FdLCB0aGlzLm9hICYmIGMuJC5IYSB8fCBjLiQuWmMoYy5wYSkpKSByZXR1cm4gITA7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBnZDogZnVuY3Rpb24gZ2QoKSB7XG4gICAgICAgICAgdGhpcy5vYSAmJiAhdGhpc1tzXS5UYSAmJiB0aGlzLm9hKCExKTtcbiAgICAgICAgfSwgY2E6IGZ1bmN0aW9uIGNhKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpc1tzXTtyZXR1cm4gYS5WIHx8IDAgPCBhLkw7XG4gICAgICAgIH0sIHFkOiBmdW5jdGlvbiBxZCgpIHtcbiAgICAgICAgICB0aGlzLkhhID8gdGhpc1tzXS5WICYmICh0aGlzW3NdLmRhID0gITApIDogdGhpcy5lYygpO1xuICAgICAgICB9LCB5YzogZnVuY3Rpb24geWMoYSkge1xuICAgICAgICAgIGlmIChhLmdiICYmICF0aGlzW3NdLmkpIHtcbiAgICAgICAgICAgIHZhciBjID0gYS5ZKHRoaXMuZ2QsIHRoaXMsIFwiZGlydHlcIiksXG4gICAgICAgICAgICAgICAgZCA9IGEuWSh0aGlzLnFkLCB0aGlzKTtyZXR1cm4geyAkOiBhLCBrOiBmdW5jdGlvbiBrKCkge1xuICAgICAgICAgICAgICAgIGMuaygpO2QuaygpO1xuICAgICAgICAgICAgICB9IH07XG4gICAgICAgICAgfXJldHVybiBhLlkodGhpcy5lYywgdGhpcyk7XG4gICAgICAgIH0sIGVjOiBmdW5jdGlvbiBlYygpIHtcbiAgICAgICAgICB2YXIgYiA9IHRoaXMsXG4gICAgICAgICAgICAgIGMgPSBiLnRocm90dGxlRXZhbHVhdGlvbjtjICYmIDAgPD0gYyA/IChjbGVhclRpbWVvdXQodGhpc1tzXS5mYyksIHRoaXNbc10uZmMgPSBhLmEuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBiLlUoITApO1xuICAgICAgICAgIH0sIGMpKSA6IGIub2EgPyBiLm9hKCEwKSA6IGIuVSghMCk7XG4gICAgICAgIH0sIFU6IGZ1bmN0aW9uIFUoYikge1xuICAgICAgICAgIHZhciBjID0gdGhpc1tzXSxcbiAgICAgICAgICAgICAgZCA9IGMueWEsXG4gICAgICAgICAgICAgIGUgPSAhMTtpZiAoIWMuVGEgJiYgIWMuVCkge1xuICAgICAgICAgICAgaWYgKGMuaSAmJiAhYS5hLnFiKGMuaSkgfHwgZCAmJiBkKCkpIHtcbiAgICAgICAgICAgICAgaWYgKCFjLkhiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5rKCk7cmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgYy5IYiA9ICExO2MuVGEgPSAhMDt0cnkge1xuICAgICAgICAgICAgICBlID0gdGhpcy5WYyhiKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIGMuVGEgPSAhMTtcbiAgICAgICAgICAgIH1jLkwgfHwgdGhpcy5rKCk7cmV0dXJuIGU7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBWYzogZnVuY3Rpb24gVmMoYikge1xuICAgICAgICAgIHZhciBjID0gdGhpc1tzXSxcbiAgICAgICAgICAgICAgZCA9ICExLFxuICAgICAgICAgICAgICBlID0gYy5ZYSA/IG4gOiAhYy5MLFxuICAgICAgICAgICAgICBmID0geyBNYzogdGhpcywgT2E6IGMucywgb2I6IGMuTCB9O2EubC5YYih7IExjOiBmLCBqYjogVywgbTogdGhpcywgVmE6IGUgfSk7Yy5zID0ge307Yy5MID0gMDtmID0gdGhpcy5VYyhjLCBmKTt0aGlzLlVhKGMuTSwgZikgJiYgKGMudCB8fCB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKGMuTSwgXCJiZWZvcmVDaGFuZ2VcIiksIGMuTSA9IGYsIGMudCA/IHRoaXMuS2IoKSA6IGIgJiYgdGhpcy5ub3RpZnlTdWJzY3JpYmVycyhjLk0pLCBkID0gITApO2UgJiYgdGhpcy5ub3RpZnlTdWJzY3JpYmVycyhjLk0sIFwiYXdha2VcIik7cmV0dXJuIGQ7XG4gICAgICAgIH0sIFVjOiBmdW5jdGlvbiBVYyhiLCBjKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBkID0gYi5vZDtyZXR1cm4gYi5zYiA/IGQuY2FsbChiLnNiKSA6IGQoKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgYS5sLmVuZCgpLCBjLm9iICYmICFiLnQgJiYgYS5hLkQoYy5PYSwgViksIGIuZGEgPSBiLlYgPSAhMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHA6IGZ1bmN0aW9uIHAoYSkge1xuICAgICAgICAgIHZhciBjID0gdGhpc1tzXTsoYy5WICYmIChhIHx8ICFjLkwpIHx8IGMudCAmJiB0aGlzLlNhKCkpICYmIHRoaXMuVSgpO3JldHVybiBjLk07XG4gICAgICAgIH0sIFdhOiBmdW5jdGlvbiBXYShiKSB7XG4gICAgICAgICAgYS5LLmZuLldhLmNhbGwodGhpcywgYik7dGhpcy5NYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXNbc10uZGEgPyB0aGlzLlUoKSA6IHRoaXNbc10uViA9ICExO3JldHVybiB0aGlzW3NdLk07XG4gICAgICAgICAgfTt0aGlzLm9hID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHRoaXMuT2IodGhpc1tzXS5NKTt0aGlzW3NdLlYgPSAhMDthICYmICh0aGlzW3NdLmRhID0gITApO3RoaXMuUGIodGhpcyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgazogZnVuY3Rpb24gaygpIHtcbiAgICAgICAgICB2YXIgYiA9IHRoaXNbc107IWIudCAmJiBiLnMgJiYgYS5hLkQoYi5zLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgYi5rICYmIGIuaygpO1xuICAgICAgICAgIH0pO2IuaSAmJiBiLnBiICYmIGEuYS5HLnRjKGIuaSwgYi5wYik7Yi5zID0gbnVsbDtiLkwgPSAwO2IuVCA9ICEwO2IuZGEgPSAhMTtiLlYgPSAhMTtiLnQgPSAhMTtiLmkgPSBudWxsO1xuICAgICAgICB9IH0sXG4gICAgICAgICAgWSA9IHsgdWE6IGZ1bmN0aW9uIHVhKGIpIHtcbiAgICAgICAgICB2YXIgYyA9IHRoaXMsXG4gICAgICAgICAgICAgIGQgPSBjW3NdO2lmICghZC5UICYmIGQudCAmJiBcImNoYW5nZVwiID09IGIpIHtcbiAgICAgICAgICAgIGQudCA9ICExO2lmIChkLmRhIHx8IGMuU2EoKSkgZC5zID0gbnVsbCwgZC5MID0gMCwgYy5VKCkgJiYgYy5LYigpO2Vsc2Uge1xuICAgICAgICAgICAgICB2YXIgZSA9IFtdO2EuYS5EKGQucywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICBlW2IuSWFdID0gYTtcbiAgICAgICAgICAgICAgfSk7YS5hLnIoZSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGQuc1thXSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGMueWMoZS4kKTtsLklhID0gYjtsLnBhID0gZS5wYTtkLnNbYV0gPSBsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1kLlQgfHwgYy5ub3RpZnlTdWJzY3JpYmVycyhkLk0sIFwiYXdha2VcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBLYTogZnVuY3Rpb24gS2EoYikge1xuICAgICAgICAgIHZhciBjID0gdGhpc1tzXTtjLlQgfHwgXCJjaGFuZ2VcIiAhPSBiIHx8IHRoaXMuUmEoXCJjaGFuZ2VcIikgfHwgKGEuYS5EKGMucywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIGIuayAmJiAoYy5zW2FdID0geyAkOiBiLiQsIElhOiBiLklhLCBwYTogYi5wYSB9LCBiLmsoKSk7XG4gICAgICAgICAgfSksIGMudCA9ICEwLCB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKG4sIFwiYXNsZWVwXCIpKTtcbiAgICAgICAgfSwgUGE6IGZ1bmN0aW9uIFBhKCkge1xuICAgICAgICAgIHZhciBiID0gdGhpc1tzXTtiLnQgJiYgKGIuZGEgfHwgdGhpcy5TYSgpKSAmJiB0aGlzLlUoKTtyZXR1cm4gYS5LLmZuLlBhLmNhbGwodGhpcyk7XG4gICAgICAgIH0gfSxcbiAgICAgICAgICBaID0geyB1YTogZnVuY3Rpb24gdWEoYSkge1xuICAgICAgICAgIFwiY2hhbmdlXCIgIT0gYSAmJiBcImJlZm9yZUNoYW5nZVwiICE9IGEgfHwgdGhpcy5wKCk7XG4gICAgICAgIH0gfTthLmEubGEgJiYgYS5hLiRhKHosIGEuSy5mbik7dmFyIFAgPSBhLk8ubWQ7YS5tW1BdID0gYS5PO3pbUF0gPSBhLm07YS5iZCA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIHJldHVybiBhLlFhKGIsIGEubSk7XG4gICAgICB9O2EuY2QgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICByZXR1cm4gYS5RYShiLCBhLm0pICYmIGJbc10gJiYgYltzXS5ZYTtcbiAgICAgIH07YS5iKFwiY29tcHV0ZWRcIiwgYS5tKTthLmIoXCJkZXBlbmRlbnRPYnNlcnZhYmxlXCIsIGEubSk7YS5iKFwiaXNDb21wdXRlZFwiLCBhLmJkKTthLmIoXCJpc1B1cmVDb21wdXRlZFwiLCBhLmNkKTthLmIoXCJjb21wdXRlZC5mblwiLCB6KTthLkgoeiwgXCJwZWVrXCIsIHoucCk7YS5IKHosIFwiZGlzcG9zZVwiLCB6LmspO2EuSCh6LCBcImlzQWN0aXZlXCIsIHouY2EpO2EuSCh6LCBcImdldERlcGVuZGVuY2llc0NvdW50XCIsIHouQ2EpO2EucmMgPSBmdW5jdGlvbiAoYiwgYykge1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYikgcmV0dXJuIGEubShiLCBjLCB7IHB1cmU6ICEwIH0pO2IgPSBhLmEuZXh0ZW5kKHt9LCBiKTtiLnB1cmUgPSAhMDtyZXR1cm4gYS5tKGIsIGMpO1xuICAgICAgfTthLmIoXCJwdXJlQ29tcHV0ZWRcIiwgYS5yYyk7KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYihhLCBmLCBnKSB7XG4gICAgICAgICAgZyA9IGcgfHwgbmV3IGQoKTthID0gZihhKTtpZiAoXCJvYmplY3RcIiAhPSAodHlwZW9mIGEgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihhKSkgfHwgbnVsbCA9PT0gYSB8fCBhID09PSBuIHx8IGEgaW5zdGFuY2VvZiBSZWdFeHAgfHwgYSBpbnN0YW5jZW9mIERhdGUgfHwgYSBpbnN0YW5jZW9mIFN0cmluZyB8fCBhIGluc3RhbmNlb2YgTnVtYmVyIHx8IGEgaW5zdGFuY2VvZiBCb29sZWFuKSByZXR1cm4gYTt2YXIgaCA9IGEgaW5zdGFuY2VvZiBBcnJheSA/IFtdIDoge307Zy5zYXZlKGEsIGgpO2MoYSwgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHZhciBkID0gZihhW2NdKTtzd2l0Y2ggKHR5cGVvZiBkID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZCkpIHtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICAgICAgaFtjXSA9IGQ7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgICAgICAgICB2YXIgayA9IGcuZ2V0KGQpO2hbY10gPSBrICE9PSBuID8gayA6IGIoZCwgZiwgZyk7fVxuICAgICAgICAgIH0pO3JldHVybiBoO1xuICAgICAgICB9ZnVuY3Rpb24gYyhhLCBiKSB7XG4gICAgICAgICAgaWYgKGEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBhLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICAgIGIoYyk7XG4gICAgICAgICAgICB9XCJmdW5jdGlvblwiID09IHR5cGVvZiBhLnRvSlNPTiAmJiBiKFwidG9KU09OXCIpO1xuICAgICAgICAgIH0gZWxzZSBmb3IgKGMgaW4gYSkge1xuICAgICAgICAgICAgYihjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1mdW5jdGlvbiBkKCkge1xuICAgICAgICAgIHRoaXMua2V5cyA9IFtdO3RoaXMuTGIgPSBbXTtcbiAgICAgICAgfWEuQWMgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICAgIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHRocm93IEVycm9yKFwiV2hlbiBjYWxsaW5nIGtvLnRvSlMsIHBhc3MgdGhlIG9iamVjdCB5b3Ugd2FudCB0byBjb252ZXJ0LlwiKTtyZXR1cm4gYihjLCBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGEuSShiKSAmJiAxMCA+IGM7IGMrKykge1xuICAgICAgICAgICAgICBiID0gYigpO1xuICAgICAgICAgICAgfXJldHVybiBiO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O2EudG9KU09OID0gZnVuY3Rpb24gKGIsIGMsIGQpIHtcbiAgICAgICAgICBiID0gYS5BYyhiKTtyZXR1cm4gYS5hLkdiKGIsIGMsIGQpO1xuICAgICAgICB9O2QucHJvdG90eXBlID0geyBzYXZlOiBmdW5jdGlvbiBzYXZlKGIsIGMpIHtcbiAgICAgICAgICAgIHZhciBkID0gYS5hLm8odGhpcy5rZXlzLCBiKTswIDw9IGQgPyB0aGlzLkxiW2RdID0gYyA6ICh0aGlzLmtleXMucHVzaChiKSwgdGhpcy5MYi5wdXNoKGMpKTtcbiAgICAgICAgICB9LCBnZXQ6IGZ1bmN0aW9uIGdldChiKSB7XG4gICAgICAgICAgICBiID0gYS5hLm8odGhpcy5rZXlzLCBiKTtyZXR1cm4gMCA8PSBiID8gdGhpcy5MYltiXSA6IG47XG4gICAgICAgICAgfSB9O1xuICAgICAgfSkoKTthLmIoXCJ0b0pTXCIsIGEuQWMpO2EuYihcInRvSlNPTlwiLCBhLnRvSlNPTik7KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYS5qID0geyB1OiBmdW5jdGlvbiB1KGIpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYS5hLkEoYikpIHtjYXNlIFwib3B0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICEwID09PSBiLl9fa29fX2hhc0RvbURhdGFPcHRpb25WYWx1ZV9fID8gYS5hLmUuZ2V0KGIsIGEuZC5vcHRpb25zLnpiKSA6IDcgPj0gYS5hLkMgPyBiLmdldEF0dHJpYnV0ZU5vZGUoXCJ2YWx1ZVwiKSAmJiBiLmdldEF0dHJpYnV0ZU5vZGUoXCJ2YWx1ZVwiKS5zcGVjaWZpZWQgPyBiLnZhbHVlIDogYi50ZXh0IDogYi52YWx1ZTtjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPD0gYi5zZWxlY3RlZEluZGV4ID8gYS5qLnUoYi5vcHRpb25zW2Iuc2VsZWN0ZWRJbmRleF0pIDogbjtkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBiLnZhbHVlO31cbiAgICAgICAgICB9LCBqYTogZnVuY3Rpb24gamEoYiwgYywgZCkge1xuICAgICAgICAgICAgc3dpdGNoIChhLmEuQShiKSkge2Nhc2UgXCJvcHRpb25cIjpcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBjID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYykpIHtjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIGEuYS5lLnNldChiLCBhLmQub3B0aW9ucy56Yiwgbik7XCJfX2tvX19oYXNEb21EYXRhT3B0aW9uVmFsdWVfX1wiIGluIGIgJiYgZGVsZXRlIGIuX19rb19faGFzRG9tRGF0YU9wdGlvblZhbHVlX187Yi52YWx1ZSA9IGM7YnJlYWs7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYS5hLmUuc2V0KGIsIGEuZC5vcHRpb25zLnpiLCBjKSwgYi5fX2tvX19oYXNEb21EYXRhT3B0aW9uVmFsdWVfXyA9ICEwLCBiLnZhbHVlID0gXCJudW1iZXJcIiA9PT0gdHlwZW9mIGMgPyBjIDogXCJcIjt9YnJlYWs7Y2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICAgIGlmIChcIlwiID09PSBjIHx8IG51bGwgPT09IGMpIGMgPSBuO2ZvciAodmFyIGUgPSAtMSwgZiA9IDAsIGcgPSBiLm9wdGlvbnMubGVuZ3RoLCBoOyBmIDwgZzsgKytmKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoaCA9IGEuai51KGIub3B0aW9uc1tmXSksIGggPT0gYyB8fCBcIlwiID09IGggJiYgYyA9PT0gbikge1xuICAgICAgICAgICAgICAgICAgICBlID0gZjticmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9aWYgKGQgfHwgMCA8PSBlIHx8IGMgPT09IG4gJiYgMSA8IGIuc2l6ZSkgYi5zZWxlY3RlZEluZGV4ID0gZTticmVhaztkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChudWxsID09PSBjIHx8IGMgPT09IG4pIGMgPSBcIlwiO2IudmFsdWUgPSBjO31cbiAgICAgICAgICB9IH07XG4gICAgICB9KSgpO2EuYihcInNlbGVjdEV4dGVuc2lvbnNcIiwgYS5qKTthLmIoXCJzZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZVwiLCBhLmoudSk7YS5iKFwic2VsZWN0RXh0ZW5zaW9ucy53cml0ZVZhbHVlXCIsIGEuai5qYSk7YS5oID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBiKGIpIHtcbiAgICAgICAgICBiID0gYS5hLmNiKGIpOzEyMyA9PT0gYi5jaGFyQ29kZUF0KDApICYmIChiID0gYi5zbGljZSgxLCAtMSkpO3ZhciBjID0gW10sXG4gICAgICAgICAgICAgIGQgPSBiLm1hdGNoKGUpLFxuICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICBoID0gW10sXG4gICAgICAgICAgICAgIHAgPSAwO2lmIChkKSB7XG4gICAgICAgICAgICBkLnB1c2goXCIsXCIpO2ZvciAodmFyIEEgPSAwLCB5OyB5ID0gZFtBXTsgKytBKSB7XG4gICAgICAgICAgICAgIHZhciB2ID0geS5jaGFyQ29kZUF0KDApO2lmICg0NCA9PT0gdikge1xuICAgICAgICAgICAgICAgIGlmICgwID49IHApIHtcbiAgICAgICAgICAgICAgICAgIGMucHVzaChyICYmIGgubGVuZ3RoID8geyBrZXk6IHIsIHZhbHVlOiBoLmpvaW4oXCJcIikgfSA6IHsgdW5rbm93bjogciB8fCBoLmpvaW4oXCJcIikgfSk7ciA9IHAgPSAwO2ggPSBbXTtjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoNTggPT09IHYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXAgJiYgIXIgJiYgMSA9PT0gaC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIHIgPSBoLnBvcCgpO2NvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIDQ3ID09PSB2ICYmIEEgJiYgMSA8IHkubGVuZ3RoID8gKHYgPSBkW0EgLSAxXS5tYXRjaChmKSkgJiYgIWdbdlswXV0gJiYgKGIgPSBiLnN1YnN0cihiLmluZGV4T2YoeSkgKyAxKSwgZCA9IGIubWF0Y2goZSksIGQucHVzaChcIixcIiksIEEgPSAtMSwgeSA9IFwiL1wiKSA6IDQwID09PSB2IHx8IDEyMyA9PT0gdiB8fCA5MSA9PT0gdiA/ICsrcCA6IDQxID09PSB2IHx8IDEyNSA9PT0gdiB8fCA5MyA9PT0gdiA/IC0tcCA6IHIgfHwgaC5sZW5ndGggfHwgMzQgIT09IHYgJiYgMzkgIT09IHYgfHwgKHkgPSB5LnNsaWNlKDEsIC0xKSk7aC5wdXNoKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1yZXR1cm4gYztcbiAgICAgICAgfXZhciBjID0gW1widHJ1ZVwiLCBcImZhbHNlXCIsIFwibnVsbFwiLCBcInVuZGVmaW5lZFwiXSxcbiAgICAgICAgICAgIGQgPSAvXig/OlskX2Etel1bJFxcd10qfCguKykoXFwuXFxzKlskX2Etel1bJFxcd10qfFxcWy4rXFxdKSkkL2ksXG4gICAgICAgICAgICBlID0gUmVnRXhwKFwiXFxcIig/OlteXFxcIlxcXFxcXFxcXXxcXFxcXFxcXC4pKlxcXCJ8Jyg/OlteJ1xcXFxcXFxcXXxcXFxcXFxcXC4pKid8Lyg/OlteL1xcXFxcXFxcXXxcXFxcXFxcXC4pKi93KnxbXlxcXFxzOiwvXVteLFxcXCIne30oKS86W1xcXFxdXSpbXlxcXFxzLFxcXCIne30oKS86W1xcXFxdXXxbXlxcXFxzXVwiLCBcImdcIiksXG4gICAgICAgICAgICBmID0gL1tcXF0pXCInQS1aYS16MC05XyRdKyQvLFxuICAgICAgICAgICAgZyA9IHsgXCJpblwiOiAxLCBcInJldHVyblwiOiAxLCBcInR5cGVvZlwiOiAxIH0sXG4gICAgICAgICAgICBoID0ge307cmV0dXJuIHsgdmE6IFtdLCBnYTogaCwgQWI6IGIsIFhhOiBmdW5jdGlvbiBYYShlLCBtKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBrKGIsIGUpIHtcbiAgICAgICAgICAgICAgdmFyIG07aWYgKCFBKSB7XG4gICAgICAgICAgICAgICAgdmFyIGwgPSBhLmdldEJpbmRpbmdIYW5kbGVyKGIpO2lmIChsICYmIGwucHJlcHJvY2VzcyAmJiAhKGUgPSBsLnByZXByb2Nlc3MoZSwgYiwgaykpKSByZXR1cm47aWYgKGwgPSBoW2JdKSBtID0gZSwgMCA8PSBhLmEubyhjLCBtKSA/IG0gPSAhMSA6IChsID0gbS5tYXRjaChkKSwgbSA9IG51bGwgPT09IGwgPyAhMSA6IGxbMV0gPyBcIk9iamVjdChcIiArIGxbMV0gKyBcIilcIiArIGxbMl0gOiBtKSwgbCA9IG07bCAmJiBnLnB1c2goXCInXCIgKyBiICsgXCInOmZ1bmN0aW9uKF96KXtcIiArIG0gKyBcIj1fen1cIik7XG4gICAgICAgICAgICAgIH1wICYmIChlID0gXCJmdW5jdGlvbigpe3JldHVybiBcIiArIGUgKyBcIiB9XCIpO2YucHVzaChcIidcIiArIGIgKyBcIic6XCIgKyBlKTtcbiAgICAgICAgICAgIH1tID0gbSB8fCB7fTt2YXIgZiA9IFtdLFxuICAgICAgICAgICAgICAgIGcgPSBbXSxcbiAgICAgICAgICAgICAgICBwID0gbS52YWx1ZUFjY2Vzc29ycyxcbiAgICAgICAgICAgICAgICBBID0gbS5iaW5kaW5nUGFyYW1zLFxuICAgICAgICAgICAgICAgIHkgPSBcInN0cmluZ1wiID09PSB0eXBlb2YgZSA/IGIoZSkgOiBlO2EuYS5yKHksIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIGsoYS5rZXkgfHwgYS51bmtub3duLCBhLnZhbHVlKTtcbiAgICAgICAgICAgIH0pO2cubGVuZ3RoICYmIGsoXCJfa29fcHJvcGVydHlfd3JpdGVyc1wiLCBcIntcIiArIGcuam9pbihcIixcIikgKyBcIiB9XCIpO3JldHVybiBmLmpvaW4oXCIsXCIpO1xuICAgICAgICAgIH0sIGZkOiBmdW5jdGlvbiBmZChhLCBiKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGEubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgICAgaWYgKGFbY10ua2V5ID09IGIpIHJldHVybiAhMDtcbiAgICAgICAgICAgIH1yZXR1cm4gITE7XG4gICAgICAgICAgfSwgR2E6IGZ1bmN0aW9uIEdhKGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgICAgIGlmIChiICYmIGEuSShiKSkgIWEuRGEoYikgfHwgZiAmJiBiLnAoKSA9PT0gZSB8fCBiKGUpO2Vsc2UgaWYgKChiID0gYy5nZXQoXCJfa29fcHJvcGVydHlfd3JpdGVyc1wiKSkgJiYgYltkXSkgYltkXShlKTtcbiAgICAgICAgICB9IH07XG4gICAgICB9KCk7YS5iKFwiZXhwcmVzc2lvblJld3JpdGluZ1wiLCBhLmgpO2EuYihcImV4cHJlc3Npb25SZXdyaXRpbmcuYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzXCIsIGEuaC52YSk7YS5iKFwiZXhwcmVzc2lvblJld3JpdGluZy5wYXJzZU9iamVjdExpdGVyYWxcIiwgYS5oLkFiKTthLmIoXCJleHByZXNzaW9uUmV3cml0aW5nLnByZVByb2Nlc3NCaW5kaW5nc1wiLCBhLmguWGEpO2EuYihcImV4cHJlc3Npb25SZXdyaXRpbmcuX3R3b1dheUJpbmRpbmdzXCIsIGEuaC5nYSk7YS5iKFwianNvbkV4cHJlc3Npb25SZXdyaXRpbmdcIiwgYS5oKTthLmIoXCJqc29uRXhwcmVzc2lvblJld3JpdGluZy5pbnNlcnRQcm9wZXJ0eUFjY2Vzc29yc0ludG9Kc29uXCIsIGEuaC5YYSk7KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYihhKSB7XG4gICAgICAgICAgcmV0dXJuIDggPT0gYS5ub2RlVHlwZSAmJiBnLnRlc3QoZiA/IGEudGV4dCA6IGEubm9kZVZhbHVlKTtcbiAgICAgICAgfWZ1bmN0aW9uIGMoYSkge1xuICAgICAgICAgIHJldHVybiA4ID09IGEubm9kZVR5cGUgJiYgaC50ZXN0KGYgPyBhLnRleHQgOiBhLm5vZGVWYWx1ZSk7XG4gICAgICAgIH1mdW5jdGlvbiBkKGEsIGQpIHtcbiAgICAgICAgICBmb3IgKHZhciBlID0gYSwgZiA9IDEsIGwgPSBbXTsgZSA9IGUubmV4dFNpYmxpbmc7KSB7XG4gICAgICAgICAgICBpZiAoYyhlKSAmJiAoZi0tLCAwID09PSBmKSkgcmV0dXJuIGw7bC5wdXNoKGUpO2IoZSkgJiYgZisrO1xuICAgICAgICAgIH1pZiAoIWQpIHRocm93IEVycm9yKFwiQ2Fubm90IGZpbmQgY2xvc2luZyBjb21tZW50IHRhZyB0byBtYXRjaDogXCIgKyBhLm5vZGVWYWx1ZSk7cmV0dXJuIG51bGw7XG4gICAgICAgIH1mdW5jdGlvbiBlKGEsIGIpIHtcbiAgICAgICAgICB2YXIgYyA9IGQoYSwgYik7cmV0dXJuIGMgPyAwIDwgYy5sZW5ndGggPyBjW2MubGVuZ3RoIC0gMV0ubmV4dFNpYmxpbmcgOiBhLm5leHRTaWJsaW5nIDogbnVsbDtcbiAgICAgICAgfXZhciBmID0gdCAmJiBcIlxceDNjIS0tdGVzdC0tXFx4M2VcIiA9PT0gdC5jcmVhdGVDb21tZW50KFwidGVzdFwiKS50ZXh0LFxuICAgICAgICAgICAgZyA9IGYgPyAvXlxceDNjIS0tXFxzKmtvKD86XFxzKyhbXFxzXFxTXSspKT9cXHMqLS1cXHgzZSQvIDogL15cXHMqa28oPzpcXHMrKFtcXHNcXFNdKykpP1xccyokLyxcbiAgICAgICAgICAgIGggPSBmID8gL15cXHgzYyEtLVxccypcXC9rb1xccyotLVxceDNlJC8gOiAvXlxccypcXC9rb1xccyokLyxcbiAgICAgICAgICAgIGwgPSB7IHVsOiAhMCwgb2w6ICEwIH07YS5mID0geyBhYToge30sIGNoaWxkTm9kZXM6IGZ1bmN0aW9uIGNoaWxkTm9kZXMoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGIoYSkgPyBkKGEpIDogYS5jaGlsZE5vZGVzO1xuICAgICAgICAgIH0sIHphOiBmdW5jdGlvbiB6YShjKSB7XG4gICAgICAgICAgICBpZiAoYihjKSkge1xuICAgICAgICAgICAgICBjID0gYS5mLmNoaWxkTm9kZXMoYyk7Zm9yICh2YXIgZCA9IDAsIGUgPSBjLmxlbmd0aDsgZCA8IGU7IGQrKykge1xuICAgICAgICAgICAgICAgIGEucmVtb3ZlTm9kZShjW2RdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGEuYS5yYihjKTtcbiAgICAgICAgICB9LCBmYTogZnVuY3Rpb24gZmEoYywgZCkge1xuICAgICAgICAgICAgaWYgKGIoYykpIHtcbiAgICAgICAgICAgICAgYS5mLnphKGMpO2ZvciAodmFyIGUgPSBjLm5leHRTaWJsaW5nLCBmID0gMCwgbCA9IGQubGVuZ3RoOyBmIDwgbDsgZisrKSB7XG4gICAgICAgICAgICAgICAgZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkW2ZdLCBlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGEuYS5mYShjLCBkKTtcbiAgICAgICAgICB9LCBxYzogZnVuY3Rpb24gcWMoYSwgYykge1xuICAgICAgICAgICAgYihhKSA/IGEucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYywgYS5uZXh0U2libGluZykgOiBhLmZpcnN0Q2hpbGQgPyBhLmluc2VydEJlZm9yZShjLCBhLmZpcnN0Q2hpbGQpIDogYS5hcHBlbmRDaGlsZChjKTtcbiAgICAgICAgICB9LCBrYzogZnVuY3Rpb24ga2MoYywgZCwgZSkge1xuICAgICAgICAgICAgZSA/IGIoYykgPyBjLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGQsIGUubmV4dFNpYmxpbmcpIDogZS5uZXh0U2libGluZyA/IGMuaW5zZXJ0QmVmb3JlKGQsIGUubmV4dFNpYmxpbmcpIDogYy5hcHBlbmRDaGlsZChkKSA6IGEuZi5xYyhjLCBkKTtcbiAgICAgICAgICB9LCBmaXJzdENoaWxkOiBmdW5jdGlvbiBmaXJzdENoaWxkKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBiKGEpID8gIWEubmV4dFNpYmxpbmcgfHwgYyhhLm5leHRTaWJsaW5nKSA/IG51bGwgOiBhLm5leHRTaWJsaW5nIDogYS5maXJzdENoaWxkO1xuICAgICAgICAgIH0sIG5leHRTaWJsaW5nOiBmdW5jdGlvbiBuZXh0U2libGluZyhhKSB7XG4gICAgICAgICAgICBiKGEpICYmIChhID0gZShhKSk7cmV0dXJuIGEubmV4dFNpYmxpbmcgJiYgYyhhLm5leHRTaWJsaW5nKSA/IG51bGwgOiBhLm5leHRTaWJsaW5nO1xuICAgICAgICAgIH0sIFljOiBiLCB2ZDogZnVuY3Rpb24gdmQoYSkge1xuICAgICAgICAgICAgcmV0dXJuIChhID0gKGYgPyBhLnRleHQgOiBhLm5vZGVWYWx1ZSkubWF0Y2goZykpID8gYVsxXSA6IG51bGw7XG4gICAgICAgICAgfSwgb2M6IGZ1bmN0aW9uIG9jKGQpIHtcbiAgICAgICAgICAgIGlmIChsW2EuYS5BKGQpXSkge1xuICAgICAgICAgICAgICB2YXIgayA9IGQuZmlyc3RDaGlsZDtpZiAoaykge1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgIGlmICgxID09PSBrLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmO2YgPSBrLmZpcnN0Q2hpbGQ7dmFyIGcgPSBudWxsO2lmIChmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGcpIGcucHVzaChmKTtlbHNlIGlmIChiKGYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gZShmLCAhMCk7aCA/IGYgPSBoIDogZyA9IFtmXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjKGYpICYmIChnID0gW2ZdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChmID0gZi5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgIH1pZiAoZiA9IGcpIGZvciAoZyA9IGsubmV4dFNpYmxpbmcsIGggPSAwOyBoIDwgZi5sZW5ndGg7IGgrKykge1xuICAgICAgICAgICAgICAgICAgICAgIGcgPyBkLmluc2VydEJlZm9yZShmW2hdLCBnKSA6IGQuYXBwZW5kQ2hpbGQoZltoXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IHdoaWxlIChrID0gay5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IH07XG4gICAgICB9KSgpO2EuYihcInZpcnR1YWxFbGVtZW50c1wiLCBhLmYpO2EuYihcInZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NcIiwgYS5mLmFhKTthLmIoXCJ2aXJ0dWFsRWxlbWVudHMuZW1wdHlOb2RlXCIsIGEuZi56YSk7YS5iKFwidmlydHVhbEVsZW1lbnRzLmluc2VydEFmdGVyXCIsIGEuZi5rYyk7YS5iKFwidmlydHVhbEVsZW1lbnRzLnByZXBlbmRcIiwgYS5mLnFjKTthLmIoXCJ2aXJ0dWFsRWxlbWVudHMuc2V0RG9tTm9kZUNoaWxkcmVuXCIsIGEuZi5mYSk7KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYS5TID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuS2MgPSB7fTtcbiAgICAgICAgfTthLmEuZXh0ZW5kKGEuUy5wcm90b3R5cGUsIHsgbm9kZUhhc0JpbmRpbmdzOiBmdW5jdGlvbiBub2RlSGFzQmluZGluZ3MoYikge1xuICAgICAgICAgICAgc3dpdGNoIChiLm5vZGVUeXBlKSB7Y2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IGIuZ2V0QXR0cmlidXRlKFwiZGF0YS1iaW5kXCIpIHx8IGEuZy5nZXRDb21wb25lbnROYW1lRm9yTm9kZShiKTtjYXNlIDg6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuZi5ZYyhiKTtkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAhMTt9XG4gICAgICAgICAgfSwgZ2V0QmluZGluZ3M6IGZ1bmN0aW9uIGdldEJpbmRpbmdzKGIsIGMpIHtcbiAgICAgICAgICAgIHZhciBkID0gdGhpcy5nZXRCaW5kaW5nc1N0cmluZyhiLCBjKSxcbiAgICAgICAgICAgICAgICBkID0gZCA/IHRoaXMucGFyc2VCaW5kaW5nc1N0cmluZyhkLCBjLCBiKSA6IG51bGw7cmV0dXJuIGEuZy5SYihkLCBiLCBjLCAhMSk7XG4gICAgICAgICAgfSwgZ2V0QmluZGluZ0FjY2Vzc29yczogZnVuY3Rpb24gZ2V0QmluZGluZ0FjY2Vzc29ycyhiLCBjKSB7XG4gICAgICAgICAgICB2YXIgZCA9IHRoaXMuZ2V0QmluZGluZ3NTdHJpbmcoYiwgYyksXG4gICAgICAgICAgICAgICAgZCA9IGQgPyB0aGlzLnBhcnNlQmluZGluZ3NTdHJpbmcoZCwgYywgYiwgeyB2YWx1ZUFjY2Vzc29yczogITAgfSkgOiBudWxsO3JldHVybiBhLmcuUmIoZCwgYiwgYywgITApO1xuICAgICAgICAgIH0sIGdldEJpbmRpbmdzU3RyaW5nOiBmdW5jdGlvbiBnZXRCaW5kaW5nc1N0cmluZyhiKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGIubm9kZVR5cGUpIHtjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGIuZ2V0QXR0cmlidXRlKFwiZGF0YS1iaW5kXCIpO2Nhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5mLnZkKGIpO2RlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7fVxuICAgICAgICAgIH0sIHBhcnNlQmluZGluZ3NTdHJpbmc6IGZ1bmN0aW9uIHBhcnNlQmluZGluZ3NTdHJpbmcoYiwgYywgZCwgZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGYgPSB0aGlzLktjLFxuICAgICAgICAgICAgICAgICAgZyA9IGIgKyAoZSAmJiBlLnZhbHVlQWNjZXNzb3JzIHx8IFwiXCIpLFxuICAgICAgICAgICAgICAgICAgaDtpZiAoIShoID0gZltnXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCxcbiAgICAgICAgICAgICAgICAgICAgbSA9IFwid2l0aCgkY29udGV4dCl7d2l0aCgkZGF0YXx8e30pe3JldHVybntcIiArIGEuaC5YYShiLCBlKSArIFwifX19XCI7bCA9IG5ldyBGdW5jdGlvbihcIiRjb250ZXh0XCIsIFwiJGVsZW1lbnRcIiwgbSk7aCA9IGZbZ10gPSBsO1xuICAgICAgICAgICAgICB9cmV0dXJuIGgoYywgZCk7XG4gICAgICAgICAgICB9IGNhdGNoIChrKSB7XG4gICAgICAgICAgICAgIHRocm93IGsubWVzc2FnZSA9IFwiVW5hYmxlIHRvIHBhcnNlIGJpbmRpbmdzLlxcbkJpbmRpbmdzIHZhbHVlOiBcIiArIGIgKyBcIlxcbk1lc3NhZ2U6IFwiICsgay5tZXNzYWdlLCBrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gfSk7YS5TLmluc3RhbmNlID0gbmV3IGEuUygpO1xuICAgICAgfSkoKTthLmIoXCJiaW5kaW5nUHJvdmlkZXJcIiwgYS5TKTsoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBiKGEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgfTtcbiAgICAgICAgfWZ1bmN0aW9uIGMoYSkge1xuICAgICAgICAgIHJldHVybiBhKCk7XG4gICAgICAgIH1mdW5jdGlvbiBkKGIpIHtcbiAgICAgICAgICByZXR1cm4gYS5hLkVhKGEubC53KGIpLCBmdW5jdGlvbiAoYSwgYykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGIoKVtjXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1mdW5jdGlvbiBlKGMsIGUsIGspIHtcbiAgICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYyA/IGQoYy5iaW5kKG51bGwsIGUsIGspKSA6IGEuYS5FYShjLCBiKTtcbiAgICAgICAgfWZ1bmN0aW9uIGYoYSwgYikge1xuICAgICAgICAgIHJldHVybiBkKHRoaXMuZ2V0QmluZGluZ3MuYmluZCh0aGlzLCBhLCBiKSk7XG4gICAgICAgIH1mdW5jdGlvbiBnKGIsIGMsIGQpIHtcbiAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgayA9IGEuZi5maXJzdENoaWxkKGMpLFxuICAgICAgICAgICAgICBmID0gYS5TLmluc3RhbmNlLFxuICAgICAgICAgICAgICBtID0gZi5wcmVwcm9jZXNzTm9kZTtpZiAobSkge1xuICAgICAgICAgICAgZm9yICg7IGUgPSBrOykge1xuICAgICAgICAgICAgICBrID0gYS5mLm5leHRTaWJsaW5nKGUpLCBtLmNhbGwoZiwgZSk7XG4gICAgICAgICAgICB9ayA9IGEuZi5maXJzdENoaWxkKGMpO1xuICAgICAgICAgIH1mb3IgKDsgZSA9IGs7KSB7XG4gICAgICAgICAgICBrID0gYS5mLm5leHRTaWJsaW5nKGUpLCBoKGIsIGUsIGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfWZ1bmN0aW9uIGgoYiwgYywgZCkge1xuICAgICAgICAgIHZhciBlID0gITAsXG4gICAgICAgICAgICAgIGsgPSAxID09PSBjLm5vZGVUeXBlO2sgJiYgYS5mLm9jKGMpO2lmIChrICYmIGQgfHwgYS5TLmluc3RhbmNlLm5vZGVIYXNCaW5kaW5ncyhjKSkgZSA9IG0oYywgbnVsbCwgYiwgZCkuc2hvdWxkQmluZERlc2NlbmRhbnRzO2UgJiYgIXJbYS5hLkEoYyldICYmIGcoYiwgYywgIWspO1xuICAgICAgICB9ZnVuY3Rpb24gbChiKSB7XG4gICAgICAgICAgdmFyIGMgPSBbXSxcbiAgICAgICAgICAgICAgZCA9IHt9LFxuICAgICAgICAgICAgICBlID0gW107YS5hLkQoYiwgZnVuY3Rpb24gWChrKSB7XG4gICAgICAgICAgICBpZiAoIWRba10pIHtcbiAgICAgICAgICAgICAgdmFyIGYgPSBhLmdldEJpbmRpbmdIYW5kbGVyKGspO2YgJiYgKGYuYWZ0ZXIgJiYgKGUucHVzaChrKSwgYS5hLnIoZi5hZnRlciwgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYltjXSkge1xuICAgICAgICAgICAgICAgICAgaWYgKC0xICE9PSBhLmEubyhlLCBjKSkgdGhyb3cgRXJyb3IoXCJDYW5ub3QgY29tYmluZSB0aGUgZm9sbG93aW5nIGJpbmRpbmdzLCBiZWNhdXNlIHRoZXkgaGF2ZSBhIGN5Y2xpYyBkZXBlbmRlbmN5OiBcIiArIGUuam9pbihcIiwgXCIpKTtcbiAgICAgICAgICAgICAgICAgIFgoYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSwgZS5sZW5ndGgtLSksIGMucHVzaCh7IGtleTogaywgamM6IGYgfSkpO2Rba10gPSAhMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtyZXR1cm4gYztcbiAgICAgICAgfWZ1bmN0aW9uIG0oYiwgZCwgZSwgaykge1xuICAgICAgICAgIHZhciBtID0gYS5hLmUuZ2V0KGIsIHEpO2lmICghZCkge1xuICAgICAgICAgICAgaWYgKG0pIHRocm93IEVycm9yKFwiWW91IGNhbm5vdCBhcHBseSBiaW5kaW5ncyBtdWx0aXBsZSB0aW1lcyB0byB0aGUgc2FtZSBlbGVtZW50LlwiKTthLmEuZS5zZXQoYiwgcSwgITApO1xuICAgICAgICAgIH0hbSAmJiBrICYmIGEueGMoYiwgZSk7dmFyIGc7aWYgKGQgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZCkgZyA9IGQ7ZWxzZSB7XG4gICAgICAgICAgICB2YXIgaCA9IGEuUy5pbnN0YW5jZSxcbiAgICAgICAgICAgICAgICByID0gaC5nZXRCaW5kaW5nQWNjZXNzb3JzIHx8IGYsXG4gICAgICAgICAgICAgICAgcCA9IGEuQihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIChnID0gZCA/IGQoZSwgYikgOiByLmNhbGwoaCwgYiwgZSkpICYmIGUuUSAmJiBlLlEoKTtyZXR1cm4gZztcbiAgICAgICAgICAgIH0sIG51bGwsIHsgaTogYiB9KTtnICYmIHAuY2EoKSB8fCAocCA9IG51bGwpO1xuICAgICAgICAgIH12YXIgcztpZiAoZykge1xuICAgICAgICAgICAgdmFyIHQgPSBwID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyhwKClbYV0pO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBnW2FdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1ID0gZnVuY3Rpb24gdSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGEuYS5FYShwID8gcCgpIDogZywgYyk7XG4gICAgICAgICAgICB9O3UuZ2V0ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdbYV0gJiYgYyh0KGEpKTtcbiAgICAgICAgICAgIH07dS5oYXMgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICByZXR1cm4gYSBpbiBnO1xuICAgICAgICAgICAgfTtrID0gbChnKTthLmEucihrLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICB2YXIgZCA9IGMuamMuaW5pdCxcbiAgICAgICAgICAgICAgICAgIGsgPSBjLmpjLnVwZGF0ZSxcbiAgICAgICAgICAgICAgICAgIGYgPSBjLmtleTtpZiAoOCA9PT0gYi5ub2RlVHlwZSAmJiAhYS5mLmFhW2ZdKSB0aHJvdyBFcnJvcihcIlRoZSBiaW5kaW5nICdcIiArIGYgKyBcIicgY2Fubm90IGJlIHVzZWQgd2l0aCB2aXJ0dWFsIGVsZW1lbnRzXCIpO3RyeSB7XG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBkICYmIGEubC53KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gZChiLCB0KGYpLCB1LCBlLiRkYXRhLCBlKTtpZiAoYSAmJiBhLmNvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzICE9PSBuKSB0aHJvdyBFcnJvcihcIk11bHRpcGxlIGJpbmRpbmdzIChcIiArIHMgKyBcIiBhbmQgXCIgKyBmICsgXCIpIGFyZSB0cnlpbmcgdG8gY29udHJvbCBkZXNjZW5kYW50IGJpbmRpbmdzIG9mIHRoZSBzYW1lIGVsZW1lbnQuIFlvdSBjYW5ub3QgdXNlIHRoZXNlIGJpbmRpbmdzIHRvZ2V0aGVyIG9uIHRoZSBzYW1lIGVsZW1lbnQuXCIpO1xuICAgICAgICAgICAgICAgICAgICBzID0gZjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBrICYmIGEuQihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBrKGIsIHQoZiksIHUsIGUuJGRhdGEsIGUpO1xuICAgICAgICAgICAgICAgIH0sIG51bGwsIHsgaTogYiB9KTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAobSkge1xuICAgICAgICAgICAgICAgIHRocm93IG0ubWVzc2FnZSA9ICdVbmFibGUgdG8gcHJvY2VzcyBiaW5kaW5nIFwiJyArIGYgKyBcIjogXCIgKyBnW2ZdICsgJ1wiXFxuTWVzc2FnZTogJyArIG0ubWVzc2FnZSwgbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfXJldHVybiB7IHNob3VsZEJpbmREZXNjZW5kYW50czogcyA9PT0gbiB9O1xuICAgICAgICB9ZnVuY3Rpb24gayhiKSB7XG4gICAgICAgICAgcmV0dXJuIGIgJiYgYiBpbnN0YW5jZW9mIGEuUiA/IGIgOiBuZXcgYS5SKGIpO1xuICAgICAgICB9YS5kID0ge307dmFyIHIgPSB7IHNjcmlwdDogITAsIHRleHRhcmVhOiAhMCwgdGVtcGxhdGU6ICEwIH07YS5nZXRCaW5kaW5nSGFuZGxlciA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgcmV0dXJuIGEuZFtiXTtcbiAgICAgICAgfTthLlIgPSBmdW5jdGlvbiAoYiwgYywgZCwgZSwgaykge1xuICAgICAgICAgIGZ1bmN0aW9uIGYoKSB7XG4gICAgICAgICAgICB2YXIgayA9IGcgPyBiKCkgOiBiLFxuICAgICAgICAgICAgICAgIG0gPSBhLmEuYyhrKTtjID8gKGMuUSAmJiBjLlEoKSwgYS5hLmV4dGVuZChsLCBjKSwgbC5RID0gcikgOiAobC4kcGFyZW50cyA9IFtdLCBsLiRyb290ID0gbSwgbC5rbyA9IGEpO2wuJHJhd0RhdGEgPSBrO2wuJGRhdGEgPSBtO2QgJiYgKGxbZF0gPSBtKTtlICYmIGUobCwgYywgbSk7cmV0dXJuIGwuJGRhdGE7XG4gICAgICAgICAgfWZ1bmN0aW9uIG0oKSB7XG4gICAgICAgICAgICByZXR1cm4gaCAmJiAhYS5hLlRiKGgpO1xuICAgICAgICAgIH12YXIgbCA9IHRoaXMsXG4gICAgICAgICAgICAgIGcgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGIgJiYgIWEuSShiKSxcbiAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgcjtrICYmIGsuZXhwb3J0RGVwZW5kZW5jaWVzID8gZigpIDogKHIgPSBhLkIoZiwgbnVsbCwgeyB5YTogbSwgaTogITAgfSksIHIuY2EoKSAmJiAobC5RID0gciwgci5lcXVhbGl0eUNvbXBhcmVyID0gbnVsbCwgaCA9IFtdLCByLkRjID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgIGgucHVzaChiKTthLmEuRy5xYShiLCBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgICBhLmEuTmEoaCwgYik7aC5sZW5ndGggfHwgKHIuaygpLCBsLlEgPSByID0gbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH07YS5SLnByb3RvdHlwZS5jcmVhdGVDaGlsZENvbnRleHQgPSBmdW5jdGlvbiAoYiwgYywgZCwgZSkge1xuICAgICAgICAgIHJldHVybiBuZXcgYS5SKGIsIHRoaXMsIGMsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBhLiRwYXJlbnRDb250ZXh0ID0gYjthLiRwYXJlbnQgPSBiLiRkYXRhO2EuJHBhcmVudHMgPSAoYi4kcGFyZW50cyB8fCBbXSkuc2xpY2UoMCk7YS4kcGFyZW50cy51bnNoaWZ0KGEuJHBhcmVudCk7XG4gICAgICAgICAgICBkICYmIGQoYSk7XG4gICAgICAgICAgfSwgZSk7XG4gICAgICAgIH07YS5SLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICAgIHJldHVybiBuZXcgYS5SKHRoaXMuUSB8fCB0aGlzLiRkYXRhLCB0aGlzLCBudWxsLCBmdW5jdGlvbiAoYywgZCkge1xuICAgICAgICAgICAgYy4kcmF3RGF0YSA9IGQuJHJhd0RhdGE7YS5hLmV4dGVuZChjLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGIgPyBiKCkgOiBiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTthLlIucHJvdG90eXBlLmFjID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDaGlsZENvbnRleHQoYSwgYiwgbnVsbCwgeyBleHBvcnREZXBlbmRlbmNpZXM6ICEwIH0pO1xuICAgICAgICB9O3ZhciBxID0gYS5hLmUuSigpLFxuICAgICAgICAgICAgcCA9IGEuYS5lLkooKTthLnhjID0gZnVuY3Rpb24gKGIsIGMpIHtcbiAgICAgICAgICBpZiAoMiA9PSBhcmd1bWVudHMubGVuZ3RoKSBhLmEuZS5zZXQoYiwgcCwgYyksIGMuUSAmJiBjLlEuRGMoYik7ZWxzZSByZXR1cm4gYS5hLmUuZ2V0KGIsIHApO1xuICAgICAgICB9O2EuTGEgPSBmdW5jdGlvbiAoYiwgYywgZCkge1xuICAgICAgICAgIDEgPT09IGIubm9kZVR5cGUgJiYgYS5mLm9jKGIpO3JldHVybiBtKGIsIGMsIGsoZCksICEwKTtcbiAgICAgICAgfTthLkljID0gZnVuY3Rpb24gKGIsIGMsIGQpIHtcbiAgICAgICAgICBkID0gayhkKTtyZXR1cm4gYS5MYShiLCBlKGMsIGQsIGIpLCBkKTtcbiAgICAgICAgfTthLmhiID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAxICE9PSBiLm5vZGVUeXBlICYmIDggIT09IGIubm9kZVR5cGUgfHwgZyhrKGEpLCBiLCAhMCk7XG4gICAgICAgIH07YS5VYiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgIXUgJiYgeC5qUXVlcnkgJiYgKHUgPSB4LmpRdWVyeSk7aWYgKGIgJiYgMSAhPT0gYi5ub2RlVHlwZSAmJiA4ICE9PSBiLm5vZGVUeXBlKSB0aHJvdyBFcnJvcihcImtvLmFwcGx5QmluZGluZ3M6IGZpcnN0IHBhcmFtZXRlciBzaG91bGQgYmUgeW91ciB2aWV3IG1vZGVsOyBzZWNvbmQgcGFyYW1ldGVyIHNob3VsZCBiZSBhIERPTSBub2RlXCIpO2IgPSBiIHx8IHguZG9jdW1lbnQuYm9keTtoKGsoYSksIGIsICEwKTtcbiAgICAgICAgfTthLm5iID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICBzd2l0Y2ggKGIubm9kZVR5cGUpIHtjYXNlIDE6Y2FzZSA4OlxuICAgICAgICAgICAgICB2YXIgYyA9IGEueGMoYik7aWYgKGMpIHJldHVybiBjO2lmIChiLnBhcmVudE5vZGUpIHJldHVybiBhLm5iKGIucGFyZW50Tm9kZSk7fXJldHVybiBuO1xuICAgICAgICB9O2EuT2MgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICAgIHJldHVybiAoYiA9IGEubmIoYikpID8gYi4kZGF0YSA6IG47XG4gICAgICAgIH07YS5iKFwiYmluZGluZ0hhbmRsZXJzXCIsIGEuZCk7YS5iKFwiYXBwbHlCaW5kaW5nc1wiLCBhLlViKTthLmIoXCJhcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50c1wiLCBhLmhiKTthLmIoXCJhcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGVcIiwgYS5MYSk7YS5iKFwiYXBwbHlCaW5kaW5nc1RvTm9kZVwiLCBhLkljKTthLmIoXCJjb250ZXh0Rm9yXCIsIGEubmIpO2EuYihcImRhdGFGb3JcIiwgYS5PYyk7XG4gICAgICB9KSgpOyhmdW5jdGlvbiAoYikge1xuICAgICAgICBmdW5jdGlvbiBjKGMsIGUpIHtcbiAgICAgICAgICB2YXIgbSA9IGYuaGFzT3duUHJvcGVydHkoYykgPyBmW2NdIDogYixcbiAgICAgICAgICAgICAgazttID8gbS5ZKGUpIDogKG0gPSBmW2NdID0gbmV3IGEuSygpLCBtLlkoZSksIGQoYywgZnVuY3Rpb24gKGIsIGQpIHtcbiAgICAgICAgICAgIHZhciBlID0gISghZCB8fCAhZC5zeW5jaHJvbm91cyk7Z1tjXSA9IHsgZGVmaW5pdGlvbjogYiwgZGQ6IGUgfTtkZWxldGUgZltjXTtrIHx8IGUgPyBtLm5vdGlmeVN1YnNjcmliZXJzKGIpIDogYS5aLlphKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgbS5ub3RpZnlTdWJzY3JpYmVycyhiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pLCBrID0gITApO1xuICAgICAgICB9ZnVuY3Rpb24gZChhLCBiKSB7XG4gICAgICAgICAgZShcImdldENvbmZpZ1wiLCBbYV0sIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBjID8gZShcImxvYWRDb21wb25lbnRcIiwgW2EsIGNdLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICBiKGEsIGMpO1xuICAgICAgICAgICAgfSkgOiBiKG51bGwsIG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9ZnVuY3Rpb24gZShjLCBkLCBmLCBrKSB7XG4gICAgICAgICAgayB8fCAoayA9IGEuZy5sb2FkZXJzLnNsaWNlKDApKTt2YXIgZyA9IGsuc2hpZnQoKTtpZiAoZykge1xuICAgICAgICAgICAgdmFyIHEgPSBnW2NdO2lmIChxKSB7XG4gICAgICAgICAgICAgIHZhciBwID0gITE7aWYgKHEuYXBwbHkoZywgZC5jb25jYXQoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICBwID8gZihudWxsKSA6IG51bGwgIT09IGEgPyBmKGEpIDogZShjLCBkLCBmLCBrKTtcbiAgICAgICAgICAgICAgfSkpICE9PSBiICYmIChwID0gITAsICFnLnN1cHByZXNzTG9hZGVyRXhjZXB0aW9ucykpIHRocm93IEVycm9yKFwiQ29tcG9uZW50IGxvYWRlcnMgbXVzdCBzdXBwbHkgdmFsdWVzIGJ5IGludm9raW5nIHRoZSBjYWxsYmFjaywgbm90IGJ5IHJldHVybmluZyB2YWx1ZXMgc3luY2hyb25vdXNseS5cIik7XG4gICAgICAgICAgICB9IGVsc2UgZShjLCBkLCBmLCBrKTtcbiAgICAgICAgICB9IGVsc2UgZihudWxsKTtcbiAgICAgICAgfXZhciBmID0ge30sXG4gICAgICAgICAgICBnID0ge307YS5nID0geyBnZXQ6IGZ1bmN0aW9uIGdldChkLCBlKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGcuaGFzT3duUHJvcGVydHkoZCkgPyBnW2RdIDogYjtmID8gZi5kZCA/IGEubC53KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZShmLmRlZmluaXRpb24pO1xuICAgICAgICAgICAgfSkgOiBhLlouWmEoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBlKGYuZGVmaW5pdGlvbik7XG4gICAgICAgICAgICB9KSA6IGMoZCwgZSk7XG4gICAgICAgICAgfSwgJGI6IGZ1bmN0aW9uICRiKGEpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBnW2FdO1xuICAgICAgICAgIH0sIE5iOiBlIH07YS5nLmxvYWRlcnMgPSBbXTthLmIoXCJjb21wb25lbnRzXCIsIGEuZyk7YS5iKFwiY29tcG9uZW50cy5nZXRcIiwgYS5nLmdldCk7YS5iKFwiY29tcG9uZW50cy5jbGVhckNhY2hlZERlZmluaXRpb25cIiwgYS5nLiRiKTtcbiAgICAgIH0pKCk7KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYihiLCBjLCBkLCBlKSB7XG4gICAgICAgICAgZnVuY3Rpb24gZygpIHtcbiAgICAgICAgICAgIDAgPT09IC0teSAmJiBlKGgpO1xuICAgICAgICAgIH12YXIgaCA9IHt9LFxuICAgICAgICAgICAgICB5ID0gMixcbiAgICAgICAgICAgICAgdiA9IGQudGVtcGxhdGU7ZCA9IGQudmlld01vZGVsO3YgPyBmKGMsIHYsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBhLmcuTmIoXCJsb2FkVGVtcGxhdGVcIiwgW2IsIGNdLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICBoLnRlbXBsYXRlID0gYTtnKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSA6IGcoKTtkID8gZihjLCBkLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgYS5nLk5iKFwibG9hZFZpZXdNb2RlbFwiLCBbYiwgY10sIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIGhbbF0gPSBhO2coKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pIDogZygpO1xuICAgICAgICB9ZnVuY3Rpb24gYyhhLCBiLCBkKSB7XG4gICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGIpIGQoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgYihhKTtcbiAgICAgICAgICB9KTtlbHNlIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBiW2xdKSBkKGJbbF0pO2Vsc2UgaWYgKFwiaW5zdGFuY2VcIiBpbiBiKSB7XG4gICAgICAgICAgICB2YXIgZSA9IGIuaW5zdGFuY2U7ZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIFwidmlld01vZGVsXCIgaW4gYiA/IGMoYSwgYi52aWV3TW9kZWwsIGQpIDogYShcIlVua25vd24gdmlld01vZGVsIHZhbHVlOiBcIiArIGIpO1xuICAgICAgICB9ZnVuY3Rpb24gZChiKSB7XG4gICAgICAgICAgc3dpdGNoIChhLmEuQShiKSkge2Nhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIGEuYS5uYShiLnRleHQpO2Nhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgICAgICAgICByZXR1cm4gYS5hLm5hKGIudmFsdWUpO2Nhc2UgXCJ0ZW1wbGF0ZVwiOlxuICAgICAgICAgICAgICBpZiAoZShiLmNvbnRlbnQpKSByZXR1cm4gYS5hLndhKGIuY29udGVudC5jaGlsZE5vZGVzKTt9cmV0dXJuIGEuYS53YShiLmNoaWxkTm9kZXMpO1xuICAgICAgICB9ZnVuY3Rpb24gZShhKSB7XG4gICAgICAgICAgcmV0dXJuIHguRG9jdW1lbnRGcmFnbWVudCA/IGEgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50IDogYSAmJiAxMSA9PT0gYS5ub2RlVHlwZTtcbiAgICAgICAgfWZ1bmN0aW9uIGYoYSwgYiwgYykge1xuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBiLnJlcXVpcmUgPyBPIHx8IHgucmVxdWlyZSA/IChPIHx8IHgucmVxdWlyZSkoW2IucmVxdWlyZV0sIGMpIDogYShcIlVzZXMgcmVxdWlyZSwgYnV0IG5vIEFNRCBsb2FkZXIgaXMgcHJlc2VudFwiKSA6IGMoYik7XG4gICAgICAgIH1mdW5jdGlvbiBnKGEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiQ29tcG9uZW50ICdcIiArIGEgKyBcIic6IFwiICsgYik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfXZhciBoID0ge307YS5nLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGIsIGMpIHtcbiAgICAgICAgICBpZiAoIWMpIHRocm93IEVycm9yKFwiSW52YWxpZCBjb25maWd1cmF0aW9uIGZvciBcIiArIGIpO2lmIChhLmcud2IoYikpIHRocm93IEVycm9yKFwiQ29tcG9uZW50IFwiICsgYiArIFwiIGlzIGFscmVhZHkgcmVnaXN0ZXJlZFwiKTtoW2JdID0gYztcbiAgICAgICAgfTthLmcud2IgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiBoLmhhc093blByb3BlcnR5KGEpO1xuICAgICAgICB9O2EuZy51ZCA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgZGVsZXRlIGhbYl07YS5nLiRiKGIpO1xuICAgICAgICB9O2EuZy5jYyA9IHsgZ2V0Q29uZmlnOiBmdW5jdGlvbiBnZXRDb25maWcoYSwgYikge1xuICAgICAgICAgICAgYihoLmhhc093blByb3BlcnR5KGEpID8gaFthXSA6IG51bGwpO1xuICAgICAgICAgIH0sIGxvYWRDb21wb25lbnQ6IGZ1bmN0aW9uIGxvYWRDb21wb25lbnQoYSwgYywgZCkge1xuICAgICAgICAgICAgdmFyIGUgPSBnKGEpO2YoZSwgYywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgYihhLCBlLCBjLCBkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIGxvYWRUZW1wbGF0ZTogZnVuY3Rpb24gbG9hZFRlbXBsYXRlKGIsIGMsIGYpIHtcbiAgICAgICAgICAgIGIgPSBnKGIpO2lmIChcInN0cmluZ1wiID09PSB0eXBlb2YgYykgZihhLmEubmEoYykpO2Vsc2UgaWYgKGMgaW5zdGFuY2VvZiBBcnJheSkgZihjKTtlbHNlIGlmIChlKGMpKSBmKGEuYS5XKGMuY2hpbGROb2RlcykpO2Vsc2UgaWYgKGMuZWxlbWVudCkge1xuICAgICAgICAgICAgICBpZiAoYyA9IGMuZWxlbWVudCwgeC5IVE1MRWxlbWVudCA/IGMgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA6IGMgJiYgYy50YWdOYW1lICYmIDEgPT09IGMubm9kZVR5cGUpIGYoZChjKSk7ZWxzZSBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IHQuZ2V0RWxlbWVudEJ5SWQoYyk7bCA/IGYoZChsKSkgOiBiKFwiQ2Fubm90IGZpbmQgZWxlbWVudCB3aXRoIElEIFwiICsgYyk7XG4gICAgICAgICAgICAgIH0gZWxzZSBiKFwiVW5rbm93biBlbGVtZW50IHR5cGU6IFwiICsgYyk7XG4gICAgICAgICAgICB9IGVsc2UgYihcIlVua25vd24gdGVtcGxhdGUgdmFsdWU6IFwiICsgYyk7XG4gICAgICAgICAgfSwgbG9hZFZpZXdNb2RlbDogZnVuY3Rpb24gbG9hZFZpZXdNb2RlbChhLCBiLCBkKSB7XG4gICAgICAgICAgICBjKGcoYSksIGIsIGQpO1xuICAgICAgICAgIH0gfTt2YXIgbCA9IFwiY3JlYXRlVmlld01vZGVsXCI7YS5iKFwiY29tcG9uZW50cy5yZWdpc3RlclwiLCBhLmcucmVnaXN0ZXIpO2EuYihcImNvbXBvbmVudHMuaXNSZWdpc3RlcmVkXCIsIGEuZy53Yik7YS5iKFwiY29tcG9uZW50cy51bnJlZ2lzdGVyXCIsIGEuZy51ZCk7YS5iKFwiY29tcG9uZW50cy5kZWZhdWx0TG9hZGVyXCIsIGEuZy5jYyk7YS5nLmxvYWRlcnMucHVzaChhLmcuY2MpO2EuZy5FYyA9IGg7XG4gICAgICB9KSgpOyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGIoYiwgZSkge1xuICAgICAgICAgIHZhciBmID0gYi5nZXRBdHRyaWJ1dGUoXCJwYXJhbXNcIik7aWYgKGYpIHtcbiAgICAgICAgICAgIHZhciBmID0gYy5wYXJzZUJpbmRpbmdzU3RyaW5nKGYsIGUsIGIsIHsgdmFsdWVBY2Nlc3NvcnM6ICEwLCBiaW5kaW5nUGFyYW1zOiAhMCB9KSxcbiAgICAgICAgICAgICAgICBmID0gYS5hLkVhKGYsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLm0oYywgbnVsbCwgeyBpOiBiIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZyA9IGEuYS5FYShmLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICB2YXIgZSA9IGMucCgpO3JldHVybiBjLmNhKCkgPyBhLm0oeyByZWFkOiBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuYS5jKGMoKSk7XG4gICAgICAgICAgICAgICAgfSwgd3JpdGU6IGEuRGEoZSkgJiYgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgIGMoKShhKTtcbiAgICAgICAgICAgICAgICB9LCBpOiBiIH0pIDogZTtcbiAgICAgICAgICAgIH0pO2cuaGFzT3duUHJvcGVydHkoXCIkcmF3XCIpIHx8IChnLiRyYXcgPSBmKTtyZXR1cm4gZztcbiAgICAgICAgICB9cmV0dXJuIHsgJHJhdzoge30gfTtcbiAgICAgICAgfWEuZy5nZXRDb21wb25lbnROYW1lRm9yTm9kZSA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgdmFyIGMgPSBhLmEuQShiKTtpZiAoYS5nLndiKGMpICYmICgtMSAhPSBjLmluZGV4T2YoXCItXCIpIHx8IFwiW29iamVjdCBIVE1MVW5rbm93bkVsZW1lbnRdXCIgPT0gXCJcIiArIGIgfHwgOCA+PSBhLmEuQyAmJiBiLnRhZ05hbWUgPT09IGMpKSByZXR1cm4gYztcbiAgICAgICAgfTthLmcuUmIgPSBmdW5jdGlvbiAoYywgZSwgZiwgZykge1xuICAgICAgICAgIGlmICgxID09PSBlLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICB2YXIgaCA9IGEuZy5nZXRDb21wb25lbnROYW1lRm9yTm9kZShlKTtpZiAoaCkge1xuICAgICAgICAgICAgICBjID0gYyB8fCB7fTtpZiAoYy5jb21wb25lbnQpIHRocm93IEVycm9yKCdDYW5ub3QgdXNlIHRoZSBcImNvbXBvbmVudFwiIGJpbmRpbmcgb24gYSBjdXN0b20gZWxlbWVudCBtYXRjaGluZyBhIGNvbXBvbmVudCcpO3ZhciBsID0geyBuYW1lOiBoLCBwYXJhbXM6IGIoZSwgZikgfTtjLmNvbXBvbmVudCA9IGcgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGw7XG4gICAgICAgICAgICAgIH0gOiBsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1yZXR1cm4gYztcbiAgICAgICAgfTt2YXIgYyA9IG5ldyBhLlMoKTs5ID4gYS5hLkMgJiYgKGEuZy5yZWdpc3RlciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICB0LmNyZWF0ZUVsZW1lbnQoYik7cmV0dXJuIGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KGEuZy5yZWdpc3RlciksIHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjID0gYigpLFxuICAgICAgICAgICAgICAgIGYgPSBhLmcuRWMsXG4gICAgICAgICAgICAgICAgZztmb3IgKGcgaW4gZikge1xuICAgICAgICAgICAgICBmLmhhc093blByb3BlcnR5KGcpICYmIGMuY3JlYXRlRWxlbWVudChnKTtcbiAgICAgICAgICAgIH1yZXR1cm4gYztcbiAgICAgICAgICB9O1xuICAgICAgICB9KHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCkpO1xuICAgICAgfSkoKTsoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgZnVuY3Rpb24gYyhiLCBjLCBkKSB7XG4gICAgICAgICAgYyA9IGMudGVtcGxhdGU7aWYgKCFjKSB0aHJvdyBFcnJvcihcIkNvbXBvbmVudCAnXCIgKyBiICsgXCInIGhhcyBubyB0ZW1wbGF0ZVwiKTtiID0gYS5hLndhKGMpO2EuZi5mYShkLCBiKTtcbiAgICAgICAgfWZ1bmN0aW9uIGQoYSwgYiwgYywgZCkge1xuICAgICAgICAgIHZhciBlID0gYS5jcmVhdGVWaWV3TW9kZWw7cmV0dXJuIGUgPyBlLmNhbGwoYSwgZCwgeyBlbGVtZW50OiBiLCB0ZW1wbGF0ZU5vZGVzOiBjIH0pIDogZDtcbiAgICAgICAgfXZhciBlID0gMDthLmQuY29tcG9uZW50ID0geyBpbml0OiBmdW5jdGlvbiBpbml0KGYsIGcsIGgsIGwsIG0pIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGsoKSB7XG4gICAgICAgICAgICAgIHZhciBhID0gciAmJiByLmRpc3Bvc2U7XCJmdW5jdGlvblwiID09PSB0eXBlb2YgYSAmJiBhLmNhbGwocik7cSA9IHIgPSBudWxsO1xuICAgICAgICAgICAgfXZhciByLFxuICAgICAgICAgICAgICAgIHEsXG4gICAgICAgICAgICAgICAgcCA9IGEuYS5XKGEuZi5jaGlsZE5vZGVzKGYpKTthLmEuRy5xYShmLCBrKTthLm0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgbCA9IGEuYS5jKGcoKSksXG4gICAgICAgICAgICAgICAgICBoLFxuICAgICAgICAgICAgICAgICAgdjtcInN0cmluZ1wiID09PSB0eXBlb2YgbCA/IGggPSBsIDogKGggPSBhLmEuYyhsLm5hbWUpLCB2ID0gYS5hLmMobC5wYXJhbXMpKTtpZiAoIWgpIHRocm93IEVycm9yKFwiTm8gY29tcG9uZW50IG5hbWUgc3BlY2lmaWVkXCIpO3ZhciBuID0gcSA9ICsrZTthLmcuZ2V0KGgsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHEgPT09IG4pIHtcbiAgICAgICAgICAgICAgICAgIGsoKTtpZiAoIWUpIHRocm93IEVycm9yKFwiVW5rbm93biBjb21wb25lbnQgJ1wiICsgaCArIFwiJ1wiKTtjKGgsIGUsIGYpO3ZhciBsID0gZChlLCBmLCBwLCB2KTtlID0gbS5jcmVhdGVDaGlsZENvbnRleHQobCwgYiwgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgYS4kY29tcG9uZW50ID0gbDthLiRjb21wb25lbnRUZW1wbGF0ZU5vZGVzID0gcDtcbiAgICAgICAgICAgICAgICAgIH0pO3IgPSBsO2EuaGIoZSwgZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIG51bGwsIHsgaTogZiB9KTtyZXR1cm4geyBjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczogITAgfTtcbiAgICAgICAgICB9IH07YS5mLmFhLmNvbXBvbmVudCA9ICEwO1xuICAgICAgfSkoKTt2YXIgUSA9IHsgXCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiLCBcImZvclwiOiBcImh0bWxGb3JcIiB9O2EuZC5hdHRyID0geyB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShiLCBjKSB7XG4gICAgICAgICAgdmFyIGQgPSBhLmEuYyhjKCkpIHx8IHt9O2EuYS5EKGQsIGZ1bmN0aW9uIChjLCBkKSB7XG4gICAgICAgICAgICBkID0gYS5hLmMoZCk7dmFyIGcgPSAhMSA9PT0gZCB8fCBudWxsID09PSBkIHx8IGQgPT09IG47ZyAmJiBiLnJlbW92ZUF0dHJpYnV0ZShjKTs4ID49IGEuYS5DICYmIGMgaW4gUSA/IChjID0gUVtjXSwgZyA/IGIucmVtb3ZlQXR0cmlidXRlKGMpIDogYltjXSA9IGQpIDogZyB8fCBiLnNldEF0dHJpYnV0ZShjLCBkLnRvU3RyaW5nKCkpO1wibmFtZVwiID09PSBjICYmIGEuYS52YyhiLCBnID8gXCJcIiA6IGQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gfTsoZnVuY3Rpb24gKCkge1xuICAgICAgICBhLmQuY2hlY2tlZCA9IHsgYWZ0ZXI6IFtcInZhbHVlXCIsIFwiYXR0clwiXSwgaW5pdDogZnVuY3Rpb24gaW5pdChiLCBjLCBkKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IGIuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICAgIGYgPSBwID8gZygpIDogZTtpZiAoIWEueGEuVmEoKSAmJiAoIWwgfHwgZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgaCA9IGEubC53KGMpO2lmIChrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbSA9IHIgPyBoLnAoKSA6IGg7cSAhPT0gZiA/IChlICYmIChhLmEucmEobSwgZiwgITApLCBhLmEucmEobSwgcSwgITEpKSwgcSA9IGYpIDogYS5hLnJhKG0sIGYsIGUpO3IgJiYgYS5EYShoKSAmJiBoKG0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBhLmguR2EoaCwgZCwgXCJjaGVja2VkXCIsIGYsICEwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWZ1bmN0aW9uIGYoKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gYS5hLmMoYygpKTtiLmNoZWNrZWQgPSBrID8gMCA8PSBhLmEubyhkLCBnKCkpIDogaCA/IGQgOiBnKCkgPT09IGQ7XG4gICAgICAgICAgICB9dmFyIGcgPSBhLnJjKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGQuaGFzKFwiY2hlY2tlZFZhbHVlXCIpID8gYS5hLmMoZC5nZXQoXCJjaGVja2VkVmFsdWVcIikpIDogZC5oYXMoXCJ2YWx1ZVwiKSA/IGEuYS5jKGQuZ2V0KFwidmFsdWVcIikpIDogYi52YWx1ZTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGggPSBcImNoZWNrYm94XCIgPT0gYi50eXBlLFxuICAgICAgICAgICAgICAgIGwgPSBcInJhZGlvXCIgPT0gYi50eXBlO2lmIChoIHx8IGwpIHtcbiAgICAgICAgICAgICAgdmFyIG0gPSBjKCksXG4gICAgICAgICAgICAgICAgICBrID0gaCAmJiBhLmEuYyhtKSBpbnN0YW5jZW9mIEFycmF5LFxuICAgICAgICAgICAgICAgICAgciA9ICEoayAmJiBtLnB1c2ggJiYgbS5zcGxpY2UpLFxuICAgICAgICAgICAgICAgICAgcSA9IGsgPyBnKCkgOiBuLFxuICAgICAgICAgICAgICAgICAgcCA9IGwgfHwgaztsICYmICFiLm5hbWUgJiYgYS5kLnVuaXF1ZU5hbWUuaW5pdChiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICB9KTthLm0oZSwgbnVsbCwgeyBpOiBiIH0pO2EuYS5xKGIsIFwiY2xpY2tcIiwgZSk7YS5tKGYsIG51bGwsIHsgaTogYiB9KTttID0gbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IH07YS5oLmdhLmNoZWNrZWQgPSAhMDthLmQuY2hlY2tlZFZhbHVlID0geyB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShiLCBjKSB7XG4gICAgICAgICAgICBiLnZhbHVlID0gYS5hLmMoYygpKTtcbiAgICAgICAgICB9IH07XG4gICAgICB9KSgpO2EuZC5jc3MgPSB7IHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGIsIGMpIHtcbiAgICAgICAgICB2YXIgZCA9IGEuYS5jKGMoKSk7bnVsbCAhPT0gZCAmJiBcIm9iamVjdFwiID09ICh0eXBlb2YgZCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGQpKSA/IGEuYS5EKGQsIGZ1bmN0aW9uIChjLCBkKSB7XG4gICAgICAgICAgICBkID0gYS5hLmMoZCk7YS5hLmZiKGIsIGMsIGQpO1xuICAgICAgICAgIH0pIDogKGQgPSBhLmEuY2IoU3RyaW5nKGQgfHwgXCJcIikpLCBhLmEuZmIoYiwgYi5fX2tvX19jc3NWYWx1ZSwgITEpLCBiLl9fa29fX2Nzc1ZhbHVlID0gZCwgYS5hLmZiKGIsIGQsICEwKSk7XG4gICAgICAgIH0gfTthLmQuZW5hYmxlID0geyB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShiLCBjKSB7XG4gICAgICAgICAgdmFyIGQgPSBhLmEuYyhjKCkpO1xuICAgICAgICAgIGQgJiYgYi5kaXNhYmxlZCA/IGIucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIikgOiBkIHx8IGIuZGlzYWJsZWQgfHwgKGIuZGlzYWJsZWQgPSAhMCk7XG4gICAgICAgIH0gfTthLmQuZGlzYWJsZSA9IHsgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoYiwgYykge1xuICAgICAgICAgIGEuZC5lbmFibGUudXBkYXRlKGIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhYS5hLmMoYygpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSB9O2EuZC5ldmVudCA9IHsgaW5pdDogZnVuY3Rpb24gaW5pdChiLCBjLCBkLCBlLCBmKSB7XG4gICAgICAgICAgdmFyIGcgPSBjKCkgfHwge307YS5hLkQoZywgZnVuY3Rpb24gKGcpIHtcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIGcgJiYgYS5hLnEoYiwgZywgZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgICAgdmFyIG0sXG4gICAgICAgICAgICAgICAgICBrID0gYygpW2ddO2lmIChrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHZhciByID0gYS5hLlcoYXJndW1lbnRzKTtlID0gZi4kZGF0YTtyLnVuc2hpZnQoZSk7bSA9IGsuYXBwbHkoZSwgcik7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICEwICE9PSBtICYmIChiLnByZXZlbnREZWZhdWx0ID8gYi5wcmV2ZW50RGVmYXVsdCgpIDogYi5yZXR1cm5WYWx1ZSA9ICExKTtcbiAgICAgICAgICAgICAgICB9ITEgPT09IGQuZ2V0KGcgKyBcIkJ1YmJsZVwiKSAmJiAoYi5jYW5jZWxCdWJibGUgPSAhMCwgYi5zdG9wUHJvcGFnYXRpb24gJiYgYi5zdG9wUHJvcGFnYXRpb24oKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IH07XG4gICAgICBhLmQuZm9yZWFjaCA9IHsgbWM6IGZ1bmN0aW9uIG1jKGIpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGMgPSBiKCksXG4gICAgICAgICAgICAgICAgZCA9IGEuYS5CYihjKTtpZiAoIWQgfHwgXCJudW1iZXJcIiA9PSB0eXBlb2YgZC5sZW5ndGgpIHJldHVybiB7IGZvcmVhY2g6IGMsIHRlbXBsYXRlRW5naW5lOiBhLlgudmIgfTthLmEuYyhjKTtyZXR1cm4geyBmb3JlYWNoOiBkLmRhdGEsIGFzOiBkLmFzLCBpbmNsdWRlRGVzdHJveWVkOiBkLmluY2x1ZGVEZXN0cm95ZWQsIGFmdGVyQWRkOiBkLmFmdGVyQWRkLCBiZWZvcmVSZW1vdmU6IGQuYmVmb3JlUmVtb3ZlLCBhZnRlclJlbmRlcjogZC5hZnRlclJlbmRlciwgYmVmb3JlTW92ZTogZC5iZWZvcmVNb3ZlLCBhZnRlck1vdmU6IGQuYWZ0ZXJNb3ZlLCB0ZW1wbGF0ZUVuZ2luZTogYS5YLnZiIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgaW5pdDogZnVuY3Rpb24gaW5pdChiLCBjKSB7XG4gICAgICAgICAgcmV0dXJuIGEuZC50ZW1wbGF0ZS5pbml0KGIsIGEuZC5mb3JlYWNoLm1jKGMpKTtcbiAgICAgICAgfSwgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoYiwgYywgZCwgZSwgZikge1xuICAgICAgICAgIHJldHVybiBhLmQudGVtcGxhdGUudXBkYXRlKGIsIGEuZC5mb3JlYWNoLm1jKGMpLCBkLCBlLCBmKTtcbiAgICAgICAgfSB9O2EuaC52YS5mb3JlYWNoID0gITE7YS5mLmFhLmZvcmVhY2ggPSAhMDthLmQuaGFzZm9jdXMgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQoYiwgYywgZCkge1xuICAgICAgICAgIGZ1bmN0aW9uIGUoZSkge1xuICAgICAgICAgICAgYi5fX2tvX2hhc2ZvY3VzVXBkYXRpbmcgPSAhMDt2YXIgZiA9IGIub3duZXJEb2N1bWVudDtpZiAoXCJhY3RpdmVFbGVtZW50XCIgaW4gZikge1xuICAgICAgICAgICAgICB2YXIgZzt0cnkge1xuICAgICAgICAgICAgICAgIGcgPSBmLmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGspIHtcbiAgICAgICAgICAgICAgICBnID0gZi5ib2R5O1xuICAgICAgICAgICAgICB9ZSA9IGcgPT09IGI7XG4gICAgICAgICAgICB9ZiA9IGMoKTthLmguR2EoZiwgZCwgXCJoYXNmb2N1c1wiLCBlLCAhMCk7Yi5fX2tvX2hhc2ZvY3VzTGFzdFZhbHVlID0gZTtiLl9fa29faGFzZm9jdXNVcGRhdGluZyA9ICExO1xuICAgICAgICAgIH12YXIgZiA9IGUuYmluZChudWxsLCAhMCksXG4gICAgICAgICAgICAgIGcgPSBlLmJpbmQobnVsbCwgITEpO2EuYS5xKGIsIFwiZm9jdXNcIiwgZik7YS5hLnEoYiwgXCJmb2N1c2luXCIsIGYpO2EuYS5xKGIsIFwiYmx1clwiLCBnKTthLmEucShiLCBcImZvY3Vzb3V0XCIsIGcpO1xuICAgICAgICB9LCB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShiLCBjKSB7XG4gICAgICAgICAgdmFyIGQgPSAhIWEuYS5jKGMoKSk7Yi5fX2tvX2hhc2ZvY3VzVXBkYXRpbmcgfHwgYi5fX2tvX2hhc2ZvY3VzTGFzdFZhbHVlID09PSBkIHx8IChkID8gYi5mb2N1cygpIDogYi5ibHVyKCksICFkICYmIGIuX19rb19oYXNmb2N1c0xhc3RWYWx1ZSAmJiBiLm93bmVyRG9jdW1lbnQuYm9keS5mb2N1cygpLCBhLmwudyhhLmEuRmEsIG51bGwsIFtiLCBkID8gXCJmb2N1c2luXCIgOiBcImZvY3Vzb3V0XCJdKSk7XG4gICAgICAgIH0gfTthLmguZ2EuaGFzZm9jdXMgPSAhMDthLmQuaGFzRm9jdXMgPSBhLmQuaGFzZm9jdXM7YS5oLmdhLmhhc0ZvY3VzID0gITA7YS5kLmh0bWwgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6ICEwIH07XG4gICAgICAgIH0sIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGIsIGMpIHtcbiAgICAgICAgICBhLmEuRWIoYiwgYygpKTtcbiAgICAgICAgfSB9O0soXCJpZlwiKTtLKFwiaWZub3RcIiwgITEsICEwKTtLKFwid2l0aFwiLCAhMCwgITEsIGZ1bmN0aW9uIChhLCBjKSB7XG4gICAgICAgIHJldHVybiBhLmFjKGMpO1xuICAgICAgfSk7dmFyIEwgPSB7fTthLmQub3B0aW9ucyA9IHsgaW5pdDogZnVuY3Rpb24gaW5pdChiKSB7XG4gICAgICAgICAgaWYgKFwic2VsZWN0XCIgIT09IGEuYS5BKGIpKSB0aHJvdyBFcnJvcihcIm9wdGlvbnMgYmluZGluZyBhcHBsaWVzIG9ubHkgdG8gU0VMRUNUIGVsZW1lbnRzXCIpO2ZvciAoOyAwIDwgYi5sZW5ndGg7KSB7XG4gICAgICAgICAgICBiLnJlbW92ZSgwKTtcbiAgICAgICAgICB9cmV0dXJuIHsgY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6ICEwIH07XG4gICAgICAgIH0sIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGIsIGMsIGQpIHtcbiAgICAgICAgICBmdW5jdGlvbiBlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGEuYS5NYShiLm9wdGlvbnMsIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnNlbGVjdGVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfWZ1bmN0aW9uIGYoYSwgYiwgYykge1xuICAgICAgICAgICAgdmFyIGQgPSB0eXBlb2YgYiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGIpO3JldHVybiBcImZ1bmN0aW9uXCIgPT0gZCA/IGIoYSkgOiBcInN0cmluZ1wiID09IGQgPyBhW2JdIDogYztcbiAgICAgICAgICB9ZnVuY3Rpb24gZyhjLCBlKSB7XG4gICAgICAgICAgICBpZiAoQSAmJiBrKSBhLmouamEoYiwgYS5hLmMoZC5nZXQoXCJ2YWx1ZVwiKSksICEwKTtlbHNlIGlmIChwLmxlbmd0aCkge1xuICAgICAgICAgICAgICB2YXIgZiA9IDAgPD0gYS5hLm8ocCwgYS5qLnUoZVswXSkpO2EuYS53YyhlWzBdLCBmKTtBICYmICFmICYmIGEubC53KGEuYS5GYSwgbnVsbCwgW2IsIFwiY2hhbmdlXCJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9dmFyIGggPSBiLm11bHRpcGxlLFxuICAgICAgICAgICAgICBsID0gMCAhPSBiLmxlbmd0aCAmJiBoID8gYi5zY3JvbGxUb3AgOiBudWxsLFxuICAgICAgICAgICAgICBtID0gYS5hLmMoYygpKSxcbiAgICAgICAgICAgICAgayA9IGQuZ2V0KFwidmFsdWVBbGxvd1Vuc2V0XCIpICYmIGQuaGFzKFwidmFsdWVcIiksXG4gICAgICAgICAgICAgIHIgPSBkLmdldChcIm9wdGlvbnNJbmNsdWRlRGVzdHJveWVkXCIpO2MgPSB7fTt2YXIgcSxcbiAgICAgICAgICAgICAgcCA9IFtdO2sgfHwgKGggPyBwID0gYS5hLmliKGUoKSwgYS5qLnUpIDogMCA8PSBiLnNlbGVjdGVkSW5kZXggJiYgcC5wdXNoKGEuai51KGIub3B0aW9uc1tiLnNlbGVjdGVkSW5kZXhdKSkpO20gJiYgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIG0ubGVuZ3RoICYmIChtID0gW21dKSwgcSA9IGEuYS5NYShtLCBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgcmV0dXJuIHIgfHwgYiA9PT0gbiB8fCBudWxsID09PSBiIHx8ICFhLmEuYyhiLl9kZXN0cm95KTtcbiAgICAgICAgICB9KSwgZC5oYXMoXCJvcHRpb25zQ2FwdGlvblwiKSAmJiAobSA9IGEuYS5jKGQuZ2V0KFwib3B0aW9uc0NhcHRpb25cIikpLCBudWxsICE9PSBtICYmIG0gIT09IG4gJiYgcS51bnNoaWZ0KEwpKSk7dmFyIEEgPSAhMTtjLmJlZm9yZVJlbW92ZSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICBiLnJlbW92ZUNoaWxkKGEpO1xuICAgICAgICAgIH07bSA9IGc7ZC5oYXMoXCJvcHRpb25zQWZ0ZXJSZW5kZXJcIikgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBkLmdldChcIm9wdGlvbnNBZnRlclJlbmRlclwiKSAmJiAobSA9IGZ1bmN0aW9uIG0oYiwgYykge1xuICAgICAgICAgICAgZygwLCBjKTtcbiAgICAgICAgICAgIGEubC53KGQuZ2V0KFwib3B0aW9uc0FmdGVyUmVuZGVyXCIpLCBudWxsLCBbY1swXSwgYiAhPT0gTCA/IGIgOiBuXSk7XG4gICAgICAgICAgfSk7YS5hLkRiKGIsIHEsIGZ1bmN0aW9uIChjLCBlLCBnKSB7XG4gICAgICAgICAgICBnLmxlbmd0aCAmJiAocCA9ICFrICYmIGdbMF0uc2VsZWN0ZWQgPyBbYS5qLnUoZ1swXSldIDogW10sIEEgPSAhMCk7ZSA9IGIub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO2MgPT09IEwgPyAoYS5hLmJiKGUsIGQuZ2V0KFwib3B0aW9uc0NhcHRpb25cIikpLCBhLmouamEoZSwgbikpIDogKGcgPSBmKGMsIGQuZ2V0KFwib3B0aW9uc1ZhbHVlXCIpLCBjKSwgYS5qLmphKGUsIGEuYS5jKGcpKSwgYyA9IGYoYywgZC5nZXQoXCJvcHRpb25zVGV4dFwiKSwgZyksIGEuYS5iYihlLCBjKSk7cmV0dXJuIFtlXTtcbiAgICAgICAgICB9LCBjLCBtKTthLmwudyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBrID8gYS5qLmphKGIsIGEuYS5jKGQuZ2V0KFwidmFsdWVcIikpLCAhMCkgOiAoaCA/IHAubGVuZ3RoICYmIGUoKS5sZW5ndGggPCBwLmxlbmd0aCA6IHAubGVuZ3RoICYmIDAgPD0gYi5zZWxlY3RlZEluZGV4ID8gYS5qLnUoYi5vcHRpb25zW2Iuc2VsZWN0ZWRJbmRleF0pICE9PSBwWzBdIDogcC5sZW5ndGggfHwgMCA8PSBiLnNlbGVjdGVkSW5kZXgpICYmIGEuYS5GYShiLCBcImNoYW5nZVwiKTtcbiAgICAgICAgICB9KTthLmEuU2MoYik7bCAmJiAyMCA8IE1hdGguYWJzKGwgLSBiLnNjcm9sbFRvcCkgJiYgKGIuc2Nyb2xsVG9wID0gbCk7XG4gICAgICAgIH0gfTthLmQub3B0aW9ucy56YiA9IGEuYS5lLkooKTthLmQuc2VsZWN0ZWRPcHRpb25zID0geyBhZnRlcjogW1wib3B0aW9uc1wiLCBcImZvcmVhY2hcIl0sIGluaXQ6IGZ1bmN0aW9uIGluaXQoYiwgYywgZCkge1xuICAgICAgICAgIGEuYS5xKGIsIFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlID0gYygpLFxuICAgICAgICAgICAgICAgIGYgPSBbXTthLmEucihiLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwib3B0aW9uXCIpLCBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgICBiLnNlbGVjdGVkICYmIGYucHVzaChhLmoudShiKSk7XG4gICAgICAgICAgICB9KTthLmguR2EoZSwgZCwgXCJzZWxlY3RlZE9wdGlvbnNcIiwgZik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGIsIGMpIHtcbiAgICAgICAgICBpZiAoXCJzZWxlY3RcIiAhPSBhLmEuQShiKSkgdGhyb3cgRXJyb3IoXCJ2YWx1ZXMgYmluZGluZyBhcHBsaWVzIG9ubHkgdG8gU0VMRUNUIGVsZW1lbnRzXCIpO3ZhciBkID0gYS5hLmMoYygpKSxcbiAgICAgICAgICAgICAgZSA9IGIuc2Nyb2xsVG9wO1xuICAgICAgICAgIGQgJiYgXCJudW1iZXJcIiA9PSB0eXBlb2YgZC5sZW5ndGggJiYgYS5hLnIoYi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIm9wdGlvblwiKSwgZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgIHZhciBjID0gMCA8PSBhLmEubyhkLCBhLmoudShiKSk7Yi5zZWxlY3RlZCAhPSBjICYmIGEuYS53YyhiLCBjKTtcbiAgICAgICAgICB9KTtiLnNjcm9sbFRvcCA9IGU7XG4gICAgICAgIH0gfTthLmguZ2Euc2VsZWN0ZWRPcHRpb25zID0gITA7YS5kLnN0eWxlID0geyB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShiLCBjKSB7XG4gICAgICAgICAgdmFyIGQgPSBhLmEuYyhjKCkgfHwge30pO2EuYS5EKGQsIGZ1bmN0aW9uIChjLCBkKSB7XG4gICAgICAgICAgICBkID0gYS5hLmMoZCk7aWYgKG51bGwgPT09IGQgfHwgZCA9PT0gbiB8fCAhMSA9PT0gZCkgZCA9IFwiXCI7Yi5zdHlsZVtjXSA9IGQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gfTthLmQuc3VibWl0ID0geyBpbml0OiBmdW5jdGlvbiBpbml0KGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBjKCkpIHRocm93IEVycm9yKFwiVGhlIHZhbHVlIGZvciBhIHN1Ym1pdCBiaW5kaW5nIG11c3QgYmUgYSBmdW5jdGlvblwiKTthLmEucShiLCBcInN1Ym1pdFwiLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgdmFyIGQsXG4gICAgICAgICAgICAgICAgZSA9IGMoKTt0cnkge1xuICAgICAgICAgICAgICBkID0gZS5jYWxsKGYuJGRhdGEsIGIpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgITAgIT09IGQgJiYgKGEucHJldmVudERlZmF1bHQgPyBhLnByZXZlbnREZWZhdWx0KCkgOiBhLnJldHVyblZhbHVlID0gITEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IH07YS5kLnRleHQgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6ICEwIH07XG4gICAgICAgIH0sIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGIsIGMpIHtcbiAgICAgICAgICBhLmEuYmIoYiwgYygpKTtcbiAgICAgICAgfSB9O2EuZi5hYS50ZXh0ID0gITA7KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHggJiYgeC5uYXZpZ2F0b3IpIHZhciBiID0gZnVuY3Rpb24gYihhKSB7XG4gICAgICAgICAgaWYgKGEpIHJldHVybiBwYXJzZUZsb2F0KGFbMV0pO1xuICAgICAgICB9LFxuICAgICAgICAgICAgYyA9IHgub3BlcmEgJiYgeC5vcGVyYS52ZXJzaW9uICYmIHBhcnNlSW50KHgub3BlcmEudmVyc2lvbigpKSxcbiAgICAgICAgICAgIGQgPSB4Lm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICBlID0gYihkLm1hdGNoKC9eKD86KD8hY2hyb21lKS4pKnZlcnNpb25cXC8oW14gXSopIHNhZmFyaS9pKSksXG4gICAgICAgICAgICBmID0gYihkLm1hdGNoKC9GaXJlZm94XFwvKFteIF0qKS8pKTtpZiAoMTAgPiBhLmEuQykgdmFyIGcgPSBhLmEuZS5KKCksXG4gICAgICAgICAgICBoID0gYS5hLmUuSigpLFxuICAgICAgICAgICAgbCA9IGZ1bmN0aW9uIGwoYikge1xuICAgICAgICAgIHZhciBjID0gdGhpcy5hY3RpdmVFbGVtZW50OyhjID0gYyAmJiBhLmEuZS5nZXQoYywgaCkpICYmIGMoYik7XG4gICAgICAgIH0sXG4gICAgICAgICAgICBtID0gZnVuY3Rpb24gbShiLCBjKSB7XG4gICAgICAgICAgdmFyIGQgPSBiLm93bmVyRG9jdW1lbnQ7YS5hLmUuZ2V0KGQsIGcpIHx8IChhLmEuZS5zZXQoZCwgZywgITApLCBhLmEucShkLCBcInNlbGVjdGlvbmNoYW5nZVwiLCBsKSk7YS5hLmUuc2V0KGIsIGgsIGMpO1xuICAgICAgICB9O2EuZC50ZXh0SW5wdXQgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQoYiwgZCwgZykge1xuICAgICAgICAgICAgZnVuY3Rpb24gbChjLCBkKSB7XG4gICAgICAgICAgICAgIGEuYS5xKGIsIGMsIGQpO1xuICAgICAgICAgICAgfWZ1bmN0aW9uIGgoKSB7XG4gICAgICAgICAgICAgIHZhciBjID0gYS5hLmMoZCgpKTtpZiAobnVsbCA9PT0gYyB8fCBjID09PSBuKSBjID0gXCJcIjt1ICE9PSBuICYmIGMgPT09IHUgPyBhLmEuc2V0VGltZW91dChoLCA0KSA6IGIudmFsdWUgIT09IGMgJiYgKHMgPSBjLCBiLnZhbHVlID0gYyk7XG4gICAgICAgICAgICB9ZnVuY3Rpb24geSgpIHtcbiAgICAgICAgICAgICAgdCB8fCAodSA9IGIudmFsdWUsIHQgPSBhLmEuc2V0VGltZW91dCh2LCA0KSk7XG4gICAgICAgICAgICB9ZnVuY3Rpb24gdigpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHQpO3UgPSB0ID0gbjt2YXIgYyA9IGIudmFsdWU7cyAhPT0gYyAmJiAocyA9IGMsIGEuaC5HYShkKCksIGcsIFwidGV4dElucHV0XCIsIGMpKTtcbiAgICAgICAgICAgIH12YXIgcyA9IGIudmFsdWUsXG4gICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICB1LFxuICAgICAgICAgICAgICAgIHggPSA5ID09IGEuYS5DID8geSA6IHY7MTAgPiBhLmEuQyA/IChsKFwicHJvcGVydHljaGFuZ2VcIiwgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgXCJ2YWx1ZVwiID09PSBhLnByb3BlcnR5TmFtZSAmJiB4KGEpO1xuICAgICAgICAgICAgfSksIDggPT0gYS5hLkMgJiYgKGwoXCJrZXl1cFwiLCB2KSwgbChcImtleWRvd25cIiwgdikpLCA4IDw9IGEuYS5DICYmIChtKGIsIHgpLCBsKFwiZHJhZ2VuZFwiLCB5KSkpIDogKGwoXCJpbnB1dFwiLCB2KSwgNSA+IGUgJiYgXCJ0ZXh0YXJlYVwiID09PSBhLmEuQShiKSA/IChsKFwia2V5ZG93blwiLCB5KSwgbChcInBhc3RlXCIsIHkpLCBsKFwiY3V0XCIsIHkpKSA6IDExID4gYyA/IGwoXCJrZXlkb3duXCIsIHkpIDogNCA+IGYgJiYgKGwoXCJET01BdXRvQ29tcGxldGVcIiwgdiksIGwoXCJkcmFnZHJvcFwiLCB2KSwgbChcImRyb3BcIiwgdikpKTtsKFwiY2hhbmdlXCIsIHYpO2EubShoLCBudWxsLCB7IGk6IGIgfSk7XG4gICAgICAgICAgfSB9O2EuaC5nYS50ZXh0SW5wdXQgPSAhMDthLmQudGV4dGlucHV0ID0geyBwcmVwcm9jZXNzOiBmdW5jdGlvbiBwcmVwcm9jZXNzKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGMoXCJ0ZXh0SW5wdXRcIiwgYSk7XG4gICAgICAgICAgfSB9O1xuICAgICAgfSkoKTthLmQudW5pcXVlTmFtZSA9IHsgaW5pdDogZnVuY3Rpb24gaW5pdChiLCBjKSB7XG4gICAgICAgICAgaWYgKGMoKSkge1xuICAgICAgICAgICAgdmFyIGQgPSBcImtvX3VuaXF1ZV9cIiArICsrYS5kLnVuaXF1ZU5hbWUuTmM7YS5hLnZjKGIsIGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB9O2EuZC51bmlxdWVOYW1lLk5jID0gMDthLmQudmFsdWUgPSB7IGFmdGVyOiBbXCJvcHRpb25zXCIsIFwiZm9yZWFjaFwiXSwgaW5pdDogZnVuY3Rpb24gaW5pdChiLCBjLCBkKSB7XG4gICAgICAgICAgaWYgKFwiaW5wdXRcIiAhPSBiLnRhZ05hbWUudG9Mb3dlckNhc2UoKSB8fCBcImNoZWNrYm94XCIgIT0gYi50eXBlICYmIFwicmFkaW9cIiAhPSBiLnR5cGUpIHtcbiAgICAgICAgICAgIHZhciBlID0gW1wiY2hhbmdlXCJdLFxuICAgICAgICAgICAgICAgIGYgPSBkLmdldChcInZhbHVlVXBkYXRlXCIpLFxuICAgICAgICAgICAgICAgIGcgPSAhMSxcbiAgICAgICAgICAgICAgICBoID0gbnVsbDtmICYmIChcInN0cmluZ1wiID09IHR5cGVvZiBmICYmIChmID0gW2ZdKSwgYS5hLnRhKGUsIGYpLCBlID0gYS5hLldiKGUpKTt2YXIgbCA9IGZ1bmN0aW9uIGwoKSB7XG4gICAgICAgICAgICAgIGggPSBudWxsO2cgPSAhMTt2YXIgZSA9IGMoKSxcbiAgICAgICAgICAgICAgICAgIGYgPSBhLmoudShiKTthLmguR2EoZSwgZCwgXCJ2YWx1ZVwiLCBmKTtcbiAgICAgICAgICAgIH07IWEuYS5DIHx8IFwiaW5wdXRcIiAhPSBiLnRhZ05hbWUudG9Mb3dlckNhc2UoKSB8fCBcInRleHRcIiAhPSBiLnR5cGUgfHwgXCJvZmZcIiA9PSBiLmF1dG9jb21wbGV0ZSB8fCBiLmZvcm0gJiYgXCJvZmZcIiA9PSBiLmZvcm0uYXV0b2NvbXBsZXRlIHx8IC0xICE9IGEuYS5vKGUsIFwicHJvcGVydHljaGFuZ2VcIikgfHwgKGEuYS5xKGIsIFwicHJvcGVydHljaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBnID0gITA7XG4gICAgICAgICAgICB9KSwgYS5hLnEoYiwgXCJmb2N1c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGcgPSAhMTtcbiAgICAgICAgICAgIH0pLCBhLmEucShiLCBcImJsdXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBnICYmIGwoKTtcbiAgICAgICAgICAgIH0pKTthLmEucihlLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICB2YXIgZCA9IGw7YS5hLnNkKGMsIFwiYWZ0ZXJcIikgJiYgKGQgPSBmdW5jdGlvbiBkKCkge1xuICAgICAgICAgICAgICAgIGggPSBhLmoudShiKTthLmEuc2V0VGltZW91dChsLCAwKTtcbiAgICAgICAgICAgICAgfSwgYyA9IGMuc3Vic3RyaW5nKDUpKTthLmEucShiLCBjLCBkKTtcbiAgICAgICAgICAgIH0pO3ZhciBtID0gZnVuY3Rpb24gbSgpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSBhLmEuYyhjKCkpLFxuICAgICAgICAgICAgICAgICAgZiA9IGEuai51KGIpO2lmIChudWxsICE9PSBoICYmIGUgPT09IGgpIGEuYS5zZXRUaW1lb3V0KG0sIDApO2Vsc2UgaWYgKGUgIT09IGYpIGlmIChcInNlbGVjdFwiID09PSBhLmEuQShiKSkge1xuICAgICAgICAgICAgICAgIHZhciBnID0gZC5nZXQoXCJ2YWx1ZUFsbG93VW5zZXRcIiksXG4gICAgICAgICAgICAgICAgICAgIGYgPSBmdW5jdGlvbiBmKCkge1xuICAgICAgICAgICAgICAgICAgYS5qLmphKGIsIGUsIGcpO1xuICAgICAgICAgICAgICAgIH07ZigpO2cgfHwgZSA9PT0gYS5qLnUoYikgPyBhLmEuc2V0VGltZW91dChmLCAwKSA6IGEubC53KGEuYS5GYSwgbnVsbCwgW2IsIFwiY2hhbmdlXCJdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGEuai5qYShiLCBlKTtcbiAgICAgICAgICAgIH07YS5tKG0sIG51bGwsIHsgaTogYiB9KTtcbiAgICAgICAgICB9IGVsc2UgYS5MYShiLCB7IGNoZWNrZWRWYWx1ZTogYyB9KTtcbiAgICAgICAgfSwgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSB9O2EuaC5nYS52YWx1ZSA9ICEwO2EuZC52aXNpYmxlID0geyB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShiLCBjKSB7XG4gICAgICAgICAgdmFyIGQgPSBhLmEuYyhjKCkpLFxuICAgICAgICAgICAgICBlID0gXCJub25lXCIgIT0gYi5zdHlsZS5kaXNwbGF5O2QgJiYgIWUgPyBiLnN0eWxlLmRpc3BsYXkgPSBcIlwiIDogIWQgJiYgZSAmJiAoYi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpO1xuICAgICAgICB9IH07KGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIGEuZFtiXSA9IHsgaW5pdDogZnVuY3Rpb24gaW5pdChjLCBkLCBlLCBmLCBnKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5kLmV2ZW50LmluaXQuY2FsbCh0aGlzLCBjLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBhID0ge307YVtiXSA9IGQoKTtyZXR1cm4gYTtcbiAgICAgICAgICAgIH0sIGUsIGYsIGcpO1xuICAgICAgICAgIH0gfTtcbiAgICAgIH0pKFwiY2xpY2tcIik7YS5QID0gZnVuY3Rpb24gKCkge307YS5QLnByb3RvdHlwZS5yZW5kZXJUZW1wbGF0ZVNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJPdmVycmlkZSByZW5kZXJUZW1wbGF0ZVNvdXJjZVwiKTtcbiAgICAgIH07YS5QLnByb3RvdHlwZS5jcmVhdGVKYXZhU2NyaXB0RXZhbHVhdG9yQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiT3ZlcnJpZGUgY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrXCIpO1xuICAgICAgfTthLlAucHJvdG90eXBlLm1ha2VUZW1wbGF0ZVNvdXJjZSA9IGZ1bmN0aW9uIChiLCBjKSB7XG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBiKSB7XG4gICAgICAgICAgYyA9IGMgfHwgdDt2YXIgZCA9IGMuZ2V0RWxlbWVudEJ5SWQoYik7aWYgKCFkKSB0aHJvdyBFcnJvcihcIkNhbm5vdCBmaW5kIHRlbXBsYXRlIHdpdGggSUQgXCIgKyBiKTtyZXR1cm4gbmV3IGEudi5uKGQpO1xuICAgICAgICB9aWYgKDEgPT0gYi5ub2RlVHlwZSB8fCA4ID09IGIubm9kZVR5cGUpIHJldHVybiBuZXcgYS52LnNhKGIpO3Rocm93IEVycm9yKFwiVW5rbm93biB0ZW1wbGF0ZSB0eXBlOiBcIiArIGIpO1xuICAgICAgfTthLlAucHJvdG90eXBlLnJlbmRlclRlbXBsYXRlID0gZnVuY3Rpb24gKGEsIGMsIGQsIGUpIHtcbiAgICAgICAgYSA9IHRoaXMubWFrZVRlbXBsYXRlU291cmNlKGEsIGUpO3JldHVybiB0aGlzLnJlbmRlclRlbXBsYXRlU291cmNlKGEsIGMsIGQsIGUpO1xuICAgICAgfTthLlAucHJvdG90eXBlLmlzVGVtcGxhdGVSZXdyaXR0ZW4gPSBmdW5jdGlvbiAoYSwgYykge1xuICAgICAgICByZXR1cm4gITEgPT09IHRoaXMuYWxsb3dUZW1wbGF0ZVJld3JpdGluZyA/ICEwIDogdGhpcy5tYWtlVGVtcGxhdGVTb3VyY2UoYSwgYykuZGF0YShcImlzUmV3cml0dGVuXCIpO1xuICAgICAgfTthLlAucHJvdG90eXBlLnJld3JpdGVUZW1wbGF0ZSA9IGZ1bmN0aW9uIChhLCBjLCBkKSB7XG4gICAgICAgIGEgPSB0aGlzLm1ha2VUZW1wbGF0ZVNvdXJjZShhLCBkKTtjID0gYyhhLnRleHQoKSk7YS50ZXh0KGMpO2EuZGF0YShcImlzUmV3cml0dGVuXCIsICEwKTtcbiAgICAgIH07YS5iKFwidGVtcGxhdGVFbmdpbmVcIiwgYS5QKTthLkliID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBiKGIsIGMsIGQsIGgpIHtcbiAgICAgICAgICBiID0gYS5oLkFiKGIpO2ZvciAodmFyIGwgPSBhLmgudmEsIG0gPSAwOyBtIDwgYi5sZW5ndGg7IG0rKykge1xuICAgICAgICAgICAgdmFyIGsgPSBiW21dLmtleTtpZiAobC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICB2YXIgciA9IGxba107aWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoayA9IHIoYlttXS52YWx1ZSkpIHRocm93IEVycm9yKGspO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFyKSB0aHJvdyBFcnJvcihcIlRoaXMgdGVtcGxhdGUgZW5naW5lIGRvZXMgbm90IHN1cHBvcnQgdGhlICdcIiArIGsgKyBcIicgYmluZGluZyB3aXRoaW4gaXRzIHRlbXBsYXRlc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9ZCA9IFwia28uX190cl9hbWJ0bnMoZnVuY3Rpb24oJGNvbnRleHQsJGVsZW1lbnQpe3JldHVybihmdW5jdGlvbigpe3JldHVybnsgXCIgKyBhLmguWGEoYiwgeyB2YWx1ZUFjY2Vzc29yczogITAgfSkgKyBcIiB9IH0pKCl9LCdcIiArIGQudG9Mb3dlckNhc2UoKSArIFwiJylcIjtyZXR1cm4gaC5jcmVhdGVKYXZhU2NyaXB0RXZhbHVhdG9yQmxvY2soZCkgKyBjO1xuICAgICAgICB9dmFyIGMgPSAvKDwoW2Etel0rXFxkKikoPzpcXHMrKD8hZGF0YS1iaW5kXFxzKj1cXHMqKVthLXowLTlcXC1dKyg/Oj0oPzpcXFwiW15cXFwiXSpcXFwifFxcJ1teXFwnXSpcXCd8W14+XSopKT8pKlxccyspZGF0YS1iaW5kXFxzKj1cXHMqKFtcIiddKShbXFxzXFxTXSo/KVxcMy9naSxcbiAgICAgICAgICAgIGQgPSAvXFx4M2MhLS1cXHMqa29cXGJcXHMqKFtcXHNcXFNdKj8pXFxzKi0tXFx4M2UvZztyZXR1cm4geyBUYzogZnVuY3Rpb24gVGMoYiwgYywgZCkge1xuICAgICAgICAgICAgYy5pc1RlbXBsYXRlUmV3cml0dGVuKGIsIGQpIHx8IGMucmV3cml0ZVRlbXBsYXRlKGIsIGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLkliLmpkKGIsIGMpO1xuICAgICAgICAgICAgfSwgZCk7XG4gICAgICAgICAgfSwgamQ6IGZ1bmN0aW9uIGpkKGEsIGYpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnJlcGxhY2UoYywgZnVuY3Rpb24gKGEsIGMsIGQsIGUsIGspIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGIoaywgYywgZCwgZik7XG4gICAgICAgICAgICB9KS5yZXBsYWNlKGQsIGZ1bmN0aW9uIChhLCBjKSB7XG4gICAgICAgICAgICAgIHJldHVybiBiKGMsIFwiXFx4M2MhLS0ga28gLS1cXHgzZVwiLCBcIiNjb21tZW50XCIsIGYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgSmM6IGZ1bmN0aW9uIEpjKGIsIGMpIHtcbiAgICAgICAgICAgIHJldHVybiBhLk4ueWIoZnVuY3Rpb24gKGQsIGgpIHtcbiAgICAgICAgICAgICAgdmFyIGwgPSBkLm5leHRTaWJsaW5nO2wgJiYgbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBjICYmIGEuTGEobCwgYiwgaCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IH07XG4gICAgICB9KCk7YS5iKFwiX190cl9hbWJ0bnNcIiwgYS5JYi5KYyk7KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYS52ID0ge307YS52Lm4gPSBmdW5jdGlvbiAoYikge1xuICAgICAgICAgIGlmICh0aGlzLm4gPSBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGEuYS5BKGIpO3RoaXMuZWIgPSBcInNjcmlwdFwiID09PSBjID8gMSA6IFwidGV4dGFyZWFcIiA9PT0gYyA/IDIgOiBcInRlbXBsYXRlXCIgPT0gYyAmJiBiLmNvbnRlbnQgJiYgMTEgPT09IGIuY29udGVudC5ub2RlVHlwZSA/IDMgOiA0O1xuICAgICAgICAgIH1cbiAgICAgICAgfTthLnYubi5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgYiA9IDEgPT09IHRoaXMuZWIgPyBcInRleHRcIiA6IDIgPT09IHRoaXMuZWIgPyBcInZhbHVlXCIgOiBcImlubmVySFRNTFwiO2lmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLm5bYl07dmFyIGMgPSBhcmd1bWVudHNbMF07XCJpbm5lckhUTUxcIiA9PT0gYiA/IGEuYS5FYih0aGlzLm4sIGMpIDogdGhpcy5uW2JdID0gYztcbiAgICAgICAgfTt2YXIgYiA9IGEuYS5lLkooKSArIFwiX1wiO2Eudi5uLnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICBpZiAoMSA9PT0gYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGEuYS5lLmdldCh0aGlzLm4sIGIgKyBjKTthLmEuZS5zZXQodGhpcy5uLCBiICsgYywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgfTt2YXIgYyA9IGEuYS5lLkooKTthLnYubi5wcm90b3R5cGUubm9kZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGIgPSB0aGlzLm47aWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIChhLmEuZS5nZXQoYiwgYykgfHwge30pLm1iIHx8ICgzID09PSB0aGlzLmViID8gYi5jb250ZW50IDogNCA9PT0gdGhpcy5lYiA/IGIgOiBuKTthLmEuZS5zZXQoYiwgYywgeyBtYjogYXJndW1lbnRzWzBdIH0pO1xuICAgICAgICB9O2Eudi5zYSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgdGhpcy5uID0gYTtcbiAgICAgICAgfTthLnYuc2EucHJvdG90eXBlID0gbmV3IGEudi5uKCk7YS52LnNhLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBiID0gYS5hLmUuZ2V0KHRoaXMubiwgYykgfHwge307Yi5KYiA9PT0gbiAmJiBiLm1iICYmIChiLkpiID0gYi5tYi5pbm5lckhUTUwpO3JldHVybiBiLkpiO1xuICAgICAgICAgIH1hLmEuZS5zZXQodGhpcy5uLCBjLCB7IEpiOiBhcmd1bWVudHNbMF0gfSk7XG4gICAgICAgIH07YS5iKFwidGVtcGxhdGVTb3VyY2VzXCIsIGEudik7YS5iKFwidGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnRcIiwgYS52Lm4pO2EuYihcInRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZVwiLCBhLnYuc2EpO1xuICAgICAgfSkoKTsoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBiKGIsIGMsIGQpIHtcbiAgICAgICAgICB2YXIgZTtmb3IgKGMgPSBhLmYubmV4dFNpYmxpbmcoYyk7IGIgJiYgKGUgPSBiKSAhPT0gYzspIHtcbiAgICAgICAgICAgIGIgPSBhLmYubmV4dFNpYmxpbmcoZSksIGQoZSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICB9ZnVuY3Rpb24gYyhjLCBkKSB7XG4gICAgICAgICAgaWYgKGMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZSA9IGNbMF0sXG4gICAgICAgICAgICAgICAgZiA9IGNbYy5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgICAgICBnID0gZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgIGggPSBhLlMuaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgbiA9IGgucHJlcHJvY2Vzc05vZGU7aWYgKG4pIHtcbiAgICAgICAgICAgICAgYihlLCBmLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgIHZhciBjID0gYS5wcmV2aW91c1NpYmxpbmcsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBuLmNhbGwoaCwgYSk7ZCAmJiAoYSA9PT0gZSAmJiAoZSA9IGRbMF0gfHwgYiksIGEgPT09IGYgJiYgKGYgPSBkW2QubGVuZ3RoIC0gMV0gfHwgYykpO1xuICAgICAgICAgICAgICB9KTtjLmxlbmd0aCA9IDA7aWYgKCFlKSByZXR1cm47ZSA9PT0gZiA/IGMucHVzaChlKSA6IChjLnB1c2goZSwgZiksIGEuYS5CYShjLCBnKSk7XG4gICAgICAgICAgICB9YihlLCBmLCBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgICAxICE9PSBiLm5vZGVUeXBlICYmIDggIT09IGIubm9kZVR5cGUgfHwgYS5VYihkLCBiKTtcbiAgICAgICAgICAgIH0pO2IoZSwgZiwgZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgICAgMSAhPT0gYi5ub2RlVHlwZSAmJiA4ICE9PSBiLm5vZGVUeXBlIHx8IGEuTi5DYyhiLCBbZF0pO1xuICAgICAgICAgICAgfSk7YS5hLkJhKGMsIGcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfWZ1bmN0aW9uIGQoYSkge1xuICAgICAgICAgIHJldHVybiBhLm5vZGVUeXBlID8gYSA6IDAgPCBhLmxlbmd0aCA/IGFbMF0gOiBudWxsO1xuICAgICAgICB9ZnVuY3Rpb24gZShiLCBlLCBmLCBoLCBxKSB7XG4gICAgICAgICAgcSA9IHEgfHwge307dmFyIHAgPSAoYiAmJiBkKGIpIHx8IGYgfHwge30pLm93bmVyRG9jdW1lbnQsXG4gICAgICAgICAgICAgIG4gPSBxLnRlbXBsYXRlRW5naW5lIHx8IGc7XG4gICAgICAgICAgYS5JYi5UYyhmLCBuLCBwKTtmID0gbi5yZW5kZXJUZW1wbGF0ZShmLCBoLCBxLCBwKTtpZiAoXCJudW1iZXJcIiAhPSB0eXBlb2YgZi5sZW5ndGggfHwgMCA8IGYubGVuZ3RoICYmIFwibnVtYmVyXCIgIT0gdHlwZW9mIGZbMF0ubm9kZVR5cGUpIHRocm93IEVycm9yKFwiVGVtcGxhdGUgZW5naW5lIG11c3QgcmV0dXJuIGFuIGFycmF5IG9mIERPTSBub2Rlc1wiKTtwID0gITE7c3dpdGNoIChlKSB7Y2FzZSBcInJlcGxhY2VDaGlsZHJlblwiOlxuICAgICAgICAgICAgICBhLmYuZmEoYiwgZik7cCA9ICEwO2JyZWFrO2Nhc2UgXCJyZXBsYWNlTm9kZVwiOlxuICAgICAgICAgICAgICBhLmEudWMoYiwgZik7cCA9ICEwO2JyZWFrO2Nhc2UgXCJpZ25vcmVUYXJnZXROb2RlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO2RlZmF1bHQ6XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKFwiVW5rbm93biByZW5kZXJNb2RlOiBcIiArIGUpO31wICYmIChjKGYsIGgpLCBxLmFmdGVyUmVuZGVyICYmIGEubC53KHEuYWZ0ZXJSZW5kZXIsIG51bGwsIFtmLCBoLiRkYXRhXSkpO3JldHVybiBmO1xuICAgICAgICB9ZnVuY3Rpb24gZihiLCBjLCBkKSB7XG4gICAgICAgICAgcmV0dXJuIGEuSShiKSA/IGIoKSA6IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGIgPyBiKGMsIGQpIDogYjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZzthLkZiID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICBpZiAoYiAhPSBuICYmICEoYiBpbnN0YW5jZW9mIGEuUCkpIHRocm93IEVycm9yKFwidGVtcGxhdGVFbmdpbmUgbXVzdCBpbmhlcml0IGZyb20ga28udGVtcGxhdGVFbmdpbmVcIik7ZyA9IGI7XG4gICAgICAgIH07YS5DYiA9IGZ1bmN0aW9uIChiLCBjLCBrLCBoLCBxKSB7XG4gICAgICAgICAgayA9IGsgfHwge307aWYgKChrLnRlbXBsYXRlRW5naW5lIHx8IGcpID09IG4pIHRocm93IEVycm9yKFwiU2V0IGEgdGVtcGxhdGUgZW5naW5lIGJlZm9yZSBjYWxsaW5nIHJlbmRlclRlbXBsYXRlXCIpO3EgPSBxIHx8IFwicmVwbGFjZUNoaWxkcmVuXCI7aWYgKGgpIHtcbiAgICAgICAgICAgIHZhciBwID0gZChoKTtyZXR1cm4gYS5CKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIGcgPSBjICYmIGMgaW5zdGFuY2VvZiBhLlIgPyBjIDogbmV3IGEuUihjLCBudWxsLCBudWxsLCBudWxsLCB7IGV4cG9ydERlcGVuZGVuY2llczogITAgfSksXG4gICAgICAgICAgICAgICAgICBuID0gZihiLCBnLiRkYXRhLCBnKSxcbiAgICAgICAgICAgICAgICAgIGcgPSBlKGgsIHEsIG4sIGcsIGspO1wicmVwbGFjZU5vZGVcIiA9PSBxICYmIChoID0gZywgcCA9IGQoaCkpO1xuICAgICAgICAgICAgfSwgbnVsbCwgeyB5YTogZnVuY3Rpb24geWEoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFwIHx8ICFhLmEucWIocCk7XG4gICAgICAgICAgICAgIH0sIGk6IHAgJiYgXCJyZXBsYWNlTm9kZVwiID09IHEgPyBwLnBhcmVudE5vZGUgOiBwIH0pO1xuICAgICAgICAgIH1yZXR1cm4gYS5OLnliKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBhLkNiKGIsIGMsIGssIGQsIFwicmVwbGFjZU5vZGVcIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07YS5wZCA9IGZ1bmN0aW9uIChiLCBkLCBnLCBoLCBxKSB7XG4gICAgICAgICAgZnVuY3Rpb24gcChhLCBiKSB7XG4gICAgICAgICAgICBjKGIsIHQpO2cuYWZ0ZXJSZW5kZXIgJiYgZy5hZnRlclJlbmRlcihiLCBhKTt0ID0gbnVsbDtcbiAgICAgICAgICB9ZnVuY3Rpb24gcyhhLCBjKSB7XG4gICAgICAgICAgICB0ID0gcS5jcmVhdGVDaGlsZENvbnRleHQoYSwgZy5hcywgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgYS4kaW5kZXggPSBjO1xuICAgICAgICAgICAgfSk7dmFyIGQgPSBmKGIsIGEsIHQpO3JldHVybiBlKG51bGwsIFwiaWdub3JlVGFyZ2V0Tm9kZVwiLCBkLCB0LCBnKTtcbiAgICAgICAgICB9dmFyIHQ7cmV0dXJuIGEuQihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYiA9IGEuYS5jKGQpIHx8IFtdO1widW5kZWZpbmVkXCIgPT0gdHlwZW9mIGIubGVuZ3RoICYmIChiID0gW2JdKTtiID0gYS5hLk1hKGIsIGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBnLmluY2x1ZGVEZXN0cm95ZWQgfHwgYiA9PT0gbiB8fCBudWxsID09PSBiIHx8ICFhLmEuYyhiLl9kZXN0cm95KTtcbiAgICAgICAgICAgIH0pO2EubC53KGEuYS5EYiwgbnVsbCwgW2gsIGIsIHMsIGcsIHBdKTtcbiAgICAgICAgICB9LCBudWxsLCB7IGk6IGggfSk7XG4gICAgICAgIH07dmFyIGggPSBhLmEuZS5KKCk7YS5kLnRlbXBsYXRlID0geyBpbml0OiBmdW5jdGlvbiBpbml0KGIsIGMpIHtcbiAgICAgICAgICAgIHZhciBkID0gYS5hLmMoYygpKTtpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZCB8fCBkLm5hbWUpIGEuZi56YShiKTtlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKFwibm9kZXNcIiBpbiBkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGQgPSBkLm5vZGVzIHx8IFtdLCBhLkkoZCkpIHRocm93IEVycm9yKCdUaGUgXCJub2Rlc1wiIG9wdGlvbiBtdXN0IGJlIGEgcGxhaW4sIG5vbi1vYnNlcnZhYmxlIGFycmF5LicpO1xuICAgICAgICAgICAgICB9IGVsc2UgZCA9IGEuZi5jaGlsZE5vZGVzKGIpO2QgPSBhLmEubmMoZCk7bmV3IGEudi5zYShiKS5ub2RlcyhkKTtcbiAgICAgICAgICAgIH1yZXR1cm4geyBjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczogITAgfTtcbiAgICAgICAgICB9LCB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShiLCBjLCBkLCBlLCBmKSB7XG4gICAgICAgICAgICB2YXIgZyA9IGMoKTtjID0gYS5hLmMoZyk7ZCA9ICEwO2UgPSBudWxsO1wic3RyaW5nXCIgPT0gdHlwZW9mIGMgPyBjID0ge30gOiAoZyA9IGMubmFtZSwgXCJpZlwiIGluIGMgJiYgKGQgPSBhLmEuYyhjW1wiaWZcIl0pKSwgZCAmJiBcImlmbm90XCIgaW4gYyAmJiAoZCA9ICFhLmEuYyhjLmlmbm90KSkpO1xuICAgICAgICAgICAgXCJmb3JlYWNoXCIgaW4gYyA/IGUgPSBhLnBkKGcgfHwgYiwgZCAmJiBjLmZvcmVhY2ggfHwgW10sIGMsIGIsIGYpIDogZCA/IChmID0gXCJkYXRhXCIgaW4gYyA/IGYuYWMoYy5kYXRhLCBjLmFzKSA6IGYsIGUgPSBhLkNiKGcgfHwgYiwgZiwgYywgYikpIDogYS5mLnphKGIpO2YgPSBlOyhjID0gYS5hLmUuZ2V0KGIsIGgpKSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGMuayAmJiBjLmsoKTthLmEuZS5zZXQoYiwgaCwgZiAmJiBmLmNhKCkgPyBmIDogbik7XG4gICAgICAgICAgfSB9O2EuaC52YS50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgYiA9IGEuaC5BYihiKTtyZXR1cm4gMSA9PSBiLmxlbmd0aCAmJiBiWzBdLnVua25vd24gfHwgYS5oLmZkKGIsIFwibmFtZVwiKSA/IG51bGwgOiBcIlRoaXMgdGVtcGxhdGUgZW5naW5lIGRvZXMgbm90IHN1cHBvcnQgYW5vbnltb3VzIHRlbXBsYXRlcyBuZXN0ZWQgd2l0aGluIGl0cyB0ZW1wbGF0ZXNcIjtcbiAgICAgICAgfTthLmYuYWEudGVtcGxhdGUgPSAhMDtcbiAgICAgIH0pKCk7YS5iKFwic2V0VGVtcGxhdGVFbmdpbmVcIiwgYS5GYik7YS5iKFwicmVuZGVyVGVtcGxhdGVcIiwgYS5DYik7YS5hLmhjID0gZnVuY3Rpb24gKGEsIGMsIGQpIHtcbiAgICAgICAgaWYgKGEubGVuZ3RoICYmIGMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGUsIGYsIGcsIGgsIGw7Zm9yIChlID0gZiA9IDA7ICghZCB8fCBlIDwgZCkgJiYgKGggPSBhW2ZdKTsgKytmKSB7XG4gICAgICAgICAgICBmb3IgKGcgPSAwOyBsID0gY1tnXTsgKytnKSB7XG4gICAgICAgICAgICAgIGlmIChoLnZhbHVlID09PSBsLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaC5tb3ZlZCA9IGwuaW5kZXg7bC5tb3ZlZCA9IGguaW5kZXg7Yy5zcGxpY2UoZywgMSk7ZSA9IGcgPSAwO2JyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZSArPSBnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTthLmEubGIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGIoYiwgZCwgZSwgZiwgZykge1xuICAgICAgICAgIHZhciBoID0gTWF0aC5taW4sXG4gICAgICAgICAgICAgIGwgPSBNYXRoLm1heCxcbiAgICAgICAgICAgICAgbSA9IFtdLFxuICAgICAgICAgICAgICBrLFxuICAgICAgICAgICAgICBuID0gYi5sZW5ndGgsXG4gICAgICAgICAgICAgIHEsXG4gICAgICAgICAgICAgIHAgPSBkLmxlbmd0aCxcbiAgICAgICAgICAgICAgcyA9IHAgLSBuIHx8IDEsXG4gICAgICAgICAgICAgIHQgPSBuICsgcCArIDEsXG4gICAgICAgICAgICAgIHYsXG4gICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgIHg7Zm9yIChrID0gMDsgayA8PSBuOyBrKyspIHtcbiAgICAgICAgICAgIGZvciAodSA9IHYsIG0ucHVzaCh2ID0gW10pLCB4ID0gaChwLCBrICsgcyksIHEgPSBsKDAsIGsgLSAxKTsgcSA8PSB4OyBxKyspIHtcbiAgICAgICAgICAgICAgdltxXSA9IHEgPyBrID8gYltrIC0gMV0gPT09IGRbcSAtIDFdID8gdVtxIC0gMV0gOiBoKHVbcV0gfHwgdCwgdltxIC0gMV0gfHwgdCkgKyAxIDogcSArIDEgOiBrICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9aCA9IFtdO2wgPSBbXTtzID0gW107ayA9IG47Zm9yIChxID0gcDsgayB8fCBxOykge1xuICAgICAgICAgICAgcCA9IG1ba11bcV0gLSAxLCBxICYmIHAgPT09IG1ba11bcSAtIDFdID8gbC5wdXNoKGhbaC5sZW5ndGhdID0geyBzdGF0dXM6IGUsXG4gICAgICAgICAgICAgIHZhbHVlOiBkWy0tcV0sIGluZGV4OiBxIH0pIDogayAmJiBwID09PSBtW2sgLSAxXVtxXSA/IHMucHVzaChoW2gubGVuZ3RoXSA9IHsgc3RhdHVzOiBmLCB2YWx1ZTogYlstLWtdLCBpbmRleDogayB9KSA6ICgtLXEsIC0taywgZy5zcGFyc2UgfHwgaC5wdXNoKHsgc3RhdHVzOiBcInJldGFpbmVkXCIsIHZhbHVlOiBkW3FdIH0pKTtcbiAgICAgICAgICB9YS5hLmhjKHMsIGwsICFnLmRvbnRMaW1pdE1vdmVzICYmIDEwICogbik7cmV0dXJuIGgucmV2ZXJzZSgpO1xuICAgICAgICB9cmV0dXJuIGZ1bmN0aW9uIChhLCBkLCBlKSB7XG4gICAgICAgICAgZSA9IFwiYm9vbGVhblwiID09PSB0eXBlb2YgZSA/IHsgZG9udExpbWl0TW92ZXM6IGUgfSA6IGUgfHwge307YSA9IGEgfHwgW107ZCA9IGQgfHwgW107cmV0dXJuIGEubGVuZ3RoIDwgZC5sZW5ndGggPyBiKGEsIGQsIFwiYWRkZWRcIiwgXCJkZWxldGVkXCIsIGUpIDogYihkLCBhLCBcImRlbGV0ZWRcIiwgXCJhZGRlZFwiLCBlKTtcbiAgICAgICAgfTtcbiAgICAgIH0oKTthLmIoXCJ1dGlscy5jb21wYXJlQXJyYXlzXCIsIGEuYS5sYik7KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYihiLCBjLCBkLCBoLCBsKSB7XG4gICAgICAgICAgdmFyIG0gPSBbXSxcbiAgICAgICAgICAgICAgayA9IGEuQihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgayA9IGMoZCwgbCwgYS5hLkJhKG0sIGIpKSB8fCBbXTswIDwgbS5sZW5ndGggJiYgKGEuYS51YyhtLCBrKSwgaCAmJiBhLmwudyhoLCBudWxsLCBbZCwgaywgbF0pKTttLmxlbmd0aCA9IDA7YS5hLnRhKG0sIGspO1xuICAgICAgICAgIH0sIG51bGwsIHsgaTogYiwgeWE6IGZ1bmN0aW9uIHlhKCkge1xuICAgICAgICAgICAgICByZXR1cm4gIWEuYS5UYihtKTtcbiAgICAgICAgICAgIH0gfSk7cmV0dXJuIHsgZWE6IG0sIEI6IGsuY2EoKSA/IGsgOiBuIH07XG4gICAgICAgIH12YXIgYyA9IGEuYS5lLkooKSxcbiAgICAgICAgICAgIGQgPSBhLmEuZS5KKCk7YS5hLkRiID0gZnVuY3Rpb24gKGUsIGYsIGcsIGgsIGwpIHtcbiAgICAgICAgICBmdW5jdGlvbiBtKGIsIGMpIHtcbiAgICAgICAgICAgIHcgPSBxW2NdO3UgIT09IGMgJiYgKERbYl0gPSB3KTt3LnRiKHUrKyk7YS5hLkJhKHcuZWEsIGUpO3QucHVzaCh3KTt6LnB1c2godyk7XG4gICAgICAgICAgfWZ1bmN0aW9uIGsoYiwgYykge1xuICAgICAgICAgICAgaWYgKGIpIGZvciAodmFyIGQgPSAwLCBlID0gYy5sZW5ndGg7IGQgPCBlOyBkKyspIHtcbiAgICAgICAgICAgICAgY1tkXSAmJiBhLmEucihjW2RdLmVhLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIGIoYSwgZCwgY1tkXS5rYSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1mID0gZiB8fCBbXTtoID0gaCB8fCB7fTt2YXIgciA9IGEuYS5lLmdldChlLCBjKSA9PT0gbixcbiAgICAgICAgICAgICAgcSA9IGEuYS5lLmdldChlLCBjKSB8fCBbXSxcbiAgICAgICAgICAgICAgcCA9IGEuYS5pYihxLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGEua2E7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHMgPSBhLmEubGIocCwgZiwgaC5kb250TGltaXRNb3ZlcyksXG4gICAgICAgICAgICAgIHQgPSBbXSxcbiAgICAgICAgICAgICAgdiA9IDAsXG4gICAgICAgICAgICAgIHUgPSAwLFxuICAgICAgICAgICAgICB4ID0gW10sXG4gICAgICAgICAgICAgIHogPSBbXTtmID0gW107Zm9yICh2YXIgRCA9IFtdLCBwID0gW10sIHcsIEMgPSAwLCBCLCBFOyBCID0gc1tDXTsgQysrKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKEUgPSBCLm1vdmVkLCBCLnN0YXR1cykge2Nhc2UgXCJkZWxldGVkXCI6XG4gICAgICAgICAgICAgICAgRSA9PT0gbiAmJiAodyA9IHFbdl0sIHcuQiAmJiAody5CLmsoKSwgdy5CID0gbiksIGEuYS5CYSh3LmVhLCBlKS5sZW5ndGggJiYgKGguYmVmb3JlUmVtb3ZlICYmICh0LnB1c2godyksIHoucHVzaCh3KSwgdy5rYSA9PT0gZCA/IHcgPSBudWxsIDogZltDXSA9IHcpLCB3ICYmIHgucHVzaC5hcHBseSh4LCB3LmVhKSkpO3YrKzticmVhaztjYXNlIFwicmV0YWluZWRcIjpcbiAgICAgICAgICAgICAgICBtKEMsIHYrKyk7YnJlYWs7Y2FzZSBcImFkZGVkXCI6XG4gICAgICAgICAgICAgICAgRSAhPT0gbiA/IG0oQywgRSkgOiAodyA9IHsga2E6IEIudmFsdWUsIHRiOiBhLk8odSsrKSB9LCB0LnB1c2godyksIHoucHVzaCh3KSwgciB8fCAocFtDXSA9IHcpKTt9XG4gICAgICAgICAgfWEuYS5lLnNldChlLCBjLCB0KTtrKGguYmVmb3JlTW92ZSwgRCk7YS5hLnIoeCwgaC5iZWZvcmVSZW1vdmUgPyBhLmJhIDogYS5yZW1vdmVOb2RlKTtmb3IgKHZhciBDID0gMCwgciA9IGEuZi5maXJzdENoaWxkKGUpLCBGOyB3ID0geltDXTsgQysrKSB7XG4gICAgICAgICAgICB3LmVhIHx8IGEuYS5leHRlbmQodywgYihlLCBnLCB3LmthLCBsLCB3LnRiKSk7Zm9yICh2ID0gMDsgcyA9IHcuZWFbdl07IHIgPSBzLm5leHRTaWJsaW5nLCBGID0gcywgdisrKSB7XG4gICAgICAgICAgICAgIHMgIT09IHIgJiYgYS5mLmtjKGUsIHMsIEYpO1xuICAgICAgICAgICAgfSF3LmFkICYmIGwgJiYgKGwody5rYSwgdy5lYSwgdy50YiksIHcuYWQgPSAhMCk7XG4gICAgICAgICAgfWsoaC5iZWZvcmVSZW1vdmUsIGYpO2ZvciAoQyA9IDA7IEMgPCBmLmxlbmd0aDsgKytDKSB7XG4gICAgICAgICAgICBmW0NdICYmIChmW0NdLmthID0gZCk7XG4gICAgICAgICAgfWsoaC5hZnRlck1vdmUsIEQpO2soaC5hZnRlckFkZCwgcCk7XG4gICAgICAgIH07XG4gICAgICB9KSgpO2EuYihcInV0aWxzLnNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmdcIiwgYS5hLkRiKTthLlggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWxsb3dUZW1wbGF0ZVJld3JpdGluZyA9ICExO1xuICAgICAgfTthLlgucHJvdG90eXBlID0gbmV3IGEuUCgpO2EuWC5wcm90b3R5cGUucmVuZGVyVGVtcGxhdGVTb3VyY2UgPSBmdW5jdGlvbiAoYiwgYywgZCwgZSkge1xuICAgICAgICBpZiAoYyA9ICg5ID4gYS5hLkMgPyAwIDogYi5ub2RlcykgPyBiLm5vZGVzKCkgOiBudWxsKSByZXR1cm4gYS5hLlcoYy5jbG9uZU5vZGUoITApLmNoaWxkTm9kZXMpO2IgPSBiLnRleHQoKTtcbiAgICAgICAgcmV0dXJuIGEuYS5uYShiLCBlKTtcbiAgICAgIH07YS5YLnZiID0gbmV3IGEuWCgpO2EuRmIoYS5YLnZiKTthLmIoXCJuYXRpdmVUZW1wbGF0ZUVuZ2luZVwiLCBhLlgpOyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGEueGIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzLmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF1IHx8ICF1LnRtcGwpIHJldHVybiAwO3RyeSB7XG4gICAgICAgICAgICAgIGlmICgwIDw9IHUudG1wbC50YWcudG1wbC5vcGVuLnRvU3RyaW5nKCkuaW5kZXhPZihcIl9fXCIpKSByZXR1cm4gMjtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGEpIHt9cmV0dXJuIDE7XG4gICAgICAgICAgfSgpO3RoaXMucmVuZGVyVGVtcGxhdGVTb3VyY2UgPSBmdW5jdGlvbiAoYiwgZSwgZiwgZykge1xuICAgICAgICAgICAgZyA9IGcgfHwgdDtmID0gZiB8fCB7fTtpZiAoMiA+IGEpIHRocm93IEVycm9yKFwiWW91ciB2ZXJzaW9uIG9mIGpRdWVyeS50bXBsIGlzIHRvbyBvbGQuIFBsZWFzZSB1cGdyYWRlIHRvIGpRdWVyeS50bXBsIDEuMC4wcHJlIG9yIGxhdGVyLlwiKTt2YXIgaCA9IGIuZGF0YShcInByZWNvbXBpbGVkXCIpO2ggfHwgKGggPSBiLnRleHQoKSB8fCBcIlwiLCBoID0gdS50ZW1wbGF0ZShudWxsLCBcInt7a29fd2l0aCAkaXRlbS5rb0JpbmRpbmdDb250ZXh0fX1cIiArIGggKyBcInt7L2tvX3dpdGh9fVwiKSwgYi5kYXRhKFwicHJlY29tcGlsZWRcIiwgaCkpO2IgPSBbZS4kZGF0YV07ZSA9IHUuZXh0ZW5kKHsga29CaW5kaW5nQ29udGV4dDogZSB9LCBmLnRlbXBsYXRlT3B0aW9ucyk7ZSA9IHUudG1wbChoLCBiLCBlKTtlLmFwcGVuZFRvKGcuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7dS5mcmFnbWVudHMgPSB7fTtyZXR1cm4gZTtcbiAgICAgICAgICB9O3RoaXMuY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBcInt7a29fY29kZSAoKGZ1bmN0aW9uKCkgeyByZXR1cm4gXCIgKyBhICsgXCIgfSkoKSkgfX1cIjtcbiAgICAgICAgICB9O3RoaXMuYWRkVGVtcGxhdGUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgdC53cml0ZShcIjxzY3JpcHQgdHlwZT0ndGV4dC9odG1sJyBpZD0nXCIgKyBhICsgXCInPlwiICsgYiArIFwiXFx4M2Mvc2NyaXB0PlwiKTtcbiAgICAgICAgICB9OzAgPCBhICYmICh1LnRtcGwudGFnLmtvX2NvZGUgPSB7IG9wZW46IFwiX18ucHVzaCgkMSB8fCAnJyk7XCIgfSwgdS50bXBsLnRhZy5rb193aXRoID0geyBvcGVuOiBcIndpdGgoJDEpIHtcIiwgY2xvc2U6IFwifSBcIiB9KTtcbiAgICAgICAgfTthLnhiLnByb3RvdHlwZSA9IG5ldyBhLlAoKTt2YXIgYiA9IG5ldyBhLnhiKCk7MCA8IGIuZWQgJiYgYS5GYihiKTthLmIoXCJqcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmVcIiwgYS54Yik7XG4gICAgICB9KSgpO1xuICAgIH0pO1xuICB9KSgpO1xufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cbn0pKGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFNsaWNrID0gd2luZG93LlNsaWNrIHx8IHt9O1xuXG4gICAgU2xpY2sgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIGluc3RhbmNlVWlkID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncykge1xuXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgZGF0YVNldHRpbmdzO1xuXG4gICAgICAgICAgICBfLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFwcGVuZEFycm93czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcHBlbmREb3RzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhc05hdkZvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmV2QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgbmV4dEFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLW5leHRcIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHR5cGU9XCJidXR0b25cIj5OZXh0PC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogMzAwMCxcbiAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAnNTBweCcsXG4gICAgICAgICAgICAgICAgY3NzRWFzZTogJ2Vhc2UnLFxuICAgICAgICAgICAgICAgIGN1c3RvbVBhZ2luZzogZnVuY3Rpb24gY3VzdG9tUGFnaW5nKHNsaWRlciwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgLz4nKS50ZXh0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRvdHNDbGFzczogJ3NsaWNrLWRvdHMnLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgICAgICAgICAgICAgICBmYWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uQ2hhbmdlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6ICdvbmRlbWFuZCcsXG4gICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiAnd2luZG93JyxcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgcnRsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZTogJycsXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgIHN3aXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdG91Y2hNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoVGhyZXNob2xkOiA1LFxuICAgICAgICAgICAgICAgIHVzZUNTUzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMDAwXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfLmluaXRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9QbGF5VGltZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxLFxuICAgICAgICAgICAgICAgICRkb3RzOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0SGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgICAgIGxvYWRJbmRleDogMCxcbiAgICAgICAgICAgICAgICAkbmV4dEFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgICRwcmV2QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgc2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRlV2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlVHJhY2s6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlczogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldDogMCxcbiAgICAgICAgICAgICAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgJGxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgdG91Y2hPYmplY3Q6IHt9LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXNFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bnNsaWNrZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzKTtcblxuICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzID0gW107XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5ncyA9IFtdO1xuICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5oaWRkZW4gPSAnaGlkZGVuJztcbiAgICAgICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIF8ucG9zaXRpb25Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gbnVsbDtcbiAgICAgICAgICAgIF8ucm93Q291bnQgPSAxO1xuICAgICAgICAgICAgXy5zaG91bGRDbGljayA9IHRydWU7XG4gICAgICAgICAgICBfLiRzbGlkZXIgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9IDA7XG4gICAgICAgICAgICBfLndpbmRvd1RpbWVyID0gbnVsbDtcblxuICAgICAgICAgICAgZGF0YVNldHRpbmdzID0gJChlbGVtZW50KS5kYXRhKCdzbGljaycpIHx8IHt9O1xuXG4gICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5kZWZhdWx0cywgc2V0dGluZ3MsIGRhdGFTZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcblxuICAgICAgICAgICAgXy5vcmlnaW5hbFNldHRpbmdzID0gXy5vcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICdtb3pIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5hdXRvUGxheSA9ICQucHJveHkoXy5hdXRvUGxheSwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5Q2xlYXIgPSAkLnByb3h5KF8uYXV0b1BsYXlDbGVhciwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5SXRlcmF0b3IgPSAkLnByb3h5KF8uYXV0b1BsYXlJdGVyYXRvciwgXyk7XG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlID0gJC5wcm94eShfLmNoYW5nZVNsaWRlLCBfKTtcbiAgICAgICAgICAgIF8uY2xpY2tIYW5kbGVyID0gJC5wcm94eShfLmNsaWNrSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNlbGVjdEhhbmRsZXIgPSAkLnByb3h5KF8uc2VsZWN0SGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNldFBvc2l0aW9uID0gJC5wcm94eShfLnNldFBvc2l0aW9uLCBfKTtcbiAgICAgICAgICAgIF8uc3dpcGVIYW5kbGVyID0gJC5wcm94eShfLnN3aXBlSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmRyYWdIYW5kbGVyID0gJC5wcm94eShfLmRyYWdIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8ua2V5SGFuZGxlciA9ICQucHJveHkoXy5rZXlIYW5kbGVyLCBfKTtcblxuICAgICAgICAgICAgXy5pbnN0YW5jZVVpZCA9IGluc3RhbmNlVWlkKys7XG5cbiAgICAgICAgICAgIF8uaHRtbEV4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC87XG5cbiAgICAgICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuICAgICAgICAgICAgXy5pbml0KHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNsaWNrO1xuICAgIH0oKTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hY3RpdmF0ZUFEQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWFjdGl2ZScpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ2ZhbHNlJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFkZFNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQWRkID0gZnVuY3Rpb24gKG1hcmt1cCwgaW5kZXgsIGFkZEJlZm9yZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGFkZEJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBfLiRzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QmVmb3JlKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QWZ0ZXIoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWRkQmVmb3JlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZUhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0XG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlU2xpZGUgPSBmdW5jdGlvbiAodGFyZ2V0TGVmdCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgYW5pbVByb3BzID0ge30sXG4gICAgICAgICAgICBfID0gdGhpcztcblxuICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gLXRhcmdldExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudExlZnQgPSAtXy5jdXJyZW50TGVmdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJCh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogXy5jdXJyZW50TGVmdFxuICAgICAgICAgICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBfLm9wdGlvbnMuc3BlZWQsXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXy5vcHRpb25zLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24gc3RlcChub3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IE1hdGguY2VpbChub3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgKyBub3cgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoMHB4LCcgKyBub3cgKyAncHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSBNYXRoLmNlaWwodGFyZ2V0TGVmdCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHRhcmdldExlZnQgKyAncHgsIDBweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKDBweCwnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5vcHRpb25zLmFzTmF2Rm9yO1xuXG4gICAgICAgIGlmIChhc05hdkZvciAmJiBhc05hdkZvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgYXNOYXZGb3IgPSAkKGFzTmF2Rm9yKS5ub3QoXy4kc2xpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc05hdkZvcjtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFzTmF2Rm9yID0gZnVuY3Rpb24gKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLmdldE5hdlRhcmdldCgpO1xuXG4gICAgICAgIGlmIChhc05hdkZvciAhPT0gbnVsbCAmJiAodHlwZW9mIGFzTmF2Rm9yID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhc05hdkZvcikpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgYXNOYXZGb3IuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQodGhpcykuc2xpY2soJ2dldFNsaWNrJyk7XG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQudW5zbGlja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zbGlkZUhhbmRsZXIoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb24gPSBmdW5jdGlvbiAoc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9IF8udHJhbnNmb3JtVHlwZSArICcgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJ29wYWNpdHkgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlUaW1lciA9IHNldEludGVydmFsKF8uYXV0b1BsYXlJdGVyYXRvciwgXy5vcHRpb25zLmF1dG9wbGF5U3BlZWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUNsZWFyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5hdXRvUGxheVRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIGlmICghXy5wYXVzZWQgJiYgIV8uaW50ZXJydXB0ZWQgJiYgIV8uZm9jdXNzZWQpIHtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIGlmIChfLmRpcmVjdGlvbiA9PT0gMSAmJiBfLmN1cnJlbnRTbGlkZSArIDEgPT09IF8uc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5kaXJlY3Rpb24gPT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlIC0gMSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihzbGlkZVRvKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRBcnJvd3MgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyA9ICQoXy5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgPSAkKF8ub3B0aW9ucy5uZXh0QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnByZXBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZChfLiRuZXh0QXJyb3cpLmFkZENsYXNzKCdzbGljay1oaWRkZW4nKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGREb3RzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBkb3Q7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgICAgIGRvdCA9ICQoJzx1bCAvPicpLmFkZENsYXNzKF8ub3B0aW9ucy5kb3RzQ2xhc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IF8uZ2V0RG90Q291bnQoKTsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgZG90LmFwcGVuZCgkKCc8bGkgLz4nKS5hcHBlbmQoXy5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsIF8sIGkpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJGRvdHMgPSBkb3QuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZERvdHMpO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmZpbmQoJ2xpJykuZmlyc3QoKS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkT3V0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZXIuY2hpbGRyZW4oXy5vcHRpb25zLnNsaWRlICsgJzpub3QoLnNsaWNrLWNsb25lZCknKS5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpLmRhdGEoJ29yaWdpbmFsU3R5bGluZycsICQoZWxlbWVudCkuYXR0cignc3R5bGUnKSB8fCAnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stc2xpZGVyJyk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjayA9IF8uc2xpZGVDb3VudCA9PT0gMCA/ICQoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhfLiRzbGlkZXIpIDogXy4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICBfLiRsaXN0ID0gXy4kc2xpZGVUcmFjay53cmFwKCc8ZGl2IGNsYXNzPVwic2xpY2stbGlzdFwiLz4nKS5wYXJlbnQoKTtcbiAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoJ29wYWNpdHknLCAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgfHwgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyKS5ub3QoJ1tzcmNdJykuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcblxuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG5cbiAgICAgICAgXy5idWlsZERvdHMoKTtcblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5hZGRDbGFzcygnZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgYixcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBuZXdTbGlkZXMsXG4gICAgICAgICAgICBudW1PZlNsaWRlcyxcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLFxuICAgICAgICAgICAgc2xpZGVzUGVyU2VjdGlvbjtcblxuICAgICAgICBuZXdTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVyLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5yb3dzID4gMSkge1xuXG4gICAgICAgICAgICBzbGlkZXNQZXJTZWN0aW9uID0gXy5vcHRpb25zLnNsaWRlc1BlclJvdyAqIF8ub3B0aW9ucy5yb3dzO1xuICAgICAgICAgICAgbnVtT2ZTbGlkZXMgPSBNYXRoLmNlaWwob3JpZ2luYWxTbGlkZXMubGVuZ3RoIC8gc2xpZGVzUGVyU2VjdGlvbik7XG5cbiAgICAgICAgICAgIGZvciAoYSA9IDA7IGEgPCBudW1PZlNsaWRlczsgYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgZm9yIChiID0gMDsgYiA8IF8ub3B0aW9ucy5yb3dzOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGMgPSAwOyBjIDwgXy5vcHRpb25zLnNsaWRlc1BlclJvdzsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gYSAqIHNsaWRlc1BlclNlY3Rpb24gKyAoYiAqIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cgKyBjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2xpZGVzLmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG5ld1NsaWRlcyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY3NzKHtcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiAxMDAgLyBfLm9wdGlvbnMuc2xpZGVzUGVyUm93ICsgJyUnLFxuICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmUgPSBmdW5jdGlvbiAoaW5pdGlhbCwgZm9yY2VVcGRhdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha3BvaW50LFxuICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCxcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoLFxuICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNsaWRlcldpZHRoID0gXy4kc2xpZGVyLndpZHRoKCk7XG4gICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIHx8ICQod2luZG93KS53aWR0aCgpO1xuXG4gICAgICAgIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3dpbmRvdycpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gd2luZG93V2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdzbGlkZXInKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHNsaWRlcldpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnbWluJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBNYXRoLm1pbih3aW5kb3dXaWR0aCwgc2xpZGVyV2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5yZXNwb25zaXZlICYmIF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aCAmJiBfLm9wdGlvbnMucmVzcG9uc2l2ZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yIChicmVha3BvaW50IGluIF8uYnJlYWtwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcmlnaW5hbFNldHRpbmdzLm1vYmlsZUZpcnN0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoIDwgXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoID4gXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChfLmFjdGl2ZUJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IF8uYWN0aXZlQnJlYWtwb2ludCB8fCBmb3JjZVVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLCBfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncywgXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWluaXRpYWwgJiYgdHJpZ2dlckJyZWFrcG9pbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JyZWFrcG9pbnQnLCBbXywgdHJpZ2dlckJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hhbmdlU2xpZGUgPSBmdW5jdGlvbiAoZXZlbnQsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCksXG4gICAgICAgICAgICBpbmRleE9mZnNldCxcbiAgICAgICAgICAgIHNsaWRlT2Zmc2V0LFxuICAgICAgICAgICAgdW5ldmVuT2Zmc2V0O1xuXG4gICAgICAgIGlmICgkdGFyZ2V0LmlzKCdhJykpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISR0YXJnZXQuaXMoJ2xpJykpIHtcbiAgICAgICAgICAgICR0YXJnZXQgPSAkdGFyZ2V0LmNsb3Nlc3QoJ2xpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB1bmV2ZW5PZmZzZXQgPSBfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDA7XG4gICAgICAgIGluZGV4T2Zmc2V0ID0gdW5ldmVuT2Zmc2V0ID8gMCA6IChfLnNsaWRlQ291bnQgLSBfLmN1cnJlbnRTbGlkZSkgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLm1lc3NhZ2UpIHtcblxuICAgICAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnaW5kZXgnOlxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50LmRhdGEuaW5kZXggPT09IDAgPyAwIDogZXZlbnQuZGF0YS5pbmRleCB8fCAkdGFyZ2V0LmluZGV4KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmNoZWNrTmF2aWdhYmxlKGluZGV4KSwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmNoaWxkcmVuKCkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24gKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgbmF2aWdhYmxlcyxcbiAgICAgICAgICAgIHByZXZOYXZpZ2FibGU7XG5cbiAgICAgICAgbmF2aWdhYmxlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpO1xuICAgICAgICBwcmV2TmF2aWdhYmxlID0gMDtcbiAgICAgICAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gbmF2aWdhYmxlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IG5hdmlnYWJsZXNbbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwcmV2TmF2aWdhYmxlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldk5hdmlnYWJsZSA9IG5hdmlnYWJsZXNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgJiYgXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpLm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKS5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSkub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kZG90cy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfLnZpc2liaWxpdHlDaGFuZ2UsIF8udmlzaWJpbGl0eSk7XG5cbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5yZXNpemUpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub2ZmKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBSb3dzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucm93cyA+IDEpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQob3JpZ2luYWxTbGlkZXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uc2hvdWxkQ2xpY2sgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChyZWZyZXNoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICBfLmNsZWFuVXBFdmVudHMoKTtcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5kZXRhY2goKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lmxlbmd0aCkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG5cbiAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5sZW5ndGgpIHtcblxuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JykuY3NzKCdkaXNwbGF5JywgJycpO1xuXG4gICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJHNsaWRlcykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKS5yZW1vdmVBdHRyKCdkYXRhLXNsaWNrLWluZGV4JykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJykpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kbGlzdC5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFwcGVuZChfLiRzbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5jbGVhblVwUm93cygpO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGVyJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICBfLnVuc2xpY2tlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKCFyZWZyZXNoKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZGVzdHJveScsIFtfXSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24gKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnJztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGUgPSBmdW5jdGlvbiAoc2xpZGVJbmRleCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlT3V0ID0gZnVuY3Rpb24gKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZyk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tGaWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuZmlsdGVyKGZpbHRlcikuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZvY3VzSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVyLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpLm9uKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJywgJyonLCBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgJHNmID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnBhdXNlT25Gb2N1cykge1xuICAgICAgICAgICAgICAgICAgICBfLmZvY3Vzc2VkID0gJHNmLmlzKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldEN1cnJlbnQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tDdXJyZW50U2xpZGUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICByZXR1cm4gXy5jdXJyZW50U2xpZGU7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXREb3RDb3VudCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGJyZWFrUG9pbnQgPSAwO1xuICAgICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICAgIHZhciBwYWdlclF0eSA9IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIV8ub3B0aW9ucy5hc05hdkZvcikge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSAxICsgTWF0aC5jZWlsKChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXJRdHkgLSAxO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TGVmdCA9IGZ1bmN0aW9uIChzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgIHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwLFxuICAgICAgICAgICAgdGFyZ2V0U2xpZGUsXG4gICAgICAgICAgICBjb2VmO1xuXG4gICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IF8uc2xpZGVXaWR0aCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiAtMTtcbiAgICAgICAgICAgICAgICBjb2VmID0gLTE7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTEuNTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSB2ZXJ0aWNhbEhlaWdodCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiBjb2VmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID4gXy5zbGlkZUNvdW50ICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiBfLnNsaWRlV2lkdGggKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogdmVydGljYWxIZWlnaHQgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSBfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiBfLnNsaWRlV2lkdGggKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogdmVydGljYWxIZWlnaHQgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSBfLnNsaWRlQ291bnQpICogXy5zbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gXy5zbGlkZUNvdW50KSAqIHZlcnRpY2FsSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLyAyIC0gXy5zbGlkZVdpZHRoICogXy5zbGlkZUNvdW50IC8gMjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgLSBfLnNsaWRlV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gc2xpZGVJbmRleCAqIF8uc2xpZGVXaWR0aCAqIC0xICsgXy5zbGlkZU9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSBzbGlkZUluZGV4ICogdmVydGljYWxIZWlnaHQgKiAtMSArIHZlcnRpY2FsT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCArPSAoXy4kbGlzdC53aWR0aCgpIC0gdGFyZ2V0U2xpZGUub3V0ZXJXaWR0aCgpKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0TGVmdDtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE9wdGlvbiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbiA9IGZ1bmN0aW9uIChvcHRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIF8ub3B0aW9uc1tvcHRpb25dO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha1BvaW50ID0gMCxcbiAgICAgICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgICAgbWF4O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBjb3VudGVyID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQgKiAyO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBtYXgpIHtcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChicmVha1BvaW50KTtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXhlcztcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWNrID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpZGVDb3VudCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQsXG4gICAgICAgICAgICBzd2lwZWRTbGlkZSxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSA/IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIDogMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stc2xpZGUnKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgc2xpZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGUub2Zmc2V0TGVmdCAtIGNlbnRlck9mZnNldCArICQoc2xpZGUpLm91dGVyV2lkdGgoKSAvIDIgPiBfLnN3aXBlTGVmdCAqIC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkID0gTWF0aC5hYnMoJChzd2lwZWRTbGlkZSkuYXR0cignZGF0YS1zbGljay1pbmRleCcpIC0gXy5jdXJyZW50U2xpZGUpIHx8IDE7XG5cbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNUcmF2ZXJzZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nb1RvID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR29UbyA9IGZ1bmN0aW9uIChzbGlkZSwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICBpbmRleDogcGFyc2VJbnQoc2xpZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGRvbnRBbmltYXRlKTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoY3JlYXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCEkKF8uJHNsaWRlcikuaGFzQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJykpIHtcblxuICAgICAgICAgICAgJChfLiRzbGlkZXIpLmFkZENsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuXG4gICAgICAgICAgICBfLmJ1aWxkUm93cygpO1xuICAgICAgICAgICAgXy5idWlsZE91dCgpO1xuICAgICAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICAgICAgXy5zdGFydExvYWQoKTtcbiAgICAgICAgICAgIF8ubG9hZFNsaWRlcigpO1xuICAgICAgICAgICAgXy5pbml0aWFsaXplRXZlbnRzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSh0cnVlKTtcbiAgICAgICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JlYXRpb24pIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdpbml0JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5pbml0QURBKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmF1dG9wbGF5KSB7XG5cbiAgICAgICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBREEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG51bURvdEdyb3VwcyA9IE1hdGguY2VpbChfLnNsaWRlQ291bnQgLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxcbiAgICAgICAgICAgIHRhYkNvbnRyb2xJbmRleGVzID0gXy5nZXROYXZpZ2FibGVJbmRleGVzKCkuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWwgPj0gMCAmJiB2YWwgPCBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5ub3QoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVDb250cm9sSW5kZXggPSB0YWJDb250cm9sSW5kZXhlcy5pbmRleE9mKGkpO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAndGFicGFuZWwnLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIGksXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVDb250cm9sSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6ICdzbGljay1zbGlkZS1jb250cm9sJyArIF8uaW5zdGFuY2VVaWQgKyBzbGlkZUNvbnRyb2xJbmRleFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kZG90cy5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKS5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFwcGVkU2xpZGVJbmRleCA9IHRhYkNvbnRyb2xJbmRleGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAncHJlc2VudGF0aW9uJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdidXR0b24nKS5maXJzdCgpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgaSxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIG1hcHBlZFNsaWRlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogaSArIDEgKyAnIG9mICcgKyBudW1Eb3RHcm91cHMsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuZXEoXy5jdXJyZW50U2xpZGUpLmZpbmQoJ2J1dHRvbicpLmF0dHIoe1xuICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICAgICAgfSkuZW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gXy5jdXJyZW50U2xpZGUsIG1heCA9IGkgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93OyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShpKS5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5hY3RpdmF0ZUFEQSgpO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFycm93RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycpLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJykub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdERvdEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnXG4gICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kZG90cy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXIgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKS5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKS5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5wYXVzZU9uSG92ZXIpIHtcblxuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuXG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnc3RhcnQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ21vdmUnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vbignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oXy52aXNpYmlsaXR5Q2hhbmdlLCAkLnByb3h5KF8udmlzaWJpbGl0eSwgXykpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLm9yaWVudGF0aW9uQ2hhbmdlLCBfKSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5yZXNpemUsIF8pKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9uKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuICAgICAgICAkKF8uc2V0UG9zaXRpb24pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFVJID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5zaG93KCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuc2hvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmtleUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIGlmICghZXZlbnQudGFyZ2V0LnRhZ05hbWUubWF0Y2goJ1RFWFRBUkVBfElOUFVUfFNFTEVDVCcpKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzcgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICduZXh0JyA6ICdwcmV2aW91cydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSAzOSAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ3ByZXZpb3VzJyA6ICduZXh0J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxhenlMb2FkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGxvYWRSYW5nZSxcbiAgICAgICAgICAgIGNsb25lUmFuZ2UsXG4gICAgICAgICAgICByYW5nZVN0YXJ0LFxuICAgICAgICAgICAgcmFuZ2VFbmQ7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZEltYWdlcyhpbWFnZXNTY29wZSkge1xuXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIGltYWdlc1Njb3BlKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU291cmNlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxhenknKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTcmNTZXQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc3Jjc2V0JyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU2l6ZXMgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlLmFuaW1hdGUoeyBvcGFjaXR5OiAwIH0sIDEwMCwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZS5hdHRyKCdzcmNzZXQnLCBpbWFnZVNyY1NldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTaXplcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZS5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpLmFuaW1hdGUoeyBvcGFjaXR5OiAxIH0sIDIwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzJykucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbXywgaW1hZ2UsIGltYWdlU291cmNlXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eScpLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJykuYWRkQ2xhc3MoJ3NsaWNrLWxhenlsb2FkLWVycm9yJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbXywgaW1hZ2UsIGltYWdlU291cmNlXSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gMiArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpICsgXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5vcHRpb25zLmluZmluaXRlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIF8uY3VycmVudFNsaWRlIDogXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICByYW5nZUVuZCA9IE1hdGguY2VpbChyYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA+IDApIHJhbmdlU3RhcnQtLTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbmQgPD0gXy5zbGlkZUNvdW50KSByYW5nZUVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZFJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnYW50aWNpcGF0ZWQnKSB7XG4gICAgICAgICAgICB2YXIgcHJldlNsaWRlID0gcmFuZ2VTdGFydCAtIDEsXG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlID0gcmFuZ2VFbmQsXG4gICAgICAgICAgICAgICAgJHNsaWRlcyA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2U2xpZGUgPCAwKSBwcmV2U2xpZGUgPSBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShwcmV2U2xpZGUpKTtcbiAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSBsb2FkUmFuZ2UuYWRkKCRzbGlkZXMuZXEobmV4dFNsaWRlKSk7XG4gICAgICAgICAgICAgICAgcHJldlNsaWRlLS07XG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkSW1hZ2VzKGxvYWRSYW5nZSk7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZSgwLCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiAtMSk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sb2FkU2xpZGVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jc3Moe1xuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICBfLmluaXRVSSgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdwcm9ncmVzc2l2ZScpIHtcbiAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5uZXh0ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrTmV4dCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUub3JpZW50YXRpb25DaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBhdXNlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGF1c2UgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wbGF5ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGxheSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICBfLm9wdGlvbnMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBvc3RTbGlkZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoIV8udW5zbGlja2VkKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhZnRlckNoYW5nZScsIFtfLCBpbmRleF0pO1xuXG4gICAgICAgICAgICBfLmFuaW1hdGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmluaXRBREEoKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGN1cnJlbnRTbGlkZSA9ICQoXy4kc2xpZGVzLmdldChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLmF0dHIoJ3RhYmluZGV4JywgMCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXYgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQcmV2ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZCA9IGZ1bmN0aW9uICh0cnlDb3VudCkge1xuXG4gICAgICAgIHRyeUNvdW50ID0gdHJ5Q291bnQgfHwgMTtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkaW1nc1RvTG9hZCA9ICQoJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyKSxcbiAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgaW1hZ2VTb3VyY2UsXG4gICAgICAgICAgICBpbWFnZVNyY1NldCxcbiAgICAgICAgICAgIGltYWdlU2l6ZXMsXG4gICAgICAgICAgICBpbWFnZVRvTG9hZDtcblxuICAgICAgICBpZiAoJGltZ3NUb0xvYWQubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVNyY1NldCA9IGltYWdlLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICBpbWFnZVNpemVzID0gaW1hZ2UuYXR0cignZGF0YS1zaXplcycpIHx8IF8uJHNsaWRlci5hdHRyKCdkYXRhLXNpemVzJyk7XG4gICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZS5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW1hZ2UuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzJykucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgW18sIGltYWdlLCBpbWFnZVNvdXJjZV0pO1xuICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGlmICh0cnlDb3VudCA8IDMpIHtcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCh0cnlDb3VudCArIDEpO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UucmVtb3ZlQXR0cignZGF0YS1sYXp5JykucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKS5hZGRDbGFzcygnc2xpY2stbGF6eWxvYWQtZXJyb3InKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFtfLCBpbWFnZSwgaW1hZ2VTb3VyY2VdKTtcblxuICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FsbEltYWdlc0xvYWRlZCcsIFtfXSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoaW5pdGlhbGl6aW5nKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY3VycmVudFNsaWRlLFxuICAgICAgICAgICAgbGFzdFZpc2libGVJbmRleDtcblxuICAgICAgICBsYXN0VmlzaWJsZUluZGV4ID0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcblxuICAgICAgICBpZiAoIV8ub3B0aW9ucy5pbmZpbml0ZSAmJiBfLmN1cnJlbnRTbGlkZSA+IGxhc3RWaXNpYmxlSW5kZXgpIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gbGFzdFZpc2libGVJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG5cbiAgICAgICAgXy5kZXN0cm95KHRydWUpO1xuXG4gICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMsIHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XG5cbiAgICAgICAgXy5pbml0KCk7XG5cbiAgICAgICAgaWYgKCFpbml0aWFsaXppbmcpIHtcblxuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogY3VycmVudFNsaWRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrcG9pbnQsXG4gICAgICAgICAgICBjdXJyZW50QnJlYWtwb2ludCxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICByZXNwb25zaXZlU2V0dGluZ3MgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZSB8fCBudWxsO1xuXG4gICAgICAgIGlmICgkLnR5cGUocmVzcG9uc2l2ZVNldHRpbmdzKSA9PT0gJ2FycmF5JyAmJiByZXNwb25zaXZlU2V0dGluZ3MubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcblxuICAgICAgICAgICAgZm9yIChicmVha3BvaW50IGluIHJlc3BvbnNpdmVTZXR0aW5ncykge1xuXG4gICAgICAgICAgICAgICAgbCA9IF8uYnJlYWtwb2ludHMubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc3BsaWNlKGwsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8ub3B0aW9ucy5tb2JpbGVGaXJzdCA/IGEgLSBiIDogYiAtIGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVpbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKF8ub3B0aW9ucy5zbGlkZSkuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50ICYmIF8uY3VycmVudFNsaWRlICE9PSAwKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcblxuICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZShmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKHR5cGVvZiBfLmN1cnJlbnRTbGlkZSA9PT0gJ251bWJlcicgPyBfLmN1cnJlbnRTbGlkZSA6IDApO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICBfLnBhdXNlZCA9ICFfLm9wdGlvbnMuYXV0b3BsYXk7XG4gICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigncmVJbml0JywgW19dKTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpICE9PSBfLndpbmRvd1dpZHRoKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoXy53aW5kb3dEZWxheSk7XG4gICAgICAgICAgICBfLndpbmRvd0RlbGF5ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICAgICAgICAgIGlmICghXy51bnNsaWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVtb3ZlU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tSZW1vdmUgPSBmdW5jdGlvbiAoaW5kZXgsIHJlbW92ZUJlZm9yZSwgcmVtb3ZlQWxsKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IDAgOiBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldENTUyA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzBweCAnICsgXy5vcHRpb25zLmNlbnRlclBhZGRpbmdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJGxpc3QuaGVpZ2h0KF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nICsgJyAwcHgnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLmxpc3RXaWR0aCA9IF8uJGxpc3Qud2lkdGgoKTtcbiAgICAgICAgXy5saXN0SGVpZ2h0ID0gXy4kbGlzdC5oZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSAmJiBfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCAvIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoXy5zbGlkZVdpZHRoICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoNTAwMCAqIF8uc2xpZGVDb3VudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGgpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2Zmc2V0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJXaWR0aCh0cnVlKSAtIF8uJHNsaWRlcy5maXJzdCgpLndpZHRoKCk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLndpZHRoKF8uc2xpZGVXaWR0aCAtIG9mZnNldCk7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQ7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gXy5zbGlkZVdpZHRoICogaW5kZXggKiAtMTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5jc3Moe1xuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuY3NzKCdoZWlnaHQnLCB0YXJnZXRIZWlnaHQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPSBTbGljay5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb24gPSBmdW5jdGlvbiAoKSB7XG5cblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgIG9wdGlvbixcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgcmVmcmVzaCA9IGZhbHNlLFxuICAgICAgICAgICAgdHlwZTtcblxuICAgICAgICBpZiAoJC50eXBlKGFyZ3VtZW50c1swXSkgPT09ICdvYmplY3QnKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB0eXBlID0gJ211bHRpcGxlJztcbiAgICAgICAgfSBlbHNlIGlmICgkLnR5cGUoYXJndW1lbnRzWzBdKSA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgICAgb3B0aW9uID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzWzBdID09PSAncmVzcG9uc2l2ZScgJiYgJC50eXBlKGFyZ3VtZW50c1sxXSkgPT09ICdhcnJheScpIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAncmVzcG9uc2l2ZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudHNbMV0gIT09ICd1bmRlZmluZWQnKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3NpbmdsZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gJ3NpbmdsZScpIHtcblxuICAgICAgICAgICAgXy5vcHRpb25zW29wdGlvbl0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbXVsdGlwbGUnKSB7XG5cbiAgICAgICAgICAgICQuZWFjaChvcHRpb24sIGZ1bmN0aW9uIChvcHQsIHZhbCkge1xuXG4gICAgICAgICAgICAgICAgXy5vcHRpb25zW29wdF0gPSB2YWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVzcG9uc2l2ZScpIHtcblxuICAgICAgICAgICAgZm9yIChpdGVtIGluIHZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoJC50eXBlKF8ub3B0aW9ucy5yZXNwb25zaXZlKSAhPT0gJ2FycmF5Jykge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gW3ZhbHVlW2l0ZW1dXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGwgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChsID49IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5yZXNwb25zaXZlW2xdLmJyZWFrcG9pbnQgPT09IHZhbHVlW2l0ZW1dLmJyZWFrcG9pbnQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCh2YWx1ZVtpdGVtXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZnJlc2gpIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldERpbWVuc2lvbnMoKTtcblxuICAgICAgICBfLnNldEhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2V0Q1NTKF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zZXRGYWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc2V0UG9zaXRpb24nLCBbX10pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keS5zdHlsZTtcblxuICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gdHJ1ZSA/ICd0b3AnIDogJ2xlZnQnO1xuXG4gICAgICAgIGlmIChfLnBvc2l0aW9uUHJvcCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stdmVydGljYWwnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stdmVydGljYWwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5U3R5bGUuV2Via2l0VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkIHx8IGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHwgYm9keVN0eWxlLm1zVHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnVzZUNTUyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIF8ub3B0aW9ucy56SW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy56SW5kZXggPCAzKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5PVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnT1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdNb3pUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ21zVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgXy5hbmltVHlwZSAhPT0gbnVsbCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uIChpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCxcbiAgICAgICAgICAgIGFsbFNsaWRlcyxcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LFxuICAgICAgICAgICAgcmVtYWluZGVyO1xuXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKS5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay1jdXJyZW50JykuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lcShpbmRleCkuYWRkQ2xhc3MoJ3NsaWNrLWN1cnJlbnQnKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgdmFyIGV2ZW5Db2VmID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAlIDIgPT09IDAgPyAxIDogMDtcblxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBjZW50ZXJPZmZzZXQgJiYgaW5kZXggPD0gXy5zbGlkZUNvdW50IC0gMSAtIGNlbnRlck9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXMuc2xpY2UoaW5kZXggLSBjZW50ZXJPZmZzZXQgKyBldmVuQ29lZiwgaW5kZXggKyBjZW50ZXJPZmZzZXQgKyAxKS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJykuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXMuc2xpY2UoaW5kZXhPZmZzZXQgLSBjZW50ZXJPZmZzZXQgKyAxICsgZXZlbkNvZWYsIGluZGV4T2Zmc2V0ICsgY2VudGVyT2Zmc2V0ICsgMikuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzLmVxKGFsbFNsaWRlcy5sZW5ndGggLSAxIC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IF8uc2xpZGVDb3VudCAtIDEpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXMuZXEoXy5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKGluZGV4KS5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDw9IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlcy5zbGljZShpbmRleCwgaW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJykuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsU2xpZGVzLmxlbmd0aCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBhbGxTbGlkZXMuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgcmVtYWluZGVyID0gXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleCA6IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICYmIF8uc2xpZGVDb3VudCAtIGluZGV4IDwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlcy5zbGljZShpbmRleE9mZnNldCAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gcmVtYWluZGVyKSwgaW5kZXhPZmZzZXQgKyByZW1haW5kZXIpLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzLnNsaWNlKGluZGV4T2Zmc2V0LCBpbmRleE9mZnNldCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdvbmRlbWFuZCcgfHwgXy5vcHRpb25zLmxhenlMb2FkID09PSAnYW50aWNpcGF0ZWQnKSB7XG4gICAgICAgICAgICBfLmxhenlMb2FkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldHVwSW5maW5pdGUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHNsaWRlSW5kZXgsXG4gICAgICAgICAgICBpbmZpbml0ZUNvdW50O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5vcHRpb25zLmNlbnRlck1vZGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIHNsaWRlSW5kZXggPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBfLnNsaWRlQ291bnQ7IGkgPiBfLnNsaWRlQ291bnQgLSBpbmZpbml0ZUNvdW50OyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJykuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmZpbml0ZUNvdW50ICsgXy5zbGlkZUNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKS5maW5kKCdbaWRdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignaWQnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uICh0b2dnbGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCF0b2dnbGUpIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBfLmludGVycnVwdGVkID0gdG9nZ2xlO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2VsZWN0SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9ICQoZXZlbnQudGFyZ2V0KS5pcygnLnNsaWNrLXNsaWRlJykgPyAkKGV2ZW50LnRhcmdldCkgOiAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykpO1xuXG4gICAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gMDtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2xpZGVIYW5kbGVyKGluZGV4KTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWRlSGFuZGxlciA9IGZ1bmN0aW9uIChpbmRleCwgc3luYywgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgdGFyZ2V0U2xpZGUsXG4gICAgICAgICAgICBhbmltU2xpZGUsXG4gICAgICAgICAgICBvbGRTbGlkZSxcbiAgICAgICAgICAgIHNsaWRlTGVmdCxcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSBudWxsLFxuICAgICAgICAgICAgXyA9IHRoaXMsXG4gICAgICAgICAgICBuYXZUYXJnZXQ7XG5cbiAgICAgICAgc3luYyA9IHN5bmMgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlICYmIF8ub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlICYmIF8uY3VycmVudFNsaWRlID09PSBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFzTmF2Rm9yKGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldFNsaWRlID0gaW5kZXg7XG4gICAgICAgIHRhcmdldExlZnQgPSBfLmdldExlZnQodGFyZ2V0U2xpZGUpO1xuICAgICAgICBzbGlkZUxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8uY3VycmVudExlZnQgPSBfLnN3aXBlTGVmdCA9PT0gbnVsbCA/IHNsaWRlTGVmdCA6IF8uc3dpcGVMZWZ0O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gXy5nZXREb3RDb3VudCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXV0b3BsYXkpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgLSBfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlIC0gXy5zbGlkZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBfLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIFtfLCBfLmN1cnJlbnRTbGlkZSwgYW5pbVNsaWRlXSk7XG5cbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBhbmltU2xpZGU7XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXNOYXZGb3IpIHtcblxuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gXy5nZXROYXZUYXJnZXQoKTtcbiAgICAgICAgICAgIG5hdlRhcmdldCA9IG5hdlRhcmdldC5zbGljaygnZ2V0U2xpY2snKTtcblxuICAgICAgICAgICAgaWYgKG5hdlRhcmdldC5zbGlkZUNvdW50IDw9IG5hdlRhcmdldC5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgIG5hdlRhcmdldC5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlT3V0KG9sZFNsaWRlKTtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHRhcmdldExlZnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zdGFydExvYWQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LmhpZGUoKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5oaWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLmhpZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIHhEaXN0LFxuICAgICAgICAgICAgeURpc3QsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgc3dpcGVBbmdsZSxcbiAgICAgICAgICAgIF8gPSB0aGlzO1xuXG4gICAgICAgIHhEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFggLSBfLnRvdWNoT2JqZWN0LmN1clg7XG4gICAgICAgIHlEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFkgLSBfLnRvdWNoT2JqZWN0LmN1clk7XG4gICAgICAgIHIgPSBNYXRoLmF0YW4yKHlEaXN0LCB4RGlzdCk7XG5cbiAgICAgICAgc3dpcGVBbmdsZSA9IE1hdGgucm91bmQociAqIDE4MCAvIE1hdGguUEkpO1xuICAgICAgICBpZiAoc3dpcGVBbmdsZSA8IDApIHtcbiAgICAgICAgICAgIHN3aXBlQW5nbGUgPSAzNjAgLSBNYXRoLmFicyhzd2lwZUFuZ2xlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzd2lwZUFuZ2xlIDw9IDQ1ICYmIHN3aXBlQW5nbGUgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVBbmdsZSA8PSAzNjAgJiYgc3dpcGVBbmdsZSA+PSAzMTUpIHtcbiAgICAgICAgICAgIHJldHVybiBfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPj0gMTM1ICYmIHN3aXBlQW5nbGUgPD0gMjI1KSB7XG4gICAgICAgICAgICByZXR1cm4gXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoc3dpcGVBbmdsZSA+PSAzNSAmJiBzd2lwZUFuZ2xlIDw9IDEzNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG93bic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAndXAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICd2ZXJ0aWNhbCc7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlQ291bnQsXG4gICAgICAgICAgICBkaXJlY3Rpb247XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBfLnN3aXBpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5zY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIF8uc2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgIF8uc2hvdWxkQ2xpY2sgPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gMTAgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3QuY3VyWCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5lZGdlSGl0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZWRnZScsIFtfLCBfLnN3aXBlRGlyZWN0aW9uKCldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID49IF8udG91Y2hPYmplY3QubWluU3dpcGUpIHtcblxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG93bic6XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9IF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPyBfLmNoZWNrTmF2aWdhYmxlKF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCkpIDogXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID0gXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/IF8uY2hlY2tOYXZpZ2FibGUoXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKSkgOiBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gIT0gJ3ZlcnRpY2FsJykge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoc2xpZGVDb3VudCk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzd2lwZScsIFtfLCBkaXJlY3Rpb25dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKF8udG91Y2hPYmplY3Quc3RhcnRYICE9PSBfLnRvdWNoT2JqZWN0LmN1clgpIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSB8fCAnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQgJiYgXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IGZhbHNlICYmIGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zLnRvdWNoVGhyZXNob2xkO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0SGVpZ2h0IC8gXy5vcHRpb25zLnRvdWNoVGhyZXNob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLmFjdGlvbikge1xuXG4gICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZVN0YXJ0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbW92ZSc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZU1vdmUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVFbmQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlTW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGVkZ2VXYXNIaXQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1ckxlZnQsXG4gICAgICAgICAgICBzd2lwZURpcmVjdGlvbixcbiAgICAgICAgICAgIHN3aXBlTGVuZ3RoLFxuICAgICAgICAgICAgcG9zaXRpb25PZmZzZXQsXG4gICAgICAgICAgICB0b3VjaGVzLFxuICAgICAgICAgICAgdmVydGljYWxTd2lwZUxlbmd0aDtcblxuICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzIDogbnVsbDtcblxuICAgICAgICBpZiAoIV8uZHJhZ2dpbmcgfHwgXy5zY3JvbGxpbmcgfHwgdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VyTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clggLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCwgMikpKTtcblxuICAgICAgICB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3coXy50b3VjaE9iamVjdC5jdXJZIC0gXy50b3VjaE9iamVjdC5zdGFydFksIDIpKSk7XG5cbiAgICAgICAgaWYgKCFfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nICYmICFfLnN3aXBpbmcgJiYgdmVydGljYWxTd2lwZUxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIF8uc2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gdmVydGljYWxTd2lwZUxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlRGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIF8uc3dpcGluZyA9IHRydWU7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9zaXRpb25PZmZzZXQgPSAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAxIDogLTEpICogKF8udG91Y2hPYmplY3QuY3VyWCA+IF8udG91Y2hPYmplY3Quc3RhcnRYID8gMSA6IC0xKTtcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gXy50b3VjaE9iamVjdC5jdXJZID4gXy50b3VjaE9iamVjdC5zdGFydFkgPyAxIDogLTE7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ3JpZ2h0JyB8fCBfLmN1cnJlbnRTbGlkZSA+PSBfLmdldERvdENvdW50KCkgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCAqIF8ub3B0aW9ucy5lZGdlRnJpY3Rpb247XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiAoXy4kbGlzdC5oZWlnaHQoKSAvIF8ubGlzdFdpZHRoKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlIHx8IF8ub3B0aW9ucy50b3VjaE1vdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0Q1NTKF8uc3dpcGVMZWZ0KTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0b3VjaGVzO1xuXG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ICE9PSAxIHx8IF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFggPSBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFkgPSBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLmRyYWdnaW5nID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrVW5maWx0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRzbGlkZXNDYWNoZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJHByZXZBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRuZXh0QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJykuY3NzKCd3aWR0aCcsICcnKTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuc2xpY2sgPSBmdW5jdGlvbiAoZnJvbUJyZWFrcG9pbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCd1bnNsaWNrJywgW18sIGZyb21CcmVha3BvaW50XSk7XG4gICAgICAgIF8uZGVzdHJveSgpO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlQXJyb3dzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmICFfLm9wdGlvbnMuaW5maW5pdGUpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gMSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZURvdHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuZmluZCgnbGknKS5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlJykuZW5kKCk7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuZmluZCgnbGknKS5lcShNYXRoLmZsb29yKF8uY3VycmVudFNsaWRlIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmF1dG9wbGF5KSB7XG5cbiAgICAgICAgICAgIGlmIChkb2N1bWVudFtfLmhpZGRlbl0pIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLmZuLnNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBvcHQgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGwgPSBfLmxlbmd0aCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICByZXQ7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgodHlwZW9mIG9wdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob3B0KSkgPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9wdCA9PSAndW5kZWZpbmVkJykgX1tpXS5zbGljayA9IG5ldyBTbGljayhfW2ldLCBvcHQpO2Vsc2UgcmV0ID0gX1tpXS5zbGlja1tvcHRdLmFwcGx5KF9baV0uc2xpY2ssIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXQgIT0gJ3VuZGVmaW5lZCcpIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF87XG4gICAgfTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlaiA9IHtcbiAgICBoc2xUb1JnYjogZnVuY3Rpb24gaHNsVG9SZ2IoaCwgcywgbCkge1xuICAgICAgICB2YXIgciwgZywgYjtcbiAgICAgICAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgICAgICAgICBpZiAodCA8IDApIHQgKz0gMTtcbiAgICAgICAgICAgIGlmICh0ID4gMSkgdCAtPSAxO1xuICAgICAgICAgICAgaWYgKHQgPCAxIC8gNikgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgICAgICAgICBpZiAodCA8IDEgLyAyKSByZXR1cm4gcTtcbiAgICAgICAgICAgIGlmICh0IDwgMiAvIDMpIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICB2YXIgcCA9IDIgKiBsIC0gcTtcbiAgICAgICAgciA9IGh1ZTJyZ2IocCwgcSwgaCArIDEgLyAzKTtcbiAgICAgICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxIC8gMyk7XG5cbiAgICAgICAgcmV0dXJuIFtNYXRoLmZsb29yKHIgKiAyNTUpLCBNYXRoLmZsb29yKGcgKiAyMTApLCBNYXRoLmZsb29yKGIgKiA2MCldO1xuICAgIH0sXG5cbiAgICBudW1iZXJUb0NvbG9ySHNsOiBmdW5jdGlvbiBudW1iZXJUb0NvbG9ySHNsKGkpIHtcbiAgICAgICAgdmFyIGh1ZSA9IGkgKiAxLjIgLyAzNjA7XG4gICAgICAgIHZhciByZ2IgPSByZWouaHNsVG9SZ2IoaHVlLCAxLCAuNSk7XG4gICAgICAgIHJldHVybiAncmdiKCcgKyByZ2JbMF0gKyAnLCcgKyByZ2JbMV0gKyAnLCcgKyByZ2JbMl0gKyAnKSc7XG4gICAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgcHVuY3R1YXRpb24gPSBcIjw8LD4uPy86O1xcXCInKCkhXCIuc3BsaXQoJycpO1xuXG4gICAgdmFyIERhc2hib2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRGFzaGJvYXJkKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXNoYm9hcmQpO1xuXG4gICAgICAgICAgICB0aGlzLiRyb290ID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIGlmICghdGhpcy4kcm9vdC5sZW5ndGgpIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy4kY3VycmVudFBvc3QgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLiR0aGVybSA9IHRoaXMuJHJvb3QuZmluZCgnLnRoZXJtLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgdGhpcy4kdGlja2VyID0gdGhpcy4kcm9vdC5jbG9zZXN0KCdib2R5JykuZmluZCgnLnRpY2tlcicpO1xuICAgICAgICAgICAgdGhpcy5pbml0TGlzdGVuZXJzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoRGFzaGJvYXJkLCBbe1xuICAgICAgICAgICAga2V5OiAnaW5pdExpc3RlbmVycycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdExpc3RlbmVycygpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgJGpzVGFnc0lucHV0ID0gdGhpcy4kcm9vdC5maW5kKCcuanMtaGFzaHRhZ3MnKTtcbiAgICAgICAgICAgICAgICAkanNUYWdzSW5wdXQudGFnc2lucHV0KHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUtleXM6IFszMiwgNDRdLFxuICAgICAgICAgICAgICAgICAgICBzcGxpdE9uOiAnLCcsXG4gICAgICAgICAgICAgICAgICAgIHRyaW1WYWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRqc1RhZ3NJbnB1dC5vbignaXRlbUFkZGVkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxzID0gJCh0aGlzKS5jbG9zZXN0KCcuaW5wdXQtZ3JvdXAnKS5maW5kKCcuYm9vdHN0cmFwLXRhZ3NpbnB1dCcpLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2YWxzKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQoJy5ib290c3RyYXAtdGFnc2lucHV0IGlucHV0Jykua2V5dXAoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5maWxsRGFzaGJvYXJkKCQoJy5qcy1oYXNodGFncycpLnZhbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJCgnLmpzLWhhc2h0YWdzLXN1Ym1pdCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmlsbERhc2hib2FyZCgkKCcuanMtaGFzaHRhZ3MnKS52YWwoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKCdib2R5Jykub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGUubWV0YUtleSB8fCBlLmN0cmxLZXkpICYmIGUua2V5Q29kZSA9PT0gNzYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi4kY3VycmVudFBvc3QuZmluZCgnLmxpa2UgaW5wdXQnKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZVF1YWxpdHlTdGljaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUXVhbGl0eVN0aWNrKGNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgJHByb2dyZXNzID0gdGhpcy4kdGhlcm0uZmluZCgnLnByb2dyZXNzJyksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMCxcbiAgICAgICAgICAgICAgICAgICAgcHVuY1JhdGlvID0gMDtcblxuICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5taW4oY29tbWVudC5zcGxpdCgnJykubGVuZ3RoIC8gMTQwLCAxKSAqIDUwOyBcblxuICAgICAgICAgICAgICAgIHZhbHVlICs9IGNvbW1lbnQuc3BsaXQoJyAnKS5sZW5ndGggKiAxLjI7XG5cbiAgICAgICAgICAgICAgICBwdW5jUmF0aW8gPSBjb21tZW50LnNwbGl0KCcnKS5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB1bmN0dWF0aW9uLmluZGV4T2YobSkgPiAtMTtcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGggLyBjb21tZW50LnNwbGl0KCcnKS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiAocHVuY1JhdGlvID4gMCAmJiBwdW5jUmF0aW8gPCAuMSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAqPSAxLjg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwdW5jUmF0aW8gPj0gLjEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKj0gLjM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0V2lkdGhhbmRDb2xvcihpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IE1hdGgubWluKGksIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IHJlai5udW1iZXJUb0NvbG9ySHNsKHdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yU3RlcHBlciA9IHJlai5udW1iZXJUb0NvbG9ySHNsKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGhTdGVwcGVyID0gaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoU3RlcHBlcisrID49IHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkcHJvZ3Jlc3MuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGhTdGVwcGVyICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiByZWoubnVtYmVyVG9Db2xvckhzbCh3aWR0aFN0ZXBwZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZXRXaWR0aGFuZENvbG9yKHZhbHVlKTsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2lnUG9zdEh0bWwnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlnUG9zdEh0bWwocG9zdE9iaikge1xuXG4gICAgICAgICAgICAgICAgdmFyIG1lZGlhID0gJyc7XG4gICAgICAgICAgICAgICAgdmFyIGhhc2h0YWdzID0gcG9zdE9iai5jYXB0aW9uLnNwbGl0KCcjJykubWFwKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaCkgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgICAgICBoID0gaC5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaC5sZW5ndGggPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8YSBocmVmPVwiI1wiPiMnICsgaFswXSArICc8L2E+ICcgKyBoLnNsaWNlKDEpLmpvaW4oJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaC5qb2luKCcgJyk7XG4gICAgICAgICAgICAgICAgfSk7IFxuXG4gICAgICAgICAgICAgICAgaWYgKHBvc3RPYmouY2FwdGlvblswXSAhPSBcIiNcIikge1xuICAgICAgICAgICAgICAgICAgICBoYXNodGFnc1swXSA9IHBvc3RPYmouY2FwdGlvbi5zcGxpdCgnIycpWzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhhc2h0YWdzID0gaGFzaHRhZ3Muam9pbignICcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvc3RPYmoudmlkZW9zKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhID0gJ1xcbiAgICAgICAgICAgICAgICA8dmlkZW8gY29udHJvbHM9XCJmYWxzZVwiIHdpZHRoPVwiJyArIHBvc3RPYmoudmlkZW9zLnN0YW5kYXJkX3Jlc29sdXRpb24ud2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIHBvc3RPYmoudmlkZW9zLnN0YW5kYXJkX3Jlc29sdXRpb24uaGVpZ2h0ICsgJ1wiIGxvb3A+XFxuICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9XCInICsgcG9zdE9iai52aWRlb3Muc3RhbmRhcmRfcmVzb2x1dGlvbi51cmwgKyAnXCIgdHlwZT1cInZpZGVvL21wNFwiPlxcbiAgICAgICAgICAgICAgICAgIFlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSB2aWRlbyB0YWcuXFxuICAgICAgICAgICAgICAgIDwvdmlkZW8+JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZWRpYSA9ICc8aW1nIHNyYz1cIicgKyBwb3N0T2JqLmltYWdlcy5zdGFuZGFyZF9yZXNvbHV0aW9uLnVybCArICdcIiAvPic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuICcgICAgICBcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvc3QtY29udGFpbmVyIGhpZGRlbiByb3dcIiBkYXRhLXBvc3RpZD1cIicgKyBwb3N0T2JqLmlkICsgJ1wiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImltYWdlLWNvbnRhaW5lciBjb2wtbWQtOFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICcgKyBtZWRpYSArICdcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlrZVwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJpZy1saWtlZFwiLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImlnLWxpa2VkXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTEyIDIxLjM1bC0xLjQ1LTEuMzJjLTUuMTUtNC42Ny04LjU1LTcuNzUtOC41NS0xMS41MyAwLTMuMDggMi40Mi01LjUgNS41LTUuNSAxLjc0IDAgMy40MS44MSA0LjUgMi4wOSAxLjA5LTEuMjggMi43Ni0yLjA5IDQuNS0yLjA5IDMuMDggMCA1LjUgMi40MiA1LjUgNS41IDAgMy43OC0zLjQgNi44Ni04LjU1IDExLjU0bC0xLjQ1IDEuMzF6XCIvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzaWRlLWRldGFpbHMgY29sLW1kLTRcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcJ2lucHV0LWNvbW1lbnRzXFwnPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcJ2NvbW1lbnRzXFwnPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJjYXB0aW9uXCI+JyArIGhhc2h0YWdzICsgJzwvcD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cXCdjb21tZW50IGZvcm0tY29udHJvbFxcJz48L3RleHRhcmVhPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdydW5Db21tZW50aW5nJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBydW5Db21tZW50aW5nKCkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJHJvb3QuZmluZCgnLnBvc3QtY29udGFpbmVyJykubGVuZ3RoIDwgMykge1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUXVhbGl0eVN0aWNrKCcnKTtcblxuICAgICAgICAgICAgICAgIHZhciAkdGV4dEFyZWEgPSB0aGlzLiRjdXJyZW50UG9zdC5maW5kKCd0ZXh0YXJlYScpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdC5maW5kKCcuaGFzaC1zZWFyY2gnKS5hZGRDbGFzcygncmVtb3ZlJyk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3RIZWlnaHQgPSBfdGhpczMuJGN1cnJlbnRQb3N0LmhlaWdodCgpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMy4kY3VycmVudFBvc3QuZmluZCgndmlkZW8nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWRlb0VsID0gX3RoaXMzLiRjdXJyZW50UG9zdC5maW5kKCd2aWRlbycpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9FbC5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWRlb0VsLmNvbnRyb2xzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuJGN1cnJlbnRQb3N0LmZpbmQoJ3ZpZGVvJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdXNlZCA/IHRoaXMucGxheSgpIDogdGhpcy5wYXVzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0ZXh0QXJlYS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgICAgICAgfSwgNTApOyBcblxuXG4gICAgICAgICAgICAgICAgJHRleHRBcmVhLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChlLm1ldGFLZXkgfHwgZS5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KSAmJiBlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGV4dEFyZWEudmFsKCR0ZXh0QXJlYS52YWwoKSArIFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdWJtaXQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5zdWJtaXRDb21tZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICR0ZXh0QXJlYS5rZXl1cChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczMudXBkYXRlUXVhbGl0eVN0aWNrKCQoZS5jdXJyZW50VGFyZ2V0KS52YWwoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3ByZUNvbW1lbnRpbmcnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByZUNvbW1lbnRpbmcobmV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGN1cnJlbnRQb3N0ID0gdGhpcy4kY3VycmVudFBvc3QgfHwgdGhpcy4kcm9vdC5maW5kKCcuaWctY29udGVudC13aW5kb3cnKS5maW5kKCcucG9zdC1jb250YWluZXInKS5maXJzdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuJHRoZXJtLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRjdXJyZW50UG9zdC5yZW1vdmVDbGFzcygnaGlkZGVuJyk7IFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobmV4dCwgMTUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3N1Ym1pdENvbW1lbnQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN1Ym1pdENvbW1lbnQoY29tbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciAkbmV4dFBvc3QgPSB0aGlzLiRjdXJyZW50UG9zdC5uZXh0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kY3VycmVudFBvc3QucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kY3VycmVudFBvc3QgPSAkbmV4dFBvc3Q7XG4gICAgICAgICAgICAgICAgdGhpcy4kY3VycmVudFBvc3QucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIHRoaXMucnVuQ29tbWVudGluZygpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUaWNrZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndXBkYXRlVGlja2VyJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVUaWNrZXIoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgY291bnQgPSArdGhpcy4kdGlja2VyLnRleHQoKTtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgIHRoaXMuJHRpY2tlci50ZXh0KGNvdW50KTtcbiAgICAgICAgICAgICAgICB2YXIgdGNsID0gdGhpcy4kdGlja2VyLmNsb25lKCk7XG5cbiAgICAgICAgICAgICAgICB0Y2wuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGhpcy4kdGlja2VyLm9mZnNldCgpLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGhpcy4kdGlja2VyLm9mZnNldCgpLnRvcFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZCh0Y2wpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzNC4kdGlja2VyLnRleHQoY291bnQpO1xuICAgICAgICAgICAgICAgICAgICB0Y2wudGV4dChjb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIHRjbC5hZGRDbGFzcygnZmFkZScpO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRjbC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2ZpbGxEYXNoYm9hcmQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGxEYXNoYm9hcmQoaGFzaHRhZ3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyICRjb250ZW50Um9vdCA9ICQoJy5pZy1jb250ZW50LXdpbmRvdycsIHRoaXMuJHJvb3QpO1xuXG4gICAgICAgICAgICAgICAgaGFzaHRhZ3MgPSBoYXNodGFncy5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0YWc9JyArIGh0O1xuICAgICAgICAgICAgICAgIH0pLmpvaW4oJyYnKTtcblxuICAgICAgICAgICAgICAgICQuZ2V0SlNPTignLi9hcGkvdXNlci90YWdzPycgKyBoYXNodGFncyArICcmdXNlcm5hbWU9aXRjcm9wcGVyJnBhc3N3b3JkPVRlQ3oxMzEzJykuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGltYWdlcyA9IGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM1LmlnUG9zdEh0bWwoZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkY29udGVudFJvb3QuYXBwZW5kKCRpbWFnZXMuam9pbignJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIF90aGlzNS5wcmVDb21tZW50aW5nKF90aGlzNS5ydW5Db21tZW50aW5nLmJpbmQoX3RoaXM1KSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcblxuICAgICAgICByZXR1cm4gRGFzaGJvYXJkO1xuICAgIH0oKTtcblxuICAgIGlmICh0eXBlb2YgZGFzaGJvYXJkID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBkYXNoYm9hcmQgPSBuZXcgRGFzaGJvYXJkKCcuZGFzaGJvYXJkJyk7XG4gICAgfVxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIExvZ2luID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBMb2dpbihlbCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvZ2luKTtcblxuICAgICAgICAgICAgdGhpcy4kcm9vdCA9ICQoZWwpO1xuXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbCA9IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZToga28ub2JzZXJ2YWJsZSgnJyksXG4gICAgICAgICAgICAgICAgcGFzczoga28ub2JzZXJ2YWJsZSgnJylcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMudmlld01vZGVsLnN1Ym1pdGFibGUgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnZpZXdNb2RlbC51c2VybmFtZSgpICE9ICcnICYmIF90aGlzLnZpZXdNb2RlbC5wYXNzKCkgIT0gJyc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAga28uYXBwbHlCaW5kaW5ncyh0aGlzLnZpZXdNb2RlbCk7XG5cbiAgICAgICAgICAgIHRoaXMuJHJvb3QuZmluZCgnLmJ0bicpLm9uKCdjbGljaycsIHRoaXMubG9naW4uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoTG9naW4sIFt7XG4gICAgICAgICAgICBrZXk6ICdsb2dpbicsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbG9naW4oZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL2xvZ2luXCIsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnZpZXdNb2RlbC51c2VybmFtZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMudmlld01vZGVsLnBhc3MoKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pLmRvbmUoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBcIi9kYXNoYm9hcmRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIExvZ2luO1xuICAgIH0oKTtcblxuICAgIGlmICgkKCcubG9naW4tY29udGFpbmVyJykubGVuZ3RoKSB7XG4gICAgICAgIHZhciBzaWduID0gbmV3IExvZ2luKCcubG9naW4tY29udGFpbmVyJyk7XG4gICAgfVxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIFNpZ251cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gU2lnbnVwKGVsKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2lnbnVwKTtcblxuICAgICAgICAgICAgdGhpcy4kcm9vdCA9ICQoZWwpO1xuXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbCA9IHtcbiAgICAgICAgICAgICAgICB0ZXJzbUFuZENvbmQ6IGtvLm9ic2VydmFibGUoZmFsc2UpLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBrby5vYnNlcnZhYmxlKCcnKSxcbiAgICAgICAgICAgICAgICBlbWFpbDI6IGtvLm9ic2VydmFibGUoJycpLFxuICAgICAgICAgICAgICAgIGJhZEVtYWlsMjoga28ub2JzZXJ2YWJsZSgnJyksXG4gICAgICAgICAgICAgICAgcGFzczoga28ub2JzZXJ2YWJsZSgnJyksXG4gICAgICAgICAgICAgICAgcGFzczI6IGtvLm9ic2VydmFibGUoJycpLFxuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBrby5vYnNlcnZhYmxlKCcnKSxcbiAgICAgICAgICAgICAgICBiYWRVc2VybmFtZToga28ub2JzZXJ2YWJsZShmYWxzZSlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMudmlld01vZGVsLnVzZXJuYW1lLnN1YnNjcmliZShmdW5jdGlvbiAobnYpIHtcblxuICAgICAgICAgICAgICAgIGlmIChudi5yZXBsYWNlKC9cXHMrL2csIFwiXCIpICE9IG52KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnZpZXdNb2RlbC5iYWRVc2VybmFtZShcIlVzZXJuYW1lIGNhbm5vdCBjb250YWluIHNwYWNlIGNoYXJhY3RlcnMuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGFqYXg7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhamF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4LmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFqYXggPSAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXCIvYXBpL3VzZXIvY2hlY2t1c2VybmFtZS9cIiArIG52LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnZpZXdNb2RlbC5iYWRVc2VybmFtZShcIlRoYXQgdXNlcm5hbWUgaXMgYWxyZWFkeSB0YWtlbi4gUGxlYXNlIGNob3NlIGFub3RoZXIgb25lLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy52aWV3TW9kZWwuYmFkVXNlcm5hbWUoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhamF4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbC5lbWFpbDIuc3Vic2NyaWJlKGZ1bmN0aW9uIChudikge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy52aWV3TW9kZWwuZW1haWwoKSAhPSBudikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy52aWV3TW9kZWwuYmFkRW1haWwyKCdFbWFpbHMgZG8gbm90IG1hdGNoJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMudmlld01vZGVsLnN1Ym1pdGFibGUgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnZpZXdNb2RlbC50ZXJzbUFuZENvbmQoKSAmJiBfdGhpcy52aWV3TW9kZWwuZW1haWwoKSAhPSAnJyAmJiBfdGhpcy52aWV3TW9kZWwuZW1haWwyKCkgIT0gJycgJiYgX3RoaXMudmlld01vZGVsLnBhc3MoKSAhPSAnJyAmJiBfdGhpcy52aWV3TW9kZWwucGFzczIoKSAhPSAnJztcbiAgICAgICAgICAgICAgICBfdGhpcy52aWV3TW9kZWwudXNlcm5hbWUoKSAhPSAnJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiRyb290LmZpbmQoJy5idG4nKS5vbignY2xpY2snLCB0aGlzLnN1Ym1pdFNpZ251cC5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAga28uYXBwbHlCaW5kaW5ncyh0aGlzLnZpZXdNb2RlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoU2lnbnVwLCBbe1xuICAgICAgICAgICAga2V5OiAnc3VibWl0U2lnbnVwJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJtaXRTaWdudXAoZSkge1xuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9hcGkvdXNlci9jcmVhdGVVc2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnZpZXdNb2RlbC51c2VybmFtZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IHRoaXMudmlld01vZGVsLmVtYWlsKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogdGhpcy52aWV3TW9kZWwucGFzcygpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBTaWdudXA7XG4gICAgfSgpO1xuXG4gICAgaWYgKCQoJy5zaWdudXAtY29udGFpbmVyJykubGVuZ3RoKSB7XG4gICAgICAgIHZhciBzaWduID0gbmV3IFNpZ251cCgnLnNpZ251cC1jb250YWluZXInKTtcbiAgICB9XG59KSgpOyJdfQ==
